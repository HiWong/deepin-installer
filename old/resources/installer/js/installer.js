// Generated by CoffeeScript 1.10.0
(function() {
  var $, $s, $tooltip, Account, AddPartDialog, ArrowToolTip, BOOT_SIZE_MIN, DEBUG, DEEPIN_ITEM_ID, DOWN_ARROW, DeletePartDialog, Dialog, DiskTab, DropDown, DropDownItem, DropDownList, ENTER_KEY, ESC_KEY, ErrorCode, ExitDialog, Finish, FormatDialog, GB, InstallDialog, KB, KEYCODE, Keyboard, KeyboardDetectDialog, LEFT_ARROW, LayoutItem, MB, MINIMUM_PRECEDING_SIZE, MessageDialog, Module, NextStep, Page, PageContainer, Part, PartLineItem, PartLineMaps, PartTable, PartTableItem, Progress, PromptDialog, RIGHT_ARROW, ReportDialog, SPACE_KEY, Timezone, TimezoneToolTip, ToolTip, ToolTipBase, Trie, UP_ARROW, VariantItem, VirtualMachine, Welcome, WelcomeFormItem, Widget, _, __account_widget, __board, __current_dropdown, __current_page, __database, __drop_board, __focused_layout_item, __fs_efi_keys, __fs_efi_values, __fs_keys, __fs_values, __in_model, __init_parted_finish, __keyboard_widget, __legal_keys, __mp_keys, __mp_values, __os_prober_finish, __selected_bootloader, __selected_disk, __selected_home, __selected_hostname, __selected_item, __selected_layout, __selected_layout_item, __selected_line, __selected_locale, __selected_mode, __selected_password, __selected_stage, __selected_target, __selected_timezone, __selected_use_uefi, __selected_username, __selected_variant_item, __selected_zone_index, __timezone_widget, __update_fs_json, _add_logical, _add_normal, _color_list, _delete_extended, _delete_logical, _delete_normal, _events, _filter_extended, _filter_freespace, _filter_in_extended, _filter_logical, _filter_modeled_add, _filter_modeled_delete, _filter_modeled_update, _filter_normal, _filter_not_in_extended, _filter_primary, _ppt_list, _sort_disk, _sort_layout, _sort_part_geom, _sort_part_op, add_part, ajax, apply_animation, apply_flash, apply_linear_hide, apply_linear_hide_show, apply_linear_show, apply_refuse_rotate, apply_rotate, array_sort_min2max, assert, auto_simple_partition, bindtextdomain, build_menu, calc_text_size, can_add_logical, can_add_normal, check_has_mount, check_only_swap_mount, check_target_part, clamp, create_element, create_img, delete_el_attr, delete_part, delete_style_attr, disable_tab, disks, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, do_partition, enable_tab, find_drag_target, finish_page, getRandomInt, get_dbus, get_disk_fake_length, get_efi_boot_part, get_extended_partition, get_freespace_partitions, get_function_name, get_logical_partitions, get_main_blocks, get_matched_items, get_modeled_partitions, get_mp_partition, get_next_part, get_normal_partitions, get_page_xy, get_part_num, get_path_base, get_path_name, get_position, get_prev_part, get_primary_partitions, get_random_color, get_recommand_target, get_scroll_height, get_secondary_blocks, get_selected_mp, get_target_part, init_m_disk_info, init_m_part_info, init_v_disk_info, init_v_part_info, inject_css, inject_js, is_ancestor, is_in_extended, is_in_same_block, is_match_install_require, keyboardSet_div, m_disk_info, m_part_info, mark_add, mark_delete, mark_update, minimum_disk_size_required, part_page, pc, progress_page, random_list, record_mount_points, remove_element, run_post, set_pos_center, sortNumber, sort_v_disk_info, swap_element, sync_installer_conf, sync_part_os, tabEnableElements, timezoneSet_div, timezone_json, tooltipOffsetX, tooltipOffsetY, tooltip_hide_id, try_removed_start_install, undo_part_table_info, update_el_attr, update_keyboard_text, update_part_display_path, update_part_format, update_part_fs, update_part_mp, update_style_attr, update_timezone_text, v_disk_info, v_part_info, virtual_page, welcome_page,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ESC_KEY = 27;

  SPACE_KEY = 32;

  ENTER_KEY = 13;

  LEFT_ARROW = 37;

  RIGHT_ARROW = 39;

  UP_ARROW = 38;

  DOWN_ARROW = 40;

  KEYCODE = {
    ESC: 27,
    SPACE: 32,
    ENTER: 13,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
    UP_ARROW: 38,
    DOWN_ARROW: 40,
    WIN: 0,
    SUPER: 0,
    ALT: 18,
    BACKSPACE: 8,
    F12: 123,
    TAB: 9
  };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  String.prototype.args = function() {
    var i, j, len, o, ref;
    o = this;
    len = arguments.length;
    for (i = j = 1, ref = len; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      o = o.replace(new RegExp("%" + i, "g"), "" + arguments[i - 1]);
    }
    return o;
  };

  String.prototype.addSlashes = function() {
    return this.replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
  };

  Array.prototype.remove = function(el) {
    var i;
    i = this.indexOf(el);
    if (i !== -1) {
      return this.splice(this.indexOf(el), 1)[0];
    }
  };

  assert = function(value, msg) {
    if (!value) {
      throw new Error(msg);
    }
  };

  _ = function(s, d) {
    if (d) {
      return DCore.dgettext(d, s);
    } else {
      return DCore.gettext(s);
    }
  };

  bindtextdomain = function(domain, locale_dir) {
    return DCore.bindtextdomain(domain, locale_dir);
  };

  build_menu = function(info) {
    var count, i, item, j, len, menu, ref, submenu, v;
    len = info.length;
    if (len < 2) {
      return null;
    }
    count = 10000;
    menu = new Menu(info[0]);
    for (i = j = 1, ref = len; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
      v = info[i];
      if (v.length === 0) {
        menu.addSeparator();
      } else if (typeof v[0] === "number") {
        item = new MenuItem(v[0], v[1]);
        if (v[2] != null) {
          item.setActive(v[2]);
        }
        menu.append(item);
      } else {
        submenu = build_menu(v[1]);
        menu.append(new MenuItem(count, v[1]).setSubMenu(build_menu(v[1])));
        count += 1;
      }
    }
    return menu;
  };

  get_page_xy = function(el, x, y) {
    var p;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return p = webkitConvertPointFromNodeToPage(el, new WebKitPoint(x, y));
  };

  find_drag_target = function(el) {
    var p;
    p = el;
    if (p.draggable) {
      return p;
    }
    while (p = p.parentNode) {
      if (p.draggable) {
        return p;
      }
    }
    return null;
  };

  swap_element = function(c1, c2) {
    var tmp;
    if (c1.parentNode === c2.parentNode) {
      tmp = document.createElement('div');
      c1.parentNode.insertBefore(tmp, c1);
      c2.parentNode.insertBefore(c1, c2);
      tmp.parentNode.insertBefore(c2, tmp);
      return tmp.parentNode.removeChild(tmp);
    }
  };

  document.body.ondrop = function(e) {
    return e.preventDefault();
  };

  run_post = function(f, self) {
    var f2;
    f2 = f.bind(self || this);
    return setTimeout(f2, 0);
  };

  create_element = function(opt, parent, compatible) {
    var el, k, v;
    if (typeof compatible !== 'undefined' || typeof parent === 'string') {
      opt = {
        tag: opt,
        "class": parent
      };
      parent = compatible;
    }
    if (opt.tag == null) {
      return null;
    }
    el = document.createElement(opt.tag);
    delete opt.tag;
    for (k in opt) {
      if (!hasProp.call(opt, k)) continue;
      v = opt[k];
      el.setAttribute(k, v);
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };

  create_img = function(opt, parent, compatible) {
    var el;
    if (typeof compatible !== 'undefined') {
      opt = {
        "class": opt,
        src: parent
      };
      parent = compatible;
    }
    opt.tag = 'img';
    el = create_element(opt, parent);
    el.draggable = false;
    return el;
  };

  calc_text_size = function(txt, width) {
    var h, tmp;
    tmp = create_element('div', 'hidden_calc_text', document.body);
    tmp.innerText = txt;
    tmp.style.width = width + "px";
    h = tmp.clientHeight;
    document.body.removeChild(tmp);
    return h;
  };

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  get_function_name = function() {
    if (!arguments.caller) {
      return "AnymouseFunction";
    }
    return /function (.*?)\(/.exec(arguments.caller.toString())[1];
  };

  DEEPIN_ITEM_ID = "deepin-item-id";

  dnd_is_desktop = function(e) {
    return e.dataTransfer.getData("text/uri-list").trim().endsWith(".desktop");
  };

  dnd_is_deepin_item = function(e) {
    if (e.dataTransfer.getData(DEEPIN_ITEM_ID)) {
      return true;
    } else {
      return false;
    }
  };

  dnd_is_file = function(e) {
    return e.dataTransfer.getData("text/uri-list").length !== 0;
  };

  ajax = function(url, sync, callback, callback_error) {
    var xhr;
    if (sync == null) {
      sync = true;
    }
    xhr = new XMLHttpRequest();
    xhr.open("GET", url, sync);
    xhr.onload = function() {
      if (typeof callback === "function") {
        callback(xhr);
      }
    };
    xhr.onerror = function() {
      return typeof callback_error === "function" ? callback_error(xhr) : void 0;
    };
    return xhr.send(null);
  };

  get_path_base = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  get_path_name = function(path) {
    var dot_pos;
    dot_pos = path.lastIndexOf('.');
    if (dot_pos === -1) {
      return path.substring(path.lastIndexOf('/') + 1);
    } else {
      return path.substring(path.lastIndexOf('/') + 1, dot_pos);
    }
  };

  remove_element = function(obj) {
    var _parentElement;
    _parentElement = obj != null ? obj.parentNode : void 0;
    return _parentElement != null ? _parentElement.removeChild(obj) : void 0;
  };

  sortNumber = function(a, b) {
    return a - b;
  };

  array_sort_min2max = function(arr) {
    return arr.sort(sortNumber);
  };

  inject_js = function(src) {
    var js_element;
    js_element = create_element("script", null, document.body);
    return js_element.src = src;
  };

  inject_css = function(el, src) {
    var css_element;
    css_element = create_element('link', null, el);
    css_element.rel = "stylesheet";
    return css_element.href = src;
  };

  get_dbus = function(type, opt, testProperty) {
    var count, d, dbusArg, e, error1, func;
    if (!testProperty) {
      throw "get_dbus requires 3 arguments";
    }
    type = type.toLowerCase();
    if (type === "system") {
      type = "sys";
    }
    if (typeof opt === 'string') {
      dbusArg = [opt];
      func = DCore.DBus[type];
    } else {
      dbusArg = [opt.name, opt.path, opt["interface"]];
      func = DCore.DBus[type + "_object"];
    }
    d = null;
    try {
      d = func.apply(null, dbusArg);
    } catch (error1) {
      e = error1;
      if (typeof opt === 'string') {
        console.log("Get DBus \"" + opt + "\" failed: " + e);
      } else {
        console.log("Get DBus \"" + opt.name + " " + opt.path + " " + opt["interface"] + "\" failed: " + e);
      }
      return null;
    }
    if (!d) {
      if (typeof opt === 'string') {
        console.log("Get DBus \"" + opt + "\" failed");
      } else {
        console.log("Get DBus \"" + opt.name + " " + opt.path + " " + opt["interface"] + "\" failed");
      }
      return null;
    }
    count = 0;
    while (d && !d[testProperty]) {
      try {
        d = func.apply(null, dbusArg);
        count += 1;
        if (typeof opt === 'string') {
          console.log("Get DBus \"" + opt + "\" failed");
        } else {
          console.log("Get DBus \"" + opt.name + " " + opt.path + " " + opt["interface"] + "\" failed");
        }
        if (count === 100) {
          return null;
        }
      } catch (undefined) {}
    }
    return d;
  };

  getRandomInt = function(min, max) {
    var c;
    c = max - min + 1;
    return Math.floor(Math.random() * c + min);
  };

  set_pos_center = function(el, y_scale, x_scale) {
    var left, top;
    if (y_scale == null) {
      y_scale = 0.8;
    }
    if (x_scale == null) {
      x_scale = 0.8;
    }
    top = (screen.height - el.clientHeight) / 2 * y_scale;
    left = (screen.width - el.clientWidth) / 2 * x_scale;
    el.style.position = "absolute";
    el.style.top = top + "px";
    return el.style.left = left + "px";
  };

  apply_animation = function(el, name, duration, timefunc) {
    el.style.webkitAnimationName = name;
    el.style.webkitAnimationDuration = duration;
    return el.style.webkitAnimationTimingFunction = timefunc || "linear";
  };

  apply_rotate = function(el, time) {
    var id;
    apply_animation(el, "rotate", time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_flash = function(el, time) {
    var id;
    apply_animation(el, "flash", time + "s", "cubic-bezier(0, 0, 0.35, -1)");
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_refuse_rotate = function(el, time) {
    apply_animation(el, "refuse", time + "s", "linear");
    return setTimeout(function() {
      return el.style.webkitAnimation = "";
    }, time * 1000);
  };

  apply_linear_hide_show = function(el, time, timefunc) {
    var id;
    console.log("[animation.coffee] apply_linear_hide_show():", el, time, timefunc);
    el.style.opacity = "1";
    apply_animation(el, "linear-hide-show", time + "s", timefunc);
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_linear_show = function(el, time, timefunc, cb) {
    var id;
    el.style.opacity = "0.0";
    apply_animation(el, "linear-show", time + "s", timefunc);
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      if (typeof cb === "function") {
        cb();
      }
      return clearTimeout(id);
    }, time * 1000);
  };

  apply_linear_hide = function(el, time, timefunc) {
    var id;
    el.style.opacity = "1.0";
    apply_animation(el, "linear-hide", time + "s", timefunc);
    return id = setTimeout(function() {
      el.style.webkitAnimation = "";
      return clearTimeout(id);
    }, time * 1000);
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, ref, value;
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((ref = obj.extended) != null) {
        ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, ref, ref1, value;
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((ref = obj.included) != null) {
        ref.apply(this);
      }
      return (ref1 = obj.__init__) != null ? ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  _events = ['blur', 'change', 'click', 'contextmenu', 'buildmenu', 'rightclick', 'copy', 'cut', 'dblclick', 'error', 'focus', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseenter', 'mouseleave', 'mouseup', 'mousewheel', 'paste', 'reset', 'resize', 'scroll', 'select', 'submit', 'DOMActivate', 'DOMAttrModified', 'DOMCharacterDataModified', 'DOMFocusIn', 'DOMFocusOut', 'DOMMouseScroll', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMSubtreeModified', 'textInput', 'dragstart', 'dragend', 'dragover', 'drag', 'drop', 'dragenter', 'dragleave', 'itemselected', 'webkitTransitionEnd'];

  Widget = (function(superClass) {
    extend(Widget, superClass);

    Widget.object_table = {};

    Widget.look_up = function(id) {
      return this.object_table[id];
    };

    function Widget() {
      var el, f_menu, f_rclick, k, key, ref, v;
      el = document.createElement('div');
      el.setAttribute('class', this.constructor.name);
      if (this.id) {
        el.id = this.id;
        Widget.object_table[this.id] = this;
      }
      this.element = el;
      f_menu = null;
      f_rclick = null;
      ref = this.constructor.prototype;
      for (k in ref) {
        v = ref[k];
        if (!(k.search("do_") === 0)) {
          continue;
        }
        key = k.substr(3);
        if (indexOf.call(_events, key) >= 0) {
          if (key === "rightclick") {
            f_rclick = v.bind(this);
          } else if (key === "buildmenu") {
            f_menu = v.bind(this);
          } else if (key === "contextmenu") {
            "nothing should do";
          } else {
            this.element.addEventListener(key, v.bind(this));
          }
        } else {
          console.error("[widget.coffee] Widget.constructor(), found the do_ prefix but the name " + key + " is not an dom events");
        }
      }
      if (f_menu || f_rclick) {
        this.element.addEventListener("contextmenu", (function(_this) {
          return function(e) {
            var menu, ref1;
            if (f_rclick) {
              f_rclick(e);
            }
            if (f_menu) {
              menu = f_menu();
              menu.unshift(DEEPIN_MENU_TYPE.NORMAL);
              if ((ref1 = build_menu(menu)) != null) {
                ref1.addListener(_this.on_itemselected).showMenu(e.clientX, e.clientY);
              }
              return e.preventDefault();
            }
          };
        })(this));
      }
    }

    Widget.prototype.destroy = function() {
      var ref;
      if ((ref = this.element.parentElement) != null) {
        ref.removeChild(this.element);
      }
      return delete Widget.object_table[this.id];
    };

    Widget.prototype.add_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.add(name);
    };

    Widget.prototype.remove_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.remove(name);
    };

    return Widget;

  })(Module);

  $ = function(q, o) {
    var ref;
    return (ref = $s(q, o)) != null ? ref[0] : void 0;
  };

  $s = function(q, o) {
    var div, selector;
    if (typeof q !== 'string') {
      div = q;
      selector = o;
    } else {
      div = document;
      selector = q;
    }
    switch (selector.charAt(0)) {
      case '#':
        return [div.getElementById(selector.substr(1))];
      case '.':
        return div.getElementsByClassName(selector.substr(1));
      default:
        return div.getElementsByTagName(selector);
    }
  };

  tooltip_hide_id = null;

  $tooltip = null;

  ToolTipBase = (function(superClass) {
    extend(ToolTipBase, superClass);

    function ToolTipBase(buddy, text1, parent1) {
      this.buddy = buddy;
      this.text = text1;
      this.parent = parent1 != null ? parent1 : document.body;
      this.show = bind(this.show, this);
      this.hide = bind(this.hide, this);
      this.on_mouseover = bind(this.on_mouseover, this);
      ToolTipBase.__super__.constructor.apply(this, arguments);
      this.delay_time = 0;
      this.element.addEventListener("mouseover", this.hide);
      this.element.addEventListener("mousemove", this.hide);
      this.element.addEventListener("mouseenter", this.hide);
      this.element.addEventListener("mouseout", this.hide);
    }

    ToolTipBase.prototype.set_delay_time = function(millseconds) {
      return this.delay_time = millseconds;
    };

    ToolTipBase.prototype.set_text = function(text) {
      return this.text = text;
    };

    ToolTipBase.prototype.bind_events = function() {
      this.buddy.addEventListener('dragstart', this.hide);
      this.buddy.addEventListener('dragenter', this.hide);
      this.buddy.addEventListener('dragover', this.hide);
      this.buddy.addEventListener('dragleave', this.hide);
      this.buddy.addEventListener('dragend', this.hide);
      this.buddy.addEventListener('contextmenu', this.hide);
      this.buddy.addEventListener('mouseout', this.hide);
      this.buddy.addEventListener('mouseover', this.on_mouseover);
      return this.buddy.addEventListener('click', this.hide);
    };

    ToolTipBase.prototype.destroy = function() {
      this.buddy.removeEventListener('dragstart', this.hide);
      this.buddy.removeEventListener('dragenter', this.hide);
      this.buddy.removeEventListener('dragover', this.hide);
      this.buddy.removeEventListener('dragleave', this.hide);
      this.buddy.removeEventListener('dragend', this.hide);
      this.buddy.removeEventListener('contextmenu', this.hide);
      this.buddy.removeEventListener('mouseout', this.hide);
      this.buddy.removeEventListener('mouseover', this.on_mouseover);
      this.buddy.removeEventListener('click', this.hide);
      return this.buddy = null;
    };

    ToolTipBase.prototype.on_mouseover = function() {
      if (this.text === '') {
        return;
      }
      clearTimeout(tooltip_hide_id);
      return tooltip_hide_id = setTimeout((function(_this) {
        return function() {
          return _this.show();
        };
      })(this), this.delay_time);
    };

    ToolTipBase.prototype.hide = function() {
      return clearTimeout(tooltip_hide_id);
    };

    ToolTipBase.prototype.show = function() {
      return $tooltip = this;
    };

    return ToolTipBase;

  })(Widget);

  ToolTip = (function(superClass) {
    extend(ToolTip, superClass);

    ToolTip.tooltip = null;

    function ToolTip(buddy, text1, parent1) {
      this.buddy = buddy;
      this.text = text1;
      this.parent = parent1 != null ? parent1 : document.body;
      this._move_tooltip = bind(this._move_tooltip, this);
      this.hide = bind(this.hide, this);
      this.isShown = bind(this.isShown, this);
      this.show = bind(this.show, this);
      ToolTip.__super__.constructor.apply(this, arguments);
      if (ToolTip.tooltip == null) {
        ToolTip.tooltip = create_element("div", "tooltip", this.parent);
      }
      this.bind_events();
    }

    ToolTip.prototype.show = function() {
      ToolTip.__super__.show.apply(this, arguments);
      ToolTip.tooltip.innerText = this.text;
      ToolTip.tooltip.style.display = "block";
      return this._move_tooltip();
    };

    ToolTip.prototype.isShown = function() {
      return ToolTip.tooltip.style.display !== "none";
    };

    ToolTip.prototype.hide = function() {
      var ref;
      ToolTip.__super__.hide.apply(this, arguments);
      return (ref = ToolTip.tooltip) != null ? ref.style.display = "none" : void 0;
    };

    ToolTip.move_to = function(self, x, y) {
      if (y <= 0) {
        self.hide();
        return;
      }
      ToolTip.tooltip.style.left = x + "px";
      return ToolTip.tooltip.style.bottom = y + "px";
    };

    ToolTip.prototype._move_tooltip = function() {
      var offset, page_xy, x;
      page_xy = get_page_xy(this.buddy, 0, 0);
      offset = (this.buddy.clientWidth - ToolTip.tooltip.clientWidth) / 2;
      x = parseInt((page_xy.x + offset).toFixed());
      if (x < 0) {
        x = 0;
      }
      return ToolTip.move_to(this, x, document.body.clientHeight - page_xy.y);
    };

    return ToolTip;

  })(ToolTipBase);

  ArrowToolTip = (function(superClass) {
    extend(ArrowToolTip, superClass);

    ArrowToolTip.container = null;

    ArrowToolTip.tooltip = null;

    ArrowToolTip.arrow = null;

    ArrowToolTip.inversed = false;

    function ArrowToolTip(buddy, text1, inversed, parent1) {
      this.buddy = buddy;
      this.text = text1;
      this.inversed = inversed != null ? inversed : false;
      this.parent = parent1 != null ? parent1 : document.body;
      this._move_tooltip = bind(this._move_tooltip, this);
      this.get_xy = bind(this.get_xy, this);
      this.hide = bind(this.hide, this);
      this.show = bind(this.show, this);
      this.isShown = bind(this.isShown, this);
      ArrowToolTip.__super__.constructor.call(this, this.buddy, this.text, this.parent);
      if (ArrowToolTip.container == null) {
        ArrowToolTip.container = create_element('div', 'arrow_tooltip_container ', this.parent);
      }
      if (ArrowToolTip.tooltip == null) {
        ArrowToolTip.tooltip = create_element('canvas', 'arrow_tooltip', ArrowToolTip.container);
      }
      if (ArrowToolTip.content == null) {
        ArrowToolTip.content = create_element('div', 'arrow_tooltip_content', ArrowToolTip.container);
      }
      if (ArrowToolTip._hidden_content == null) {
        ArrowToolTip._hidden_content = create_element('div', 'arrow_tooltip_hidden_content', this.parent);
      }
      this.bind_events();
    }

    ArrowToolTip.prototype.isShown = function() {
      return ArrowToolTip.container.style.display !== 'none';
    };

    ArrowToolTip.prototype.setPointerEvents = function(eventMask) {
      var ref, ref1, ref2;
      if ((ref = ArrowToolTip.container) != null) {
        ref.style.pointerEvents = eventMask;
      }
      if ((ref1 = ArrowToolTip.content) != null) {
        ref1.style.pointerEvents = eventMask;
      }
      return (ref2 = this.buddy) != null ? ref2.style.pointerEvents = eventMask : void 0;
    };

    ArrowToolTip.prototype.draw = function() {
      var arch, bottomY, canvas, content, ctx, grd, height, leftX, offset, offsetForRadius, offsetForShadow, padding, page_xy, radius, rightX, topY, triangle, x;
      content = ArrowToolTip._hidden_content;
      canvas = ArrowToolTip.tooltip;
      ctx = canvas.getContext('2D');
      triangle = {
        width: 18,
        height: 10
      };
      if (this.inversed) {
        padding = {
          horizontal: 5,
          vertical: 2,
          abs_horizontal: 25
        };
      } else {
        padding = {
          horizontal: 5,
          vertical: 0
        };
      }
      radius = 4;
      if (this.inversed) {
        offsetForShadow = 12;
      } else {
        offsetForShadow = 6;
      }
      offsetForRadius = 0;
      height = content.clientHeight - offsetForRadius * 2;
      canvas.width = content.clientWidth + 2 * (padding.horizontal + radius + offsetForShadow);
      canvas.height = height + 2 * (padding.vertical + radius + offsetForShadow) + triangle.height;
      ArrowToolTip.container.width = canvas.width;
      ArrowToolTip.container.height = canvas.height;
      topY = offsetForShadow + radius;
      bottomY = topY + height + padding.vertical * 2;
      leftX = offsetForShadow + radius;
      rightX = leftX + 2 * padding.horizontal + content.clientWidth;
      arch = {
        TopLeft: {
          ox: leftX,
          oy: topY,
          radius: radius,
          startAngle: Math.PI,
          endAngle: Math.PI * 1.5
        },
        TopRight: {
          ox: rightX,
          oy: topY,
          radius: radius,
          startAngle: Math.PI * 1.5,
          endAngle: Math.PI * 2
        },
        BottomRight: {
          ox: rightX,
          oy: bottomY,
          radius: radius,
          startAngle: 0,
          endAngle: Math.PI * 0.5
        },
        BottomLeft: {
          ox: leftX,
          oy: bottomY,
          radius: radius,
          startAngle: Math.PI * 0.5,
          endAngle: Math.PI
        }
      };
      ctx = canvas.getContext('2d');
      ctx.save();
      ctx.beginPath();
      ctx.moveTo(leftX - radius, topY);
      ctx.arc(arch['TopLeft'].ox, arch['TopLeft'].oy, arch['TopLeft'].radius, arch['TopLeft'].startAngle, arch['TopLeft'].endAngle);
      if (this.inversed) {
        ctx.lineTo(leftX + padding.abs_horizontal, topY - radius);
        ctx.lineTo(leftX + padding.abs_horizontal + triangle.width / 2, topY - radius - triangle.height);
        ctx.lineTo(leftX + padding.abs_horizontal + triangle.width, topY - radius);
      }
      ctx.lineTo(rightX, topY - radius);
      ctx.arc(arch['TopRight'].ox, arch['TopRight'].oy, arch['TopRight'].radius, arch['TopRight'].startAngle, arch['TopRight'].endAngle);
      ctx.lineTo(rightX + radius, bottomY);
      ctx.arc(arch['BottomRight'].ox, arch['BottomRight'].oy, arch['BottomRight'].radius, arch['BottomRight'].startAngle, arch['BottomRight'].endAngle);
      if (!this.inversed) {
        page_xy = get_page_xy(this.buddy, 0, 0);
        offset = (this.buddy.clientWidth - ArrowToolTip.container.clientWidth) / 2;
        x = parseInt((page_xy.x + offset).toFixed());
        if (x > 0) {
          x = x + ArrowToolTip.container.clientWidth;
          if (x > screen.width) {
            x = x - screen.width;
          } else {
            x = 0;
          }
        }
        ctx.lineTo(leftX + padding.horizontal + (content.clientWidth + triangle.width) / 2 + x, bottomY + radius);
        ctx.lineTo(leftX + padding.horizontal + content.clientWidth / 2 + x, bottomY + radius + triangle.height);
        ctx.lineTo(leftX + padding.horizontal + (content.clientWidth - triangle.width) / 2 + x, bottomY + radius);
      }
      ctx.lineTo(leftX, bottomY + radius);
      ctx.arc(arch['BottomLeft'].ox, arch['BottomLeft'].oy, arch['BottomLeft'].radius, arch['BottomLeft'].startAngle, arch['BottomLeft'].endAngle);
      ctx.closePath();
      ctx.shadowBlur = offsetForShadow;
      ctx.shadowColor = 'black';
      ctx.shadowOffsetY = 2;
      ctx.strokeStyle = 'rgba(255,255,255, 0.7)';
      ctx.lineWidth = 1;
      ctx.stroke();
      grd = ctx.createLinearGradient(0, 0, 0, height + 2 * padding.vertical + radius * 2 + triangle.height);
      grd.addColorStop(0, 'rgba(0,0,0,0.7)');
      grd.addColorStop(1, 'rgba(0,0,0,0.9)');
      ctx.fillStyle = grd;
      ctx.fill();
      ctx.restore();
      ArrowToolTip.content.style.top = topY + padding.vertical - offsetForRadius;
      return ArrowToolTip.content.style.left = leftX + padding.horizontal;
    };

    ArrowToolTip.prototype.show = function() {
      ArrowToolTip.__super__.show.apply(this, arguments);
      ArrowToolTip.container.style.display = "block";
      ArrowToolTip.container.style.opacity = 1;
      ArrowToolTip.content.style.display = "block";
      ArrowToolTip.content.textContent = this.text;
      ArrowToolTip._hidden_content.textContent = this.text;
      this.draw();
      return this._move_tooltip();
    };

    ArrowToolTip.prototype.hide = function() {
      ArrowToolTip.__super__.hide.apply(this, arguments);
      ArrowToolTip.container.style.display = 'none';
      return ArrowToolTip.container.style.opacity = 0;
    };

    ArrowToolTip.prototype.get_xy = function() {
      var offset, page_xy, x, y;
      page_xy = get_page_xy(this.buddy, 0, 0);
      offset = (this.buddy.clientWidth - ArrowToolTip.container.clientWidth) / 2;
      x = parseInt((page_xy.x + offset).toFixed());
      if (x < 0) {
        x = 0;
      }
      if (x + ArrowToolTip.container.clientWidth > screen.width) {
        x = screen.width - ArrowToolTip.container.clientWidth;
      }
      y = document.body.clientHeight - page_xy.y;
      return {
        x: x,
        y: y
      };
    };

    ArrowToolTip.move_to = function(self, x, y) {
      if (y <= 0) {
        self.hide();
        return;
      }
      ArrowToolTip.container.style.left = x + "px";
      return ArrowToolTip.container.style.bottom = y + "px";
    };

    ArrowToolTip.prototype._move_tooltip = function() {
      var pos;
      pos = this.get_xy();
      return ArrowToolTip.move_to(this, pos.x, pos.y);
    };

    return ArrowToolTip;

  })(ToolTipBase);

  Trie = (function() {
    function Trie() {
      this.words = 0;
      this.children = {};
    }

    Trie.prototype.insert = function(str, pos) {
      var child, k;
      if (pos == null) {
        pos = 0;
      }
      if (str.length === 0) {
        return;
      }
      if (pos === str.length) {
        this.words++;
        return;
      }
      k = str[pos];
      if (!this.children[k]) {
        this.children[k] = new Trie();
      }
      child = this.children[k];
      return child.insert(str, pos + 1);
    };

    Trie.prototype.getAllWords = function(str) {
      var child, i, key, ref, ret;
      ret = [];
      if (this.words > 0) {
        ret.push(str);
      }
      i = 0;
      ref = this.children;
      for (key in ref) {
        child = ref[key];
        if (child.getAllWords != null) {
          ret = ret.concat(child.getAllWords(str + key));
        }
      }
      return ret;
    };

    Trie.prototype.autoComplete = function(str, pos) {
      var child, k;
      if (pos == null) {
        pos = 0;
      }
      if (str.length === 0) {
        return [];
      }
      k = str[pos];
      child = this.children[k];
      if (!child) {
        return [];
      }
      if (pos === str.length - 1) {
        return child.getAllWords(str);
      }
      return child.autoComplete(str, pos + 1);
    };

    return Trie;

  })();

  __init_parted_finish = false;

  __os_prober_finish = false;

  DEBUG = DCore.Installer.is_debug();

  DCore.signal_connect("init_parted", function(msg) {
    console.log("[base.coffee] connected to `init_parted` dbus signal");
    __init_parted_finish = true;
    if (!is_match_install_require()) {
      return new MessageDialog(_("Installation Requirements"), _("To install Deepin OS, you need to have at least %d GB disk space.").replace("%d", (minimum_disk_size_required / GB).toFixed(0)), DCore.Installer.finish_install).show_at(document.body);
    }
  });

  DCore.signal_connect("os_prober", function(msg) {
    console.log("[base.coffee] connected to `os_proper` dbus signal");
    __os_prober_finish = true;
    if (__init_parted_finish) {
      return sync_part_os();
    }
  });

  _ppt_list = ["images/ppt.jpg"];

  _color_list = ["#f2415b", "#e86836", "#fcc100", "#e8dd0a", "#9fdd05", "#0dd10d", "#11c9c0", "#2796f2", "#1452Ed", "#6913e5", "#9b13ea", "#b300d8"];

  __fs_keys = ["unused", "ext4", "ext3", "reiserfs", "btrfs", "jfs", "xfs", "fat16", "fat32", "ntfs", "swap"];

  __fs_values = [_("Unused"), "ext4", "ext3", "reiserfs", "btrfs", "jfs", "xfs", "fat16", "fat32", "ntfs", "swap"];

  __fs_efi_keys = ["unused", "ext4", "ext3", "reiserfs", "btrfs", "jfs", "xfs", "fat16", "fat32", "ntfs", "swap", "efi"];

  __fs_efi_values = [_("Unused"), "ext4", "ext3", "reiserfs", "btrfs", "jfs", "xfs", "fat16", "fat32", "ntfs", "swap", "efi"];

  __mp_keys = ["unused", "/", "/boot", "/home", "/tmp", "/usr", "/var", "/srv", "/opt", "/usr/local"];

  __mp_values = [_("Unused"), "/", "/boot", "/home", "/tmp", "/usr", "/var", "/srv", "/opt", "/usr/local"];

  __current_page = null;

  pc = null;

  virtual_page = null;

  welcome_page = null;

  part_page = null;

  progress_page = null;

  finish_page = null;

  __in_model = false;

  __board = create_element("div", "Board", "");

  __board.setAttribute("id", "board");

  document.body.appendChild(__board);

  __current_dropdown = null;

  __drop_board = create_element("div", "DropBoard", "");

  __drop_board.setAttribute("id", "dropboard");

  document.body.appendChild(__drop_board);

  __drop_board.addEventListener("click", (function(_this) {
    return function(e) {
      return __current_dropdown != null ? __current_dropdown.hide() : void 0;
    };
  })(this));

  tabEnableElements = [];

  enable_tab = function(el) {
    if (el == null) {
      return;
    }
    if (!(indexOf.call(tabEnableElements, el) >= 0)) {
      tabEnableElements.push(el);
    }
    return el != null ? el.setAttribute("tabindex", "0") : void 0;
  };

  disable_tab = function(el) {
    var element, i, index, j, len1;
    if (el == null) {
      return;
    }
    if (indexOf.call(tabEnableElements, el) >= 0) {
      for (i = j = 0, len1 = tabEnableElements.length; j < len1; i = ++j) {
        element = tabEnableElements[i];
        if (element === el) {
          index = i;
        }
      }
      tabEnableElements.splice(index, 1);
    }
    return el != null ? el.setAttribute("tabindex", "-1") : void 0;
  };

  get_position = function(el) {
    var x, y;
    x = 0;
    y = 0;
    while (el != null) {
      x = x + el.offsetLeft;
      y = y + el.offsetTop;
      el = el.offsetParent;
    }
    return {
      "x": x,
      "y": y
    };
  };

  get_scroll_height = function(el) {
    var scroll;
    scroll = 0;
    while (el != null) {
      scroll += el.scrollTop;
      el = el.parentElement;
    }
    return scroll;
  };

  update_style_attr = function(style, name, value) {
    var array, found, item, j, len1, list;
    array = style.split(";");
    list = [];
    found = false;
    for (j = 0, len1 = array.length; j < len1; j++) {
      item = array[j];
      if (item.indexOf(name + ":") !== -1) {
        list.push(name + ":" + value);
        found = true;
      } else {
        list.push(item);
      }
    }
    if (!found) {
      list.push(name + ":" + value);
    }
    return list.join(";");
  };

  delete_style_attr = function(style, name) {
    var array, item, j, len1, list;
    array = style.split(";");
    list = [];
    for (j = 0, len1 = array.length; j < len1; j++) {
      item = array[j];
      if (item.indexOf(name + ":") === -1) {
        list.push(item);
      }
    }
    return list.join(";");
  };

  update_el_attr = function(el, name, value) {
    var origin, style;
    origin = el.getAttribute("style") || "";
    style = update_style_attr(origin, name, value);
    return el.setAttribute("style", style);
  };

  delete_el_attr = function(el, name) {
    var origin, style;
    origin = el.getAttribute("style") || "";
    style = delete_style_attr(origin, name);
    return el.setAttribute("style", style);
  };

  DropDownItem = (function(superClass) {
    extend(DropDownItem, superClass);

    function DropDownItem(id1, key1, value1, index1, dropdownlist) {
      var style;
      this.id = id1;
      this.key = key1;
      this.value = value1;
      this.index = index1;
      this.dropdownlist = dropdownlist;
      DropDownItem.__super__.constructor.apply(this, arguments);
      this.element.innerText = this.value;
      this.selected = false;
      style = "height:" + this.dropdownlist.dropdown.itemheight + "px;";
      style += "line-height:" + this.dropdownlist.dropdown.itemheight + "px;";
      this.element.setAttribute("style", style);
    }

    DropDownItem.prototype.do_mouseover = function(e) {
      return this.handle_hover();
    };

    DropDownItem.prototype.do_mouseout = function(e) {
      return this.handle_unhover();
    };

    DropDownItem.prototype.handle_hover = function() {
      var item, j, len1, ref, results;
      ref = this.dropdownlist.items;
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        item = ref[j];
        if (item.index === this.index) {
          item.element.setAttribute("class", "DropDownItemHover");
          results.push(this.dropdownlist.hovered_index = this.index);
        } else {
          results.push(item.handle_unhover());
        }
      }
      return results;
    };

    DropDownItem.prototype.handle_unhover = function() {
      this.element.setAttribute("class", "DropDownItem");
      if (this.dropdownlist.hovered_index === this.index) {
        return this.dropdownlist.hovered_index = -1;
      }
    };

    DropDownItem.prototype.do_click = function(e) {
      if (this.key !== this.dropdownlist.dropdown.selected) {
        if (this.dropdownlist.dropdown.on_change_cb != null) {
          if (this.dropdownlist.dropdown.on_change_cb(this.key) === false) {
            this.dropdownlist.hide();
            return;
          }
        }
      }
      this.dropdownlist.dropdown.set_selected(this.key);
      return this.dropdownlist.hide();
    };

    return DropDownItem;

  })(Widget);

  DropDownList = (function(superClass) {
    extend(DropDownList, superClass);

    function DropDownList(id1, dropdown) {
      this.id = id1;
      this.dropdown = dropdown;
      DropDownList.__super__.constructor.apply(this, arguments);
      this.fill_dropdown(this.dropdown.keys, this.dropdown.values);
      document.body.appendChild(this.element);
      this.element.setAttribute("tabindex", 100);
      this.hovered_index = -1;
      this.hide();
    }

    DropDownList.prototype.do_keydown = function(e) {
      if (e.which === 38) {
        if (this.hovered_index > 0) {
          this.hover_item(this.hovered_index - 1);
        }
      }
      if (e.which === 40) {
        if (this.hovered_index < this.length - 1) {
          return this.hover_item(this.hovered_index + 1);
        }
      }
    };

    DropDownList.prototype.hover_item = function(index) {
      return this.items[index].handle_hover();
    };

    DropDownList.prototype.fill_dropdown = function(keys, values) {
      var i, item, results;
      this.items = [];
      i = 0;
      this.length = keys.length;
      results = [];
      while (i < keys.length) {
        item = new DropDownItem("di_" + this.id.slice(3) + "_" + keys[i], keys[i], values[i], i, this);
        this.items.push(item);
        this.element.appendChild(item.element);
        results.push(i = i + 1);
      }
      return results;
    };

    DropDownList.prototype.show = function() {
      var bottomspace, height, left, pageheight, position, scroll_flag, scrollheight, style, top, topspace, totalheight, webheight, width;
      if (__current_dropdown != null) {
        __current_dropdown.hide();
        __current_dropdown = null;
      }
      __current_dropdown = this;
      __drop_board.style.display = "block";
      webheight = 540;
      totalheight = this.length * this.dropdown.itemheight;
      pageheight = document.body.clientHeight;
      position = get_position(this.dropdown.element);
      scrollheight = get_scroll_height(this.dropdown.element);
      topspace = position["y"] - scrollheight;
      bottomspace = webheight - topspace - this.dropdown.dropheight;
      scroll_flag = false;
      width = this.dropdown.dropwidth;
      height = totalheight;
      left = position["x"];
      if (bottomspace > totalheight + 5) {
        top = topspace + this.dropdown.dropheight;
      } else if (topspace > totalheight + 5) {
        top = topspace - totalheight - 5;
      } else if (webheight > totalheight + 5) {
        top = webheight - totalheight - 5;
      } else {
        height = webheight;
        top = 0;
      }
      style = "left:" + left + "px;";
      style += "top:" + top + "px;";
      style += "width:" + width + "px;";
      style += "height:" + height + "px;";
      if (scroll_flag) {
        style += "overflow-y:scroll;overflow-x:hidden;";
      }
      if (this.dropdown.listbackground != null) {
        style += "background:" + this.dropdown.listbackground;
      }
      style += "display:block;";
      this.element.setAttribute("style", style);
      this.element.focus();
      return this.hover_default();
    };

    DropDownList.prototype.hover_default = function() {
      var index;
      index = this.dropdown.keys.indexOf(this.dropdown.selected);
      if (!this.dropdown.listenable) {
        index = 0;
      }
      if (index !== -1) {
        return this.hover_item(index);
      }
    };

    DropDownList.prototype.hide = function() {
      this.element.style.display = "none";
      return __drop_board.style.display = "none";
    };

    DropDownList.prototype.clear = function() {
      this.element.innerHTML = "";
      return this.fill_dropdown(this.dropdown.keys, this.dropdown.values);
    };

    return DropDownList;

  })(Widget);

  DropDown = (function(superClass) {
    extend(DropDown, superClass);

    function DropDown(id1, editable, on_change_cb) {
      this.id = id1;
      this.editable = editable;
      this.on_change_cb = on_change_cb;
      DropDown.__super__.constructor.apply(this, arguments);
      this.init_dropdown_data();
      this.dropdown_list = null;
      this.selected = null;
      this.base = create_element("div", "DropDownBase", this.element);
      this.current = create_element("div", "DropDownCurrent", this.base);
      if (this.editable) {
        this.cur_input = create_element("input", "", this.current);
        this.cur_input.style.width = this.dropwidth - this.dropheight - 1 + "px";
        this.cur_input.style.height = this.dropheight + "px";
        this.cur_input.addEventListener("blur", (function(_this) {
          return function(e) {
            _this.set_selected(_this.cur_input.value);
            return _this.on_change_cb(_this.cur_input.value);
          };
        })(this));
      } else {
        this.current.addEventListener("click", (function(_this) {
          return function(e) {
            return _this.show_list();
          };
        })(this));
      }
      this.angle = create_element("div", "DropDownAngle", this.base);
      this.angle_img = create_element("div", "DropDownAngleImg", this.angle);
      this.angle.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.show_list();
        };
      })(this));
      this.hide_drop();
    }

    DropDown.prototype.init_dropdown_data = function() {
      this.dropwidth = 100;
      this.dropheight = 24;
      this.itemheight = 30;
      this.itemleft = 10;
      return this.listenable = true;
    };

    DropDown.prototype.set_drop_items = function(keys, values) {
      var i;
      assert(keys.length === values.length, "invalid dropdown items");
      this.keys = [];
      this.values = [];
      this.keys = keys;
      this.values = values;
      this.items = {};
      i = 0;
      while (i < this.keys.length) {
        this.items[this.keys[i]] = this.values[i];
        i = i + 1;
      }
      if (this.dropdown_list != null) {
        return this.dropdown_list.clear();
      }
    };

    DropDown.prototype.set_drop_size = function(width, height) {
      this.dropwidth = width;
      return this.dropheight = height;
    };

    DropDown.prototype.set_base_background = function(background) {
      return this.basebackground = background;
    };

    DropDown.prototype.show_drop = function() {
      var angle_img_style, angle_style, base_style;
      base_style = "width:" + this.dropwidth + "px;";
      base_style += "height:" + this.dropheight + "px;";
      base_style += "line-height:" + this.dropheight + "px;";
      if (this.basebackground != null) {
        base_style += "background:" + this.basebackground;
      }
      this.base.setAttribute("style", base_style);
      this.current.style.width = this.dropwidth - this.dropheight - 1 + "px";
      this.current.style.height = this.dropheight + "px";
      angle_style = "width:" + this.dropheight + "px;";
      angle_style += "height:" + this.dropheight + "px;";
      this.angle.setAttribute("style", angle_style);
      angle_img_style = "width:" + this.dropheight + "px;";
      angle_img_style += "height:" + this.dropheight + "px;";
      angle_img_style += "background-position:" + (this.dropheight - 12) / 2 + "px " + (this.dropheight - 12) / 2 + "px;";
      this.angle_img.setAttribute("style", angle_img_style);
      if (this.selected === null) {
        this.set_selected(this.keys[0]);
      }
      return this.element.style.display = "block";
    };

    DropDown.prototype.hide_drop = function() {
      return this.element.style.display = "none";
    };

    DropDown.prototype.show_list = function() {
      var keys, values;
      if (this.dropdown_list == null) {
        this.dropdown_list = new DropDownList("dl_" + this.id.slice(3), this);
      }
      if (!this.listenable) {
        this.dropdown_list.element.innerHTML = "";
        keys = [];
        values = [];
        keys.push(this.get_selected());
        values.push(this.get_selected());
        this.dropdown_list.fill_dropdown(keys, values);
        return;
      }
      return this.dropdown_list.show();
    };

    DropDown.prototype.set_current_txt = function(txt) {
      if (this.editable) {
        return this.cur_input.value = txt;
      } else {
        return this.current.innerText = txt;
      }
    };

    DropDown.prototype.set_selected = function(key) {
      this.selected = key;
      if (this.items[key] != null) {
        return this.set_current_txt(this.items[key]);
      } else {
        return this.set_current_txt(key);
      }
    };

    DropDown.prototype.get_selected = function() {
      return this.selected;
    };

    DropDown.prototype.set_list_enable = function(enable) {
      this.listenable = enable;
      if (this.editable) {
        if (enable) {
          return this.cur_input.removeAttribute("disabled");
        } else {
          return this.cur_input.setAttribute("disabled", "disabled");
        }
      }
    };

    DropDown.prototype.set_list_background = function(background) {
      return this.listbackground = background;
    };

    DropDown.prototype.set_item_height = function(itemheight) {
      return this.itemheight = itemheight;
    };

    DropDown.prototype.set_item_left = function(offset) {
      return this.itemleft = offset;
    };

    return DropDown;

  })(Widget);

  TimezoneToolTip = (function(superClass) {
    extend(TimezoneToolTip, superClass);

    function TimezoneToolTip(id1, text1) {
      this.id = id1;
      this.text = text1;
      TimezoneToolTip.__super__.constructor.apply(this, arguments);
      this.element.style.pointerEvents = "none";
      this.canvas = create_element("canvas", "Canvas", this.element);
      this.content = create_element("div", "Content", this.element);
      this.content.innerText = this.text;
      this.arrowwidth = 14;
      this.arrowheight = 8;
      this.xpadding = 5;
      this.ypadding = 0;
      this.radius = 4;
      this.offshadow = 5;
      this.offradius = 2;
    }

    TimezoneToolTip.prototype.draw = function() {
      var ctx, grd;
      this.height = this.content.clientHeight - 2 * this.offradius;
      this.canvas.width = this.content.clientWidth + 2 * (this.xpadding + this.radius + this.offshadow);
      this.canvas.height = this.height + 2 * (this.ypadding + this.radius + this.offshadow) + this.arrowheight;
      this.ytop = this.offshadow + this.radius;
      this.ybottom = this.ytop + this.height + 2 * this.ypadding;
      this.xleft = this.offshadow + this.radius;
      this.xright = this.xleft + 2 * this.xpadding + this.content.clientWidth;
      this.content.style.top = this.offshadow + this.ypadding + this.radius - this.offradius;
      this.content.style.left = this.offshadow + this.xpadding + this.radius;
      ctx = this.canvas.getContext("2d");
      ctx.save();
      ctx.beginPath();
      ctx.moveTo(this.offshadow, this.ytop);
      ctx.arc(this.xleft, this.ytop, this.radius, Math.PI, Math.PI * 1.5);
      ctx.lineTo(this.xright, this.offshadow);
      ctx.arc(this.xright, this.ytop, this.radius, Math.PI * 1.5, Math.PI * 2);
      ctx.lineTo(this.xright + this.radius, this.ybottom);
      ctx.arc(this.xright, this.ybottom, this.radius, 0, Math.PI * 0.5);
      ctx.lineTo(this.xleft + this.xpadding + (this.content.clientWidth + this.arrowwidth) / 2, this.ybottom + this.radius);
      ctx.lineTo(this.xleft + this.xpadding + this.content.clientWidth / 2, this.ybottom + this.radius + this.arrowheight);
      ctx.lineTo(this.xleft + this.xpadding + (this.content.clientWidth - this.arrowwidth) / 2, this.ybottom + this.radius);
      ctx.lineTo(this.xleft, this.ybottom + this.radius);
      ctx.arc(this.xleft, this.ybottom, this.radius, Math.PI * 0.5, Math.PI);
      ctx.closePath();
      ctx.shadowBlur = 7;
      ctx.shadowColor = "rgba(0,0,0,0.5)";
      ctx.shadowOffsetY = 1;
      ctx.strokeStyle = "rgba(255,255,255,0.7)";
      ctx.lineWidth = 1;
      ctx.stroke();
      grd = ctx.createLinearGradient(0, 0, 0, this.height + 2 * (this.ypadding + this.radius) + this.arrowheight);
      grd.addColorStop(0, "rgba(0,0,0,0.7)");
      grd.addColorStop(1, "rgba(0,0,0,0.9)");
      ctx.fillStyle = grd;
      ctx.fill();
      return ctx.restore();
    };

    return TimezoneToolTip;

  })(Widget);

  Page = (function(superClass) {
    extend(Page, superClass);

    function Page(id1) {
      this.id = id1;
      Page.__super__.constructor.apply(this, arguments);
      this.title = create_element("div", "Title", this.element);
      this.titleprogress = create_element("div", "TitleProgress", this.title);
      this.close = create_element("div", "Close", this.title);
      enable_tab(this.close);
      this.close.addEventListener("click", (function(_this) {
        return function(e) {
          if (pc.without_wm || pc.is_virtual_machine) {
            return new ExitDialog(function() {
              DCore.Installer.finish_install();
              return DCore.Installer.spawn_command_sync("/sbin/poweroff", false);
            }).show_at(document.body);
          } else {
            return _this.exit_installer();
          }
        };
      })(this));
    }

    Page.prototype.exit_installer = function() {
      return DCore.Installer.finish_install();
    };

    return Page;

  })(Widget);

  NextStep = (function(superClass) {
    extend(NextStep, superClass);

    function NextStep(id1, next_text, next_cb) {
      this.id = id1;
      this.next_text = next_text;
      this.next_cb = next_cb;
      this.next_bt_press = bind(this.next_bt_press, this);
      this.next_bt_enable = bind(this.next_bt_enable, this);
      this.next_bt_disable = bind(this.next_bt_disable, this);
      NextStep.__super__.constructor.apply(this, arguments);
      this.next_enable = false;
      enable_tab(this.element);
      this.next_input = create_element("input", "InputBtn", this.element);
      disable_tab(this.next_input);
      this.next_input.setAttribute("type", "submit");
      this.next_input.value = this.next_text;
      this.element.addEventListener("mouseout", (function(_this) {
        return function(e) {
          e.stopPropagation();
          if (!_this.next_enable) {
            return;
          }
          return _this.next_bt_enable();
        };
      })(this));
      this.element.addEventListener("click", (function(_this) {
        return function(e) {
          e.stopPropagation();
          if (!_this.next_enable) {
            return;
          }
          _this.next_bt_press();
          return typeof _this.next_cb === "function" ? _this.next_cb() : void 0;
        };
      })(this));
    }

    NextStep.prototype.set_text = function(text) {
      return this.next_input.value = text;
    };

    NextStep.prototype.set_pos = function(type, left, bottom) {
      this.element.style.position = type;
      this.element.style.left = left;
      return this.element.style.bottom = bottom;
    };

    NextStep.prototype.next_bt_disable = function() {
      this.next_enable = false;
      this.element.setAttribute("style", "pointer-events:none");
      return this.next_input.setAttribute("style", "background:-webkit-gradient(linear, left top, left bottom, from(rgba(240,242,82,0.5)), to(rgba(217,181,24,0.5)));color:rgba(0,0,0,0.3);cursor:default;");
    };

    NextStep.prototype.next_bt_enable = function() {
      this.next_enable = true;
      this.element.setAttribute("style", "color:#00bdff;pointer-events:auto");
      return this.next_input.setAttribute("style", "background:-webkit-gradient(linear, left top, left bottom, from(rgba(240,242,82,1)), to(rgba(217,181,24,1)));color:rgba(0,0,0,1);cursor:pointer;");
    };

    NextStep.prototype.next_bt_press = function() {
      this.element.setAttribute("style", "color:#00bdff;pointer-events:auto");
      return this.next_input.setAttribute("style", "background:-webkit-gradient(linear, left top, left bottom, from(#D69004), to(#E8C243));color:rgba(0,0,0,1);cursor:pointer;");
    };

    return NextStep;

  })(Widget);

  PageContainer = (function(superClass) {
    extend(PageContainer, superClass);

    function PageContainer(id1) {
      var tabElementPrev;
      this.id = id1;
      PageContainer.__super__.constructor.apply(this, arguments);
      this.current_page = null;
      this.without_wm = false;
      this.auto_mode = false;
      tabElementPrev = null;
      document.addEventListener('keyup', (function(_this) {
        return function(e) {
          var code, el;
          code = e.keyCode;
          el = document.activeElement;
          if (code === KEYCODE.TAB) {
            console.debug("[base.coffee] PageContainer.constructor() `tab` keyup event:", e, ", element:", el);
            if (el != null) {
              el.focus();
            }
          } else if (code === KEYCODE.ENTER) {
            console.debug("[base.coffee] PageContainer.constructor() `enter` keyup event:", e, ", element:", el);
            if (tabElementPrev === null || tabElementPrev === el) {
              if (el != null) {
                el.click();
              }
            }
          }
          return tabElementPrev = el;
        };
      })(this), true);
    }

    PageContainer.prototype.switch_page = function(page) {
      if (this.current_page != null) {
        this.element.removeChild(this.current_page.element);
      }
      this.current_page = page;
      return this.element.appendChild(this.current_page.element);
    };

    PageContainer.prototype.hide_close_button = function() {
      return this.current_page.close.style.display = "none";
    };

    return PageContainer;

  })(Widget);

  timezone_json = '{"Africa\/Abidjan":{"offset":0,"pin":[342,174],"country":"CI","polys":[[338,175,335,176,336,173,333,172,334,169,335,169,334,168,335,168,334,164,338,163,338,164,340,164,341,165,344,165,345,168,344,171,345,174,338,175]],"rects":[]},"Africa\/Accra":{"offset":0,"pin":[350,174],"country":"GH","polys":[[351,173,346,175,344,175,345,174,344,171,345,168,344,162,350,162,351,168,351,171,352,172,351,173]],"rects":[]},"Africa\/Addis_Ababa":{"offset":3,"pin":[425,166],"country":"ET","polys":[[438,175,435,175,431,177,429,176,427,178,420,176,418,172,414,169,415,168,416,167,417,163,418,163,419,159,420,159,421,156,423,156,424,154,425,155,429,156,432,159,431,162,434,162,433,163,435,166,443,169,438,175]],"rects":[]},"Africa\/Algiers":{"offset":1,"pin":[356,109],"country":"DZ","polys":[[368,123,369,128,369,130,368,131,370,134,373,135,373,137,361,145,357,146,356,144,353,143,350,140,333,129,333,126,334,125,340,123,341,122,343,121,343,120,344,120,344,119,348,119,348,118,347,117,347,114,346,113,356,109,367,109,366,110,366,114,365,116,368,119,368,123]],"rects":[]},"Africa\/Asmara":{"offset":3,"pin":[426,153],"country":"ER","polys":[[429,154,434,159,432,159,428,155,425,155,424,154,423,156,421,156,422,150,425,148,427,154,428,153,429,154]],"rects":[]},"Africa\/Bamako":{"offset":0,"pin":[334,159],"country":"ML","polys":[[341,159,341,160,339,161,339,164,338,164,338,163,336,164,335,163,334,164,334,162,333,162,334,162,332,159,329,161,328,160,328,158,326,155,328,153,329,154,332,153,339,153,337,134,341,134,352,142,353,143,356,144,356,146,358,146,358,150,357,153,349,154,344,156,343,158,342,157,341,159]],"rects":[]},"Africa\/Bangui":{"offset":1,"pin":[386,176],"country":"CF","polys":[[398,175,396,176,395,175,393,177,388,174,386,176,386,178,382,178,381,180,379,176,378,173,380,170,386,168,387,167,390,166,392,163,394,162,396,165,396,167,397,167,397,168,399,169,403,175,400,174,399,175,398,175]],"rects":[]},"Africa\/Banjul":{"offset":0,"pin":[318,157],"country":"GM","polys":[[323,157,317,158,321,157,323,157]],"rects":[]},"Africa\/Bissau":{"offset":0,"pin":[320,161],"country":"GW","polys":[[319,161,319,161,319,161]],"rects":[]},"Africa\/Blantyre":{"offset":2,"pin":[418,217],"country":"MW","polys":[[418,213,420,216,419,220,417,218,417,215,415,215,414,213,415,210,415,207,416,207,414,204,417,206,418,209,417,210,418,213]],"rects":[]},"Africa\/Brazzaville":{"offset":1,"pin":[380,194],"country":"CG","polys":[[372,193,373,192,373,190,374,190,375,189,377,190,378,189,378,186,377,185,378,183,377,182,376,182,376,181,381,182,382,178,386,178,384,186,382,189,381,193,379,195,378,194,376,195,375,194,373,195,372,193]],"rects":[]},"Africa\/Bujumbura":{"offset":2,"pin":[407,192],"country":"BI","polys":[[409,193,407,194,406,190,408,191,408,190,409,190,410,192,409,193]],"rects":[]},"Asia\/Oral":{"offset":5,"pin":[450,80],"country":"KZ","polys":[[442,81,444,83,445,82,444,81,446,80,449,79,452,79,456,80,456,82,452,85,450,85,446,86,440,85,442,81]],"rects":[]},"Africa\/Cairo":{"offset":2,"pin":[411,123],"country":"EG","polys":[[411,140,399,140,398,123,399,120,407,122,410,120,412,120,412,121,417,121,418,124,417,128,415,126,413,123,413,124,420,136,419,136,419,137,416,140,411,140]],"rects":[]},"Africa\/Casablanca":{"offset":0,"pin":[335,116],"country":"MA","polys":[[339,124,336,124,333,126,333,128,324,128,330,125,331,123,331,120,332,118,337,115,338,111,340,111,341,113,344,112,347,114,348,119,344,119,344,120,343,120,343,121,341,122,339,124]],"rects":[]},"Africa\/Ceuta":{"offset":1,"pin":[340,111],"country":"ES","polys":[[340,111,340,111,340,111]],"rects":[]},"Africa\/Conakry":{"offset":0,"pin":[323,165],"country":"GN","polys":[[333,169,332,170,331,167,329,168,330,167,328,164,326,165,324,166,323,165,321,163,321,162,323,161,323,159,328,159,329,161,332,159,334,162,333,162,334,162,335,164,334,165,335,168,334,168,334,169,333,169]],"rects":[]},"Africa\/Dakar":{"offset":0,"pin":[316,155],"country":"SN","polys":[[317,158,321,157,323,158,321,157,318,157,316,155,318,151,322,151,326,155,328,159,320,159,317,160,318,159,317,159,317,158]],"rects":[]},"Africa\/Dar_es_Salaam":{"offset":3,"pin":[426,199],"country":"TZ","polys":[[428,206,429,206,428,207,423,209,418,209,416,205,410,203,408,198,407,195,410,192,409,191,410,189,409,187,416,187,423,191,423,192,426,195,425,198,427,199,426,202,428,206]],"rects":[]},"Asia\/Yekaterinburg":{"offset":6,"pin":[468,68],"country":"RU","polys":[[467,78,470,79,469,81,466,81,463,80,461,80,458,81,456,80,456,81,454,79,449,79,451,76,451,73,454,74,454,72,453,72,455,71,454,70,456,69,455,68,456,68,454,65,455,64,453,63,454,62,452,61,451,60,457,60,460,59,465,58,466,52,479,46,478,46,479,45,477,45,478,44,475,43,479,43,479,43,477,43,483,45,484,44,483,42,480,42,481,41,481,40,480,39,483,37,485,35,492,36,490,38,492,39,491,41,491,43,493,44,490,48,484,48,485,48,490,49,495,46,495,44,498,43,500,44,500,46,501,47,506,47,501,46,502,45,501,43,494,43,493,42,494,40,492,38,496,37,496,35,497,36,496,38,497,39,502,39,498,37,502,37,500,37,502,36,506,37,504,38,507,39,507,40,504,42,510,43,511,44,509,45,510,46,510,47,512,48,512,50,514,50,514,52,517,52,517,53,515,54,516,55,514,57,517,58,517,59,510,61,500,60,499,63,494,66,489,66,488,65,487,67,489,68,488,69,487,72,484,71,477,73,469,74,468,75,471,76,469,76,468,77,469,77,467,78]],"rects":[]},"Africa\/Djibouti":{"offset":3,"pin":[434,161],"country":"DJ","polys":[[434,161,434,161,434,161]],"rects":[]},"Africa\/Douala":{"offset":1,"pin":[369,177],"country":"CM","polys":[[378,173,379,176,381,179,381,182,378,180,369,180,369,177,368,177,367,176,367,173,369,171,371,170,372,172,373,170,377,162,378,161,377,158,379,159,379,163,380,164,377,165,380,169,378,173]],"rects":[]},"Africa\/Freetown":{"offset":0,"pin":[324,168],"country":"SL","polys":[[328,170,327,171,324,168,324,166,326,165,328,164,329,166,329,168,330,168,328,170]],"rects":[]},"Africa\/Gaborone":{"offset":2,"pin":[400,236],"country":"BW","polys":[[402,234,399,238,395,237,393,240,390,240,390,238,389,236,389,230,391,230,391,223,395,222,396,223,399,222,401,225,404,227,404,229,407,231,402,234]],"rects":[]},"Africa\/Harare":{"offset":2,"pin":[410,222],"country":"ZW","polys":[[410,231,404,229,404,227,401,225,399,222,403,222,407,217,414,219,414,224,414,226,413,229,410,231]],"rects":[]},"Africa\/El_Aaiun":{"offset":0,"pin":[324,129],"country":"EH","polys":[[327,132,327,137,325,138,325,141,317,141,317,142,317,140,319,136,319,136,321,134,322,131,324,130,324,128,333,128,333,132,327,132]],"rects":[]},"Africa\/Johannesburg":{"offset":2,"pin":[404,239],"country":"ZA","polys":[[396,255,389,257,387,255,386,256,385,252,386,252,386,251,382,244,383,243,384,244,385,244,389,243,389,236,390,238,390,240,392,240,395,237,399,238,403,234,406,231,411,231,412,235,412,238,411,238,410,240,411,241,412,241,412,240,414,240,413,244,404,253,400,255,396,255]],"rects":[]},"Africa\/Juba":{"offset":3,"pin":[411,175],"country":"SS","polys":[[418,173,419,174,420,174,420,175,417,176,415,177,410,178,408,175,405,176,404,176,401,171,397,167,399,164,400,164,402,166,406,166,408,164,411,165,413,162,412,160,415,160,414,163,416,164,416,167,415,168,414,169,416,170,418,173]],"rects":[]},"Africa\/Kampala":{"offset":3,"pin":[413,184],"country":"UG","polys":[[411,187,408,188,408,183,411,181,410,180,410,178,415,177,416,176,418,181,416,185,416,187,411,187]],"rects":[]},"Africa\/Khartoum":{"offset":3,"pin":[413,153],"country":"SD","polys":[[419,159,418,163,417,163,416,166,414,163,415,160,414,160,412,160,413,162,411,165,408,164,406,166,402,166,400,164,399,164,398,167,396,167,396,165,394,163,394,159,392,159,395,153,397,153,397,144,399,144,399,140,411,139,416,140,419,137,421,139,423,142,423,146,425,148,422,150,421,157,420,159,419,159]],"rects":[]},"Africa\/Kinshasa":{"offset":1,"pin":[380,194],"country":"CD","polys":[[379,194,381,193,382,189,384,186,386,176,387,175,388,174,390,176,396,177,394,178,396,180,394,181,393,182,396,185,395,186,396,186,395,187,397,189,394,189,393,189,393,190,391,190,390,194,389,194,389,199,388,199,388,201,384,202,382,197,374,197,375,194,376,195,378,194,378,195,379,194]],"rects":[]},"Africa\/Lagos":{"offset":1,"pin":[357,172],"country":"NG","polys":[[365,176,362,176,359,172,355,172,355,166,357,163,357,162,358,157,361,156,363,158,365,158,369,159,371,158,374,158,377,157,379,160,378,161,377,162,373,170,372,172,370,171,367,173,367,175,365,176]],"rects":[]},"Africa\/Libreville":{"offset":1,"pin":[368,184],"country":"GA","polys":[[377,185,378,186,377,190,374,189,374,190,373,190,373,192,372,193,369,190,367,186,368,186,368,184,369,185,368,184,369,183,372,183,372,180,376,180,376,182,378,182,378,183,377,185]],"rects":[]},"Africa\/Lome":{"offset":0,"pin":[352,172],"country":"TG","polys":[[353,172,351,171,351,168,350,162,352,162,352,164,353,164,354,172,353,172]],"rects":[]},"Africa\/Kigali":{"offset":2,"pin":[408,189],"country":"RW","polys":[[408,190,408,191,406,190,407,188,409,187,410,190,408,190]],"rects":[]},"Africa\/Luanda":{"offset":1,"pin":[376,203],"country":"AO","polys":[[393,207,393,208,397,208,397,212,393,212,393,218,396,221,390,222,386,221,377,221,376,220,373,220,374,213,377,210,377,208,375,204,376,202,374,197,382,197,384,202,388,201,388,199,392,200,392,204,393,207]],"rects":[]},"Africa\/Lubumbashi":{"offset":2,"pin":[403,209],"country":"CD","polys":[[407,195,408,198,410,202,406,202,405,204,406,205,405,209,406,210,408,210,408,213,406,213,403,209,402,210,401,210,399,208,398,209,397,207,393,208,392,200,389,199,388,198,389,197,389,194,390,194,391,190,393,190,393,189,394,189,397,189,395,187,396,186,395,186,396,185,393,182,394,181,396,180,394,178,396,177,394,176,395,175,399,175,400,174,403,174,405,176,408,175,410,178,410,180,411,181,408,183,408,188,406,190,407,195]],"rects":[]},"Africa\/Lusaka":{"offset":2,"pin":[405,217],"country":"ZM","polys":[[406,218,406,219,402,222,398,221,396,221,393,218,393,212,397,212,397,207,398,209,399,208,401,210,402,210,403,209,406,213,408,213,408,210,407,210,405,209,406,205,405,204,406,202,410,202,414,204,416,207,415,207,415,210,414,213,415,214,409,216,409,217,406,218]],"rects":[]},"Africa\/Malabo":{"offset":1,"pin":[367,177],"country":"GQ","polys":[[372,181,372,183,368,183,369,180,372,181,372,181]],"rects":[]},"Africa\/Maputo":{"offset":2,"pin":[413,238],"country":"MZ","polys":[[414,237,413,238,414,239,414,239,414,240,412,240,412,235,411,231,413,229,414,226,414,224,414,219,409,218,409,216,415,214,415,215,417,215,417,216,417,218,419,220,420,216,417,212,417,209,423,209,429,207,429,216,427,219,424,220,421,224,417,225,417,227,419,231,419,235,414,237]],"rects":[]},"Africa\/Mbabane":{"offset":2,"pin":[410,239],"country":"SZ","polys":[[412,238,412,240,411,241,410,240,411,238,412,238]],"rects":[]},"Africa\/Mogadishu":{"offset":3,"pin":[438,181],"country":"SO","polys":[[433,185,431,188,430,187,430,179,432,176,437,175,443,169,436,167,433,163,434,161,437,164,450,161,449,164,450,164,449,164,449,166,443,176,433,185]],"rects":[]},"Africa\/Monrovia":{"offset":0,"pin":[329,172],"country":"LR","polys":[[335,175,335,176,334,175,328,171,330,168,332,168,332,170,333,170,333,169,334,171,333,172,336,173,335,175]],"rects":[]},"Africa\/Nairobi":{"offset":3,"pin":[422,188],"country":"KE","polys":[[431,188,428,191,426,195,423,192,423,191,416,187,416,185,418,181,416,176,417,176,420,175,427,178,429,176,431,177,430,179,430,187,431,188]],"rects":[]},"Africa\/Maseru":{"offset":2,"pin":[403,246],"country":"LS","polys":[[405,247,404,248,403,246,406,244,407,245,405,247]],"rects":[]},"Africa\/Ndjamena":{"offset":1,"pin":[379,160],"country":"TD","polys":[[389,166,387,167,386,168,381,170,377,165,378,164,380,164,379,163,379,159,377,158,376,155,380,150,381,143,380,141,379,138,381,137,397,145,397,153,395,153,392,159,394,159,395,162,392,163,390,166,389,166]],"rects":[]},"Africa\/Niamey":{"offset":1,"pin":[354,157],"country":"NE","polys":[[359,157,357,159,357,161,355,159,355,161,354,159,352,158,352,158,351,156,350,154,357,153,358,150,358,146,361,145,373,137,378,138,379,138,380,141,381,143,380,150,376,155,377,157,374,158,371,158,369,159,365,158,363,158,361,156,359,157]],"rects":[]},"Africa\/Nouakchott":{"offset":0,"pin":[319,148],"country":"MR","polys":[[327,153,327,155,322,151,318,151,318,152,319,148,318,145,319,143,317,141,317,142,325,141,325,138,327,137,327,132,333,132,333,129,341,134,337,134,339,153,332,153,329,154,327,153]],"rects":[]},"Africa\/Ouagadougou":{"offset":0,"pin":[347,160],"country":"BF","polys":[[349,162,344,162,345,166,344,165,341,165,339,164,339,161,341,160,342,157,343,158,345,156,350,154,350,154,351,156,352,158,352,158,354,159,355,161,352,162,349,162]],"rects":[]},"Africa\/Porto-Novo":{"offset":1,"pin":[355,172],"country":"BJ","polys":[[355,169,355,172,353,172,353,166,352,164,352,162,354,162,355,159,357,161,357,163,355,166,355,169]],"rects":[]},"Africa\/Tunis":{"offset":1,"pin":[370,109],"country":"TN","polys":[[372,119,370,120,370,122,369,123,368,119,365,117,365,115,366,113,366,110,368,108,370,109,370,110,372,109,370,111,372,113,369,115,372,117,372,119]],"rects":[]},"Africa\/Sao_Tome":{"offset":0,"pin":[363,184],"country":"ST","polys":[[364,182,364,182,364,182]],"rects":[]},"Africa\/Tripoli":{"offset":2,"pin":[376,117],"country":"LY","polys":[[399,130,399,144,397,144,397,145,381,137,378,138,370,134,368,131,369,130,369,128,368,123,370,122,370,120,372,118,372,117,380,118,381,120,387,123,389,122,389,119,393,117,395,119,399,119,398,123,399,130]],"rects":[]},"Africa\/Windhoek":{"offset":2,"pin":[383,231],"country":"NA","polys":[[389,241,389,243,387,245,384,244,383,243,382,244,381,243,379,239,378,231,373,223,373,220,376,220,377,221,386,221,390,222,397,221,399,222,396,223,395,222,391,223,391,230,389,230,389,241]],"rects":[]},"America\/Adak":{"offset":-10,"pin":[6,78],"country":"US","polys":[[10,78,9,78,12,77,10,78]],"rects":[]},"America\/Argentina\/Salta":{"offset":-3,"pin":[223,236],"country":"AR","polys":[[227,266,227,269,228,269,224,269,223,271,210,271,211,266,212,264,212,261,213,259,214,261,217,262,217,259,223,259,223,257,227,257,227,266],[223,230,225,232,226,230,228,230,229,231,229,235,227,238,221,239,220,238,221,237,217,237,217,235,219,234,221,235,221,233,223,235,225,235,225,233,224,233,223,230]],"rects":[]},"America\/Anchorage":{"offset":-9,"pin":[59,59],"country":"US","polys":[[59,62,56,63,55,63,57,62,55,62,56,60,60,60,58,59,59,59,55,60,50,63,52,64,50,66,42,69,42,70,35,71,35,70,38,70,38,69,44,67,44,65,45,64,42,65,42,64,41,65,38,64,35,64,35,55,37,54,36,53,37,52,35,52,35,49,37,49,35,49,35,48,36,48,35,47,35,40,46,38,48,39,47,40,48,39,54,39,54,40,53,40,54,40,72,41,76,42,76,62,75,61,70,62,65,60,66,59,62,60,63,59,61,60,62,61,61,61,62,61,59,62]],"rects":[]},"America\/Anguilla":{"offset":-4,"pin":[227,148],"country":"AI","polys":[[227,147,227,147,227,147]],"rects":[]},"America\/Antigua":{"offset":-4,"pin":[230,150],"country":"AG","polys":[[230,150,230,150,230,150]],"rects":[]},"America\/Araguaina":{"offset":-3,"pin":[256,200],"country":"BR","polys":[[259,202,260,202,258,204,261,206,259,208,260,209,260,211,257,212,255,212,255,211,254,212,252,211,252,211,252,211,252,207,254,202,254,199,256,198,256,197,256,196,258,196,257,200,259,202]],"rects":[]},"America\/Argentina\/Buenos_Aires":{"offset":-3,"pin":[236,256],"country":"AR","polys":[[233,254,236,255,236,256,239,258,238,259,240,261,237,264,231,265,229,265,229,266,229,266,228,268,229,269,228,269,227,269,227,256,230,256,232,254,233,254]],"rects":[]},"America\/Argentina\/Catamarca":{"offset":-3,"pin":[222,244],"country":"AR","polys":[[222,278,220,278,219,280,211,280,211,278,210,277,212,277,210,276,211,275,210,272,223,271,225,272,226,272,226,273,224,273,225,273,223,275,222,278],[223,247,221,243,216,242,217,240,217,237,221,237,220,238,222,240,221,241,223,243,223,242,223,247]],"rects":[]},"America\/Argentina\/Cordoba":{"offset":-3,"pin":[225,250],"country":"AR","polys":[[228,256,227,256,227,257,223,257,224,251,222,251,222,249,224,246,223,242,225,238,227,238,229,235,229,231,231,234,238,237,236,241,242,241,243,240,244,238,245,238,245,241,242,243,237,248,236,255,233,253,230,256,228,256]],"rects":[]},"America\/Argentina\/Jujuy":{"offset":-3,"pin":[223,235],"country":"AR","polys":[[219,232,221,230,223,230,223,232,224,233,225,233,225,235,224,236,223,235,221,233,221,235,220,234,219,232]],"rects":[]},"America\/Argentina\/La_Rioja":{"offset":-3,"pin":[220,246],"country":"AR","polys":[[218,247,216,246,216,244,215,243,216,242,221,243,223,247,222,251,220,251,218,247]],"rects":[]},"America\/Argentina\/Mendoza":{"offset":-3,"pin":[216,253],"country":"AR","polys":[[213,251,218,251,219,252,220,259,217,259,217,262,214,261,213,260,213,257,214,254,213,251]],"rects":[]},"America\/Argentina\/Rio_Gallegos":{"offset":-3,"pin":[215,291],"country":"AR","polys":[[211,280,219,280,220,282,222,282,222,284,216,289,215,291,217,293,210,292,209,291,209,289,208,289,207,288,207,286,209,284,209,283,210,282,211,280]],"rects":[]},"America\/Argentina\/San_Juan":{"offset":-3,"pin":[217,250],"country":"AR","polys":[[214,247,215,243,216,244,216,246,219,247,220,251,219,250,219,252,215,251,213,251,213,249,214,247]],"rects":[]},"America\/Argentina\/San_Luis":{"offset":-3,"pin":[221,253],"country":"AR","polys":[[222,251,224,252,223,259,220,259,219,251,222,251]],"rects":[]},"America\/Argentina\/Tucuman":{"offset":-3,"pin":[223,240],"country":"AR","polys":[[221,239,225,239,223,242,223,243,221,241,222,240,221,239]],"rects":[]},"America\/Aruba":{"offset":-4,"pin":[214,159],"country":"AW","polys":[[214,159,214,159,214,159]],"rects":[]},"America\/Argentina\/Ushuaia":{"offset":-3,"pin":[217,298],"country":"AR","polys":[[217,298,217,293,217,294,217,294,219,296,223,297,221,298,217,298]],"rects":[]},"America\/Asuncion":{"offset":-3,"pin":[238,237],"country":"PY","polys":[[244,239,242,241,236,241,238,237,231,234,228,231,230,225,233,225,237,226,237,230,241,231,242,234,244,234,244,239]],"rects":[]},"America\/Bahia_Banderas":{"offset":-6,"pin":[145,142],"country":"MX","polys":[[145,142,145,142,145,142]],"rects":[]},"America\/Atikokan":{"offset":-5,"pin":[172,85],"country":"CA","polys":[[175,86,171,85,172,84,173,84,173,85,175,86]],"rects":[]},"America\/Bahia":{"offset":-2,"pin":[275,212],"country":"BR","polys":[[261,216,260,216,260,209,259,208,260,207,261,206,263,207,265,206,265,204,267,205,270,203,271,205,273,203,276,203,277,206,276,207,277,209,274,212,274,218,273,223,271,221,272,218,272,218,270,217,269,216,265,215,264,214,261,216]],"rects":[]},"America\/Barbados":{"offset":-4,"pin":[234,158],"country":"BB","polys":[[234,158,234,158,234,158]],"rects":[]},"America\/Belem":{"offset":-3,"pin":[256,188],"country":"BR","polys":[[250,186,251,185,251,186,252,185,256,186,255,188,252,189,254,189,254,189,256,188,257,186,260,187,258,193,255,196,256,197,254,199,254,202,252,205,248,205,249,204,247,201,249,199,247,195,248,193,249,192,248,188,249,187,248,187,246,182,243,181,244,180,247,180,250,176,251,181,253,182,250,186]],"rects":[]},"America\/Belize":{"offset":-6,"pin":[179,149],"country":"BZ","polys":[[179,149,179,150,179,149]],"rects":[]},"America\/Blanc-Sablon":{"offset":-4,"pin":[239,79],"country":"CA","polys":[[236,79,234,81,236,79]],"rects":[]},"America\/Boa_Vista":{"offset":-4,"pin":[232,179],"country":"BR","polys":[[233,175,233,176,234,177,233,179,234,181,235,182,236,185,233,185,233,186,231,186,230,188,228,187,228,181,225,180,224,176,228,178,229,176,231,176,232,174,233,175]],"rects":[]},"America\/Bogota":{"offset":-5,"pin":[206,176],"country":"CO","polys":[[215,187,214,194,213,193,214,191,213,190,211,189,208,190,205,185,199,184,196,182,200,177,199,176,200,173,199,170,200,169,200,167,201,169,200,167,203,166,204,163,208,162,211,159,212,160,209,162,207,166,209,168,209,170,210,171,214,171,215,172,219,173,218,176,219,178,218,179,219,180,220,182,219,181,214,181,214,183,216,183,214,184,215,187]],"rects":[]},"America\/Boise":{"offset":-7,"pin":[124,95],"country":"US","polys":[[134,98,134,99,122,99,122,98,120,98,120,94,122,94,124,91,123,90,124,92,128,91,131,94,134,94,134,98]],"rects":[]},"America\/Cambridge_Bay":{"offset":-7,"pin":[146,43],"country":"CA","polys":[[138,27,140,28,139,29,141,29,140,29,143,29,145,29,144,31,136,31,136,30,138,30,136,29,138,29,136,28,138,27],[152,53,135,52,133,50,129,50,113,44,113,42,125,43,129,44,125,45,126,46,136,45,140,47,139,47,142,49,140,48,142,48,141,47,142,47,140,46,145,44,138,45,139,44,144,43,148,45,149,45,153,46,159,46,158,44,161,44,163,45,162,45,164,45,162,46,165,47,164,45,169,44,168,44,168,43,166,44,168,42,162,41,164,40,162,39,162,38,166,37,165,37,168,37,169,38,169,39,172,41,171,41,170,41,171,41,169,42,174,42,172,42,174,43,174,45,175,45,177,43,177,47,152,47,152,53],[161,36,163,36,162,37,162,37,159,37,159,38,158,38,150,35,156,35,155,35,161,36],[140,34,145,35,147,38,147,39,154,41,154,42,149,42,150,42,149,43,151,42,152,43,150,44,146,43,146,43,143,42,138,44,130,44,129,44,130,43,123,42,122,41,136,41,136,35,139,36,140,38,141,37,140,35,140,34]],"rects":[]},"America\/Campo_Grande":{"offset":-3,"pin":[244,227],"country":"BR","polys":[[247,222,247,223,251,225,251,227,245,234,242,234,241,231,237,230,238,221,241,220,243,221,246,220,245,222,247,222]],"rects":[]},"America\/Cancun":{"offset":-6,"pin":[181,142],"country":"MX","polys":[[180,141,181,142,179,145,180,145,179,148,179,146,177,148,176,148,176,145,179,143,180,141]],"rects":[]},"America\/Caracas":{"offset":-4.5,"pin":[220,163],"country":"VE","polys":[[229,165,231,165,231,167,234,168,232,170,233,170,231,171,231,173,232,175,228,177,228,178,224,176,225,180,227,180,223,184,222,183,221,183,220,182,219,180,218,179,219,178,218,176,219,172,215,172,214,171,210,171,209,166,207,166,209,162,211,161,210,161,211,163,210,165,211,166,212,166,212,165,211,163,214,161,214,160,215,161,217,162,218,163,221,163,223,164,226,163,225,163,230,163,228,163,229,165]],"rects":[]},"America\/Cayenne":{"offset":-3,"pin":[248,175],"country":"GF","polys":[[246,174,250,176,247,180,244,181,245,178,244,175,245,173,246,174]],"rects":[]},"America\/Cayman":{"offset":-5,"pin":[192,145],"country":"KY","polys":[[195,145,195,144,195,145]],"rects":[]},"America\/Chicago":{"offset":-6,"pin":[180,99],"country":"US","polys":[[179,106,185,109,185,111,184,113,185,119,185,124,182,123,182,122,180,123,181,122,179,123,179,122,179,123,174,123,176,123,175,124,177,125,176,126,175,124,175,125,169,123,166,125,166,124,165,126,163,127,163,126,162,126,163,127,161,127,161,129,160,129,161,129,161,132,157,131,156,128,153,124,150,124,149,125,147,125,146,122,146,119,150,119,150,109,152,109,152,107,153,107,153,104,152,104,152,103,153,103,153,99,154,98,153,95,155,94,154,93,155,92,155,91,153,91,154,89,154,88,149,87,148,84,165,84,165,83,166,85,176,86,171,89,173,88,173,89,179,91,180,92,179,93,180,93,179,98,180,99,182,100,180,101,179,106]],"rects":[]},"America\/Chihuahua":{"offset":-7,"pin":[144,126],"country":"MX","polys":[[149,126,148,128,148,130,147,131,144,130,142,132,138,127,139,127,138,121,140,121,140,120,143,120,146,122,146,124,149,126]],"rects":[]},"America\/Coral_Harbour":{"offset":-5,"pin":[350,185],"country":null,"polys":[[184,49,185,51,186,50,191,52,191,53,191,53,194,54,192,55,188,53,184,55,183,54,180,54,182,53,183,50,184,49]],"rects":[]},"America\/Costa_Rica":{"offset":-6,"pin":[187,165],"country":"CR","polys":[[185,165,183,164,184,162,187,163,189,165,189,166,189,168,184,164,185,165]],"rects":[]},"America\/Creston":{"offset":-7,"pin":[123,84],"country":"CA","polys":[[125,84,122,84,123,83,125,84]],"rects":[]},"America\/Cuiaba":{"offset":-3,"pin":[241,217],"country":"BR","polys":[[250,216,247,220,247,222,245,222,246,220,243,221,241,220,238,222,236,220,237,218,233,218,232,213,234,211,234,208,230,208,230,203,236,203,237,200,238,203,240,204,252,205,251,209,252,212,250,216]],"rects":[]},"America\/Curacao":{"offset":-4,"pin":[216,160],"country":"CW","polys":[[216,160,216,160,216,160]],"rects":[]},"America\/Danmarkshavn":{"offset":0,"pin":[314,27],"country":"GL","polys":[[312,22,312,22,313,22,309,23,310,23,307,25,310,25,313,25,313,26,309,26,314,26,315,27,306,27,312,29,307,29,312,29,305,29,306,21,312,22]],"rects":[]},"America\/Dawson":{"offset":-8,"pin":[79,53],"country":"CA","polys":[[79,53,79,53,79,53]],"rects":[]},"America\/Dawson_Creek":{"offset":-7,"pin":[116,62],"country":"CA","polys":[[117,67,117,74,111,71,109,68,117,67]],"rects":[]},"America\/Denver":{"offset":-7,"pin":[146,103],"country":"US","polys":[[130,94,128,91,127,91,128,89,125,88,124,84,148,84,148,87,151,87,151,89,154,90,153,91,155,91,155,92,154,93,155,94,153,95,154,98,153,99,153,103,152,103,152,104,153,104,153,107,152,107,152,109,150,109,150,119,146,119,146,122,143,120,138,121,138,113,134,113,132,110,133,109,128,109,128,99,134,99,134,94,130,94]],"rects":[]},"America\/Detroit":{"offset":-5,"pin":[189,98],"country":"US","polys":[[185,99,181,99,182,97,182,95,182,93,184,92,184,93,185,91,188,92,187,92,188,94,187,96,189,94,190,97,188,99,185,99],[175,89,178,88,178,89,182,90,185,89,188,90,184,90,182,91,181,91,180,92,180,91,180,90,176,90,175,89]],"rects":[]},"America\/Dominica":{"offset":-4,"pin":[231,154],"country":"DM","polys":[[231,153,231,154,231,153]],"rects":[]},"America\/Edmonton":{"offset":-7,"pin":[129,75],"country":"CA","polys":[[128,84,123,83,123,81,119,78,120,77,120,76,117,75,117,62,136,62,136,75,138,76,136,77,136,84,128,84]],"rects":[]},"America\/Eirunepe":{"offset":-4,"pin":[214,199],"country":"BR","polys":[[219,205,207,200,208,198,208,196,210,194,214,194,219,205]],"rects":[]},"America\/El_Salvador":{"offset":-6,"pin":[177,157],"country":"SV","polys":[[176,157,175,157,176,155,179,157,179,158,176,157]],"rects":[]},"America\/Fortaleza":{"offset":-3,"pin":[275,193],"country":"BR","polys":[[282,198,282,201,281,200,278,202,277,201,278,200,276,201,271,200,271,202,269,204,265,204,265,206,262,207,260,206,258,204,260,202,257,200,258,196,255,196,258,193,261,187,262,188,262,189,263,188,263,189,263,192,264,190,264,191,266,190,268,191,272,191,278,195,281,196,282,198]],"rects":[]},"America\/Glace_Bay":{"offset":-4,"pin":[233,90],"country":"CA","polys":[[233,90,233,91,232,91,233,90]],"rects":[]},"America\/Godthab":{"offset":-3,"pin":[249,53],"country":"GL","polys":[[263,62,262,61,264,61,262,61,263,60,262,61,262,60,261,61,262,60,260,60,262,59,256,60,257,60,256,60,257,59,254,58,256,58,254,58,255,58,254,58,255,57,253,58,254,57,252,57,253,55,252,56,252,56,252,55,253,55,251,55,252,55,250,55,252,54,250,54,251,54,250,53,252,53,249,53,252,53,251,52,252,52,254,53,251,51,252,52,249,53,249,52,250,51,248,52,249,51,248,51,252,50,248,51,248,50,246,50,249,49,246,49,252,48,246,49,247,49,246,48,248,48,246,48,248,48,245,47,252,47,246,46,253,46,248,46,250,45,245,46,247,45,249,45,246,45,253,45,250,45,251,44,246,45,251,44,251,44,250,44,251,43,252,43,251,43,253,43,252,42,251,43,252,42,251,42,252,41,244,40,252,40,250,40,251,39,249,39,251,39,248,39,250,38,248,39,250,38,247,38,250,38,246,37,245,38,245,38,242,38,241,38,244,37,242,37,243,36,242,36,244,35,242,35,243,34,241,34,242,33,240,33,241,32,239,33,241,32,236,30,237,30,236,29,226,28,221,22,224,22,223,21,226,20,219,20,226,18,228,19,227,18,231,18,231,18,232,17,231,17,232,17,240,18,234,16,236,16,244,16,246,16,246,17,247,16,253,17,251,17,254,17,251,15,252,15,263,17,264,17,263,16,264,16,263,16,268,16,261,15,273,15,261,14,275,15,274,14,278,14,274,13,282,13,300,14,281,15,301,14,302,14,300,15,309,15,286,17,302,16,298,18,299,18,309,17,309,18,303,19,313,17,312,18,320,17,328,18,320,19,309,19,319,20,310,20,311,21,317,21,315,21,306,21,305,29,312,29,312,31,307,29,308,30,306,30,310,31,306,30,313,32,306,32,307,32,306,33,307,34,308,33,311,33,310,34,306,34,303,34,307,34,300,33,302,34,297,34,299,34,296,35,297,35,301,35,297,35,302,36,299,36,301,36,300,37,303,36,302,39,294,37,297,38,295,38,301,38,296,39,296,39,293,40,299,40,294,41,297,41,301,40,307,41,299,44,291,45,289,45,287,44,288,45,285,46,283,49,277,49,278,50,276,50,278,49,276,48,276,49,275,49,276,50,273,50,272,50,273,51,272,51,270,51,271,53,269,53,271,53,271,54,269,54,271,54,269,54,269,55,268,55,269,56,266,56,268,57,266,57,268,58,267,58,268,58,266,59,267,59,265,59,267,60,265,60,267,61,264,60,266,61,264,61,263,62]],"rects":[]},"America\/Goose_Bay":{"offset":-4,"pin":[233,75],"country":"CA","polys":[[239,78,226,78,225,77,227,77,226,76,225,77,224,79,221,78,221,76,219,76,220,75,218,74,220,73,219,72,220,73,220,71,222,73,226,73,227,71,226,71,226,70,227,70,225,69,226,66,225,66,227,64,224,64,225,64,225,63,224,63,224,61,227,63,225,64,228,64,226,65,228,65,227,66,230,66,228,67,231,68,228,68,230,69,229,69,232,71,233,70,232,72,234,71,233,72,235,72,234,72,235,71,235,72,239,73,234,74,236,74,232,76,238,74,239,74,238,75,239,78]],"rects":[]},"America\/Grand_Turk":{"offset":-5,"pin":[212,141],"country":"TC","polys":[[211,141,211,140,211,141]],"rects":[]},"America\/Grenada":{"offset":-4,"pin":[230,160],"country":"GD","polys":[[230,159,231,159,230,159]],"rects":[]},"America\/Guadeloupe":{"offset":-4,"pin":[230,152],"country":"GP","polys":[[230,151,231,152,230,151]],"rects":[]},"America\/Guatemala":{"offset":-6,"pin":[174,155],"country":"GT","polys":[[175,157,172,156,171,154,172,152,174,152,172,150,173,150,173,148,177,148,177,152,178,153,175,157]],"rects":[]},"America\/Guayaquil":{"offset":-5,"pin":[195,189],"country":"EC","polys":[[198,193,196,195,195,194,194,194,195,190,194,191,192,189,194,183,197,182,199,184,202,184,204,185,203,186,204,187,198,193]],"rects":[]},"America\/Guyana":{"offset":-4,"pin":[237,171],"country":"GY","polys":[[238,172,239,174,237,175,237,177,240,181,239,181,236,183,234,181,233,179,234,177,233,176,233,175,231,173,231,171,233,170,232,170,234,168,233,167,236,170,236,172,237,171,238,172]],"rects":[]},"America\/Halifax":{"offset":-4,"pin":[226,93],"country":"CA","polys":[[225,93,227,92,224,92,225,90,228,91,230,91,231,92,225,93,223,96,221,95,222,93,225,92,225,93]],"rects":[]},"America\/Havana":{"offset":-5,"pin":[190,137],"country":"CU","polys":[[205,143,206,143,199,144,200,142,198,142,197,141,191,139,190,139,191,139,191,138,185,140,188,138,193,137,205,143]],"rects":[]},"America\/Hermosillo":{"offset":-7,"pin":[134,125],"country":"MX","polys":[[126,119,127,118,134,121,138,121,139,127,138,127,139,130,138,131,135,129,135,128,132,125,130,121,126,119]],"rects":[]},"America\/Indiana\/Petersburg":{"offset":-5,"pin":[180,106],"country":"US","polys":[[181,106,180,106,181,106]],"rects":[]},"America\/Indiana\/Tell_City":{"offset":-6,"pin":[181,107],"country":"US","polys":[[182,107,182,106,182,107]],"rects":[]},"America\/Indiana\/Vevay":{"offset":-5,"pin":[185,105],"country":"US","polys":[[185,105,184,105,185,105]],"rects":[]},"America\/Indiana\/Indianapolis":{"offset":-5,"pin":[182,103],"country":"US","polys":[[184,105,181,106,181,105,180,105,180,101,182,101,182,99,185,99,185,104,184,105]],"rects":[]},"America\/Indiana\/Knox":{"offset":-6,"pin":[182,100],"country":"US","polys":[[182,100,181,100,182,100]],"rects":[]},"America\/Indiana\/Marengo":{"offset":-5,"pin":[182,106],"country":"US","polys":[[182,107,181,106,182,106,182,107]],"rects":[]},"America\/Indiana\/Vincennes":{"offset":-5,"pin":[180,105],"country":"US","polys":[[179,106,180,105,181,105,181,106,179,106]],"rects":[]},"America\/Indiana\/Winamac":{"offset":-5,"pin":[182,101],"country":"US","polys":[[182,100,181,101,182,100]],"rects":[]},"America\/Inuvik":{"offset":-7,"pin":[90,45],"country":"CA","polys":[[91,45,90,44,91,45]],"rects":[]},"America\/Iqaluit":{"offset":-5,"pin":[217,54],"country":"CA","polys":[[195,30,194,30,196,30,194,31,196,31,185,32,185,29,195,30],[194,15,202,15,202,16,203,15,199,14,218,14,216,15,218,15,218,17,215,17,218,18,213,18,218,18,218,19,212,19,214,20,209,20,213,20,211,21,206,21,204,21,208,21,198,22,205,23,199,22,205,23,200,24,203,24,202,25,198,25,199,25,198,26,190,26,199,27,198,28,192,29,193,28,190,27,190,28,185,28,185,26,188,26,187,26,190,25,185,26,185,23,190,24,188,23,191,23,185,23,188,23,185,22,185,20,193,21,195,21,188,20,201,19,196,19,201,18,195,18,196,18,195,19,185,20,185,18,190,18,185,18,185,16,186,17,185,15,196,17,189,16,193,15,191,15,197,15,194,15,194,15],[185,44,186,43,185,43,185,41,190,42,188,42,192,43,191,43,192,44,189,44,192,46,188,49,187,47,185,47,185,44],[202,35,195,35,193,34,198,34,202,35],[186,34,192,34,194,35,193,36,194,36,193,37,195,36,199,38,197,37,199,37,197,36,199,35,204,36,204,36,202,38,206,37,203,38,205,38,204,39,207,37,206,38,207,38,206,39,208,38,207,39,209,38,212,39,208,39,210,39,209,40,213,39,210,40,212,40,211,41,214,39,213,40,217,40,213,41,217,41,214,42,218,40,217,42,214,42,218,42,215,43,217,43,216,43,218,43,217,43,218,44,215,43,218,44,218,49,217,49,218,50,218,54,216,54,218,55,218,57,211,55,210,55,212,54,209,54,207,53,208,52,207,53,207,52,206,53,206,52,205,52,204,52,205,53,198,53,198,52,199,50,207,50,205,49,210,47,207,45,208,44,206,44,207,44,203,43,201,44,203,43,200,42,201,41,200,41,200,41,199,42,199,41,196,40,195,40,197,40,197,41,191,41,193,42,189,40,191,41,185,41,185,39,186,38,185,38,185,36,186,37,185,36,185,35,186,35,185,35,186,35,185,34,186,34]],"rects":[]},"America\/La_Paz":{"offset":-4,"pin":[217,219],"country":"BO","polys":[[229,228,228,231,226,230,225,232,224,231,221,230,219,232,218,232,216,227,217,225,215,221,216,219,215,217,216,211,215,208,217,208,220,205,223,205,224,210,232,213,233,218,237,218,236,220,238,222,237,226,235,225,230,225,229,228]],"rects":[]},"America\/Jamaica":{"offset":-5,"pin":[201,148],"country":"JM","polys":[[202,148,200,149,198,147,200,147,202,148]],"rects":[]},"America\/Juneau":{"offset":-9,"pin":[89,65],"country":"US","polys":[[83,64,87,62,93,67,90,67,91,67,90,66,92,67,90,66,91,66,89,66,90,65,88,65,87,63,86,63,87,65,86,65,86,64,85,64,85,64,83,64,85,65,84,65,82,64,83,64]],"rects":[]},"America\/Kentucky\/Louisville":{"offset":-5,"pin":[183,106],"country":"US","polys":[[183,107,182,106,184,106,183,107]],"rects":[]},"America\/Kentucky\/Monticello":{"offset":-5,"pin":[185,109],"country":"US","polys":[[185,109,186,109,185,110,185,109]],"rects":[]},"America\/Kralendijk":{"offset":-4,"pin":[217,160],"country":"BQ","polys":[[227,149,227,149,227,149]],"rects":[]},"America\/Lima":{"offset":-5,"pin":[200,210],"country":"PE","polys":[[215,221,214,222,213,223,211,220,204,217,202,214,202,213,195,200,192,197,193,196,192,194,193,193,194,192,194,194,196,195,198,192,203,188,204,187,203,185,205,185,208,190,211,189,214,191,213,193,214,194,213,193,208,195,208,198,206,200,208,203,208,204,209,205,210,206,213,204,213,208,215,207,216,211,215,217,216,219,215,221]],"rects":[]},"America\/Managua":{"offset":-6,"pin":[182,160],"country":"NI","polys":[[185,162,183,162,180,158,181,158,181,157,183,157,185,155,188,154,187,163,185,162]],"rects":[]},"America\/Manaus":{"offset":-4,"pin":[233,191],"country":"BR","polys":[[233,185,236,185,237,187,241,190,236,199,237,200,236,203,230,203,228,202,226,201,225,203,223,204,221,204,220,205,219,205,214,194,215,188,214,184,216,184,214,183,214,181,219,181,220,183,221,183,222,183,223,184,226,181,227,181,229,183,228,187,230,188,231,186,233,186,233,185]],"rects":[]},"America\/Los_Angeles":{"offset":-8,"pin":[120,115],"country":"US","polys":[[127,91,124,92,123,90,124,91,122,94,120,94,120,98,122,98,122,99,128,99,128,111,127,111,128,115,127,116,127,117,122,118,119,115,115,114,115,113,112,109,112,107,111,107,109,105,108,102,109,100,108,97,109,90,110,90,109,90,109,89,109,89,109,88,109,89,107,86,111,86,111,88,112,86,112,87,111,88,112,87,111,84,124,84,125,88,128,89,127,91]],"rects":[]},"America\/Lower_Princes":{"offset":-4,"pin":[227,148],"country":"SX","polys":[[227,148,227,148,227,148]],"rects":[]},"America\/Maceio":{"offset":-3,"pin":[281,205],"country":"BR","polys":[[279,207,277,209,276,207,277,206,276,204,277,203,278,204,282,203,279,207]],"rects":[]},"America\/Marigot":{"offset":-4,"pin":[227,148],"country":"MF","polys":[[227,148,227,148,227,148]],"rects":[]},"America\/Martinique":{"offset":-4,"pin":[231,155],"country":"MQ","polys":[[231,155,231,155,231,155]],"rects":[]},"America\/Matamoros":{"offset":-6,"pin":[160,132],"country":"MX","polys":[[158,132,157,131,153,124,151,124,150,126,149,125,150,124,153,124,156,128,157,131,161,132,161,132,158,132]],"rects":[]},"America\/Mazatlan":{"offset":-7,"pin":[143,137],"country":"MX","polys":[[146,138,148,141,147,142,145,142,145,141,144,138,140,133,137,132,138,131,140,130,142,134,146,138],[128,127,131,127,137,137,136,138,132,134,132,132,130,130,129,130,126,128,128,128,128,127]],"rects":[]},"America\/Menominee":{"offset":-6,"pin":[180,92],"country":"US","polys":[[180,92,179,91,174,89,180,90,180,91,180,92]],"rects":[]},"America\/Mexico_City":{"offset":-6,"pin":[157,145],"country":"MX","polys":[[167,152,166,151,162,153,160,152,146,145,144,143,146,142,147,142,148,141,147,140,148,136,151,135,150,133,154,134,156,138,160,139,163,146,166,148,171,147,171,148,173,148,173,150,172,150,174,151,172,152,171,155,166,152,167,152]],"rects":[]},"America\/Merida":{"offset":-6,"pin":[176,142],"country":"MX","polys":[[174,142,175,141,180,141,179,143,176,145,176,148,171,148,170,147,172,147,174,142]],"rects":[]},"America\/Metlakatla":{"offset":-8,"pin":[94,72],"country":"US","polys":[[94,72,94,72,94,72]],"rects":[]},"America\/Miquelon":{"offset":-3,"pin":[240,88],"country":"PM","polys":[[240,89,240,88,240,89]],"rects":[]},"America\/Moncton":{"offset":-4,"pin":[224,90],"country":"CA","polys":[[220,86,224,87,223,88,224,88,224,90,226,90,222,92,219,92,218,91,218,88,216,88,218,86,220,86]],"rects":[]},"America\/Monterrey":{"offset":-6,"pin":[155,132],"country":"MX","polys":[[150,133,151,135,148,136,147,139,146,139,142,133,144,130,147,131,148,130,148,128,149,126,151,124,152,124,157,131,161,132,160,134,161,133,160,133,160,139,156,138,154,134,150,133]],"rects":[]},"America\/Montevideo":{"offset":-2,"pin":[241,257],"country":"UY","polys":[[241,257,238,256,236,255,238,247,240,247,241,249,242,248,247,252,245,256,241,257]],"rects":[]},"America\/Montreal":{"offset":-5,"pin":[206,90],"country":null,"polys":[[205,93,205,91,201,91,197,90,195,88,195,79,197,80,196,79,197,78,196,76,196,74,195,73,199,71,201,69,200,66,197,64,200,62,199,61,200,61,199,60,199,60,198,60,199,59,198,58,198,57,205,57,207,57,210,58,209,58,211,58,210,59,211,59,215,59,215,62,212,62,214,62,214,63,216,64,213,64,216,64,217,65,215,66,218,65,218,66,218,65,218,66,221,64,222,65,222,64,223,64,222,63,224,63,223,62,224,61,224,63,225,63,225,64,224,64,227,64,225,66,226,66,225,69,227,70,226,70,226,71,227,71,226,73,222,73,220,71,220,73,219,72,220,73,218,74,220,75,219,76,221,76,221,78,224,79,225,77,226,76,227,77,225,77,226,78,239,78,239,79,236,79,234,81,230,82,221,82,221,81,219,84,217,84,212,88,209,90,220,84,224,84,225,85,223,86,217,87,214,89,213,92,211,93,205,93]],"rects":[]},"America\/Montserrat":{"offset":-4,"pin":[229,151],"country":"MS","polys":[[229,151,229,151,229,151]],"rects":[]},"America\/Nassau":{"offset":-5,"pin":[200,133],"country":"BS","polys":[[201,132,201,132,201,132]],"rects":[]},"America\/New_York":{"offset":-5,"pin":[206,101],"country":"US","polys":[[185,122,184,113,185,111,186,109,182,107,185,105,184,105,185,99,191,100,196,98,196,96,202,96,201,94,204,93,212,92,215,87,218,88,218,91,220,93,217,94,216,93,215,95,213,95,212,98,213,99,214,99,214,100,212,100,211,99,211,100,207,101,204,105,203,104,204,106,202,109,203,107,201,105,202,104,201,104,202,107,200,106,202,107,200,107,202,109,200,108,202,109,203,111,202,110,203,111,201,111,203,112,200,112,201,113,200,113,202,113,201,114,193,118,192,121,194,130,193,134,192,133,191,131,191,130,190,130,189,129,190,128,189,128,189,125,186,123,184,124,185,122]],"rects":[]},"America\/Nipigon":{"offset":-5,"pin":[178,84],"country":"CA","polys":[[178,84,178,84,178,84]],"rects":[]},"America\/Nome":{"offset":-9,"pin":[28,52],"country":"US","polys":[[35,47,32,47,31,46,26,45,27,43,32,43,35,40,35,47],[35,52,33,53,27,52,25,51,27,51,23,50,32,48,31,49,35,49,35,52],[35,62,31,62,28,61,29,60,27,58,30,55,33,55,35,55,35,62]],"rects":[]},"America\/Noronha":{"offset":-2,"pin":[287,193],"country":"BR","polys":[[287,193,287,193,287,193]],"rects":[]},"America\/North_Dakota\/Beulah":{"offset":-6,"pin":[152,88],"country":"US","polys":[[153,88,151,88,151,87,153,88]],"rects":[]},"America\/North_Dakota\/Center":{"offset":-6,"pin":[153,88],"country":"US","polys":[[154,88,152,88,154,88]],"rects":[]},"America\/North_Dakota\/New_Salem":{"offset":-6,"pin":[153,89],"country":"US","polys":[[154,88,154,89,154,90,151,89,154,88]],"rects":[]},"America\/Ojinaga":{"offset":-7,"pin":[147,124],"country":"MX","polys":[[143,120,149,126,146,124,146,122,143,120,138,121,140,121,140,120,143,120]],"rects":[]},"America\/Panama":{"offset":-5,"pin":[195,167],"country":"PA","polys":[[199,167,200,169,199,170,197,168,198,168,199,168,196,166,194,168,194,170,194,170,193,170,192,169,192,169,190,168,189,169,189,168,189,165,192,167,196,165,199,167]],"rects":[]},"America\/Pangnirtung":{"offset":-5,"pin":[222,49],"country":"CA","polys":[[218,15,224,15,231,16,218,17,218,15],[218,50,219,50,220,52,220,51,223,52,222,53,224,53,224,54,225,55,223,54,224,56,223,55,223,56,221,55,221,55,218,54,218,50],[218,44,220,44,218,45,221,45,220,45,221,46,222,45,222,46,224,45,223,46,225,46,226,47,224,47,226,47,224,47,227,47,226,48,228,47,228,48,229,47,231,48,228,49,230,49,227,49,229,49,228,50,228,50,226,49,226,52,223,50,225,49,222,49,223,49,222,49,218,48,220,49,218,48,219,49,218,50,218,44]],"rects":[]},"America\/Paramaribo":{"offset":-3,"pin":[243,173],"country":"SR","polys":[[244,174,245,178,244,180,241,180,241,181,240,181,237,177,237,175,239,174,239,173,245,173,244,174]],"rects":[]},"America\/Phoenix":{"offset":-7,"pin":[132,116],"country":"US","polys":[[138,118,138,121,134,121,127,118,128,115,127,111,128,111,128,109,133,109,132,110,134,113,138,113,138,118]],"rects":[]},"America\/Port-au-Prince":{"offset":-5,"pin":[209,147],"country":"HT","polys":[[208,146,208,147,208,146]],"rects":[]},"America\/Port_of_Spain":{"offset":-4,"pin":[230,163],"country":"TT","polys":[[230,163,230,163,230,163]],"rects":[]},"America\/Porto_Velho":{"offset":-4,"pin":[226,203],"country":"BR","polys":[[233,209,233,213,230,213,224,210,223,205,220,205,221,204,223,204,225,203,226,201,228,201,230,203,230,208,233,208,233,209]],"rects":[]},"America\/Puerto_Rico":{"offset":-4,"pin":[221,147],"country":"PR","polys":[[221,147,221,147,221,147]],"rects":[]},"America\/Rainy_River":{"offset":-6,"pin":[166,85],"country":"CA","polys":[[166,85,166,85,166,85]],"rects":[]},"America\/Rankin_Inlet":{"offset":-6,"pin":[171,56],"country":"CA","polys":[[185,18,176,18,174,18,180,17,171,17,184,16,185,18],[158,28,160,28,160,29,161,30,156,31,154,30,156,29,152,30,152,29,153,29,152,28,156,29,155,29,157,28,154,28,158,28],[175,24,176,24,171,24,169,24,172,24,167,23,174,22,165,22,164,22,167,21,162,20,166,21,166,20,167,20,162,20,168,19,164,19,169,18,166,18,169,18,177,20,180,20,179,20,181,21,180,22,185,22,180,23,179,23,178,23,179,24,177,23,177,24,175,24],[185,32,171,31,170,30,171,29,169,28,165,28,166,28,161,27,164,27,169,27,168,28,173,27,174,28,172,28,176,28,173,28,177,30,185,29,185,32],[185,28,176,28,182,26,178,25,180,25,185,26,185,28],[185,41,177,40,176,39,181,39,175,38,175,37,176,37,175,36,179,34,185,33,181,36,182,36,182,37,185,38,181,39,185,39,185,41],[175,54,174,55,167,54,172,54,174,55,170,56,171,56,167,58,169,58,167,59,168,59,166,62,152,62,152,47,177,47,177,43,179,44,179,45,178,45,180,47,182,47,183,44,185,44,185,49,181,48,183,49,180,51,172,49,181,51,179,53,175,54],[165,33,168,33,175,33,171,35,167,35,168,36,167,37,164,35,164,33,166,34,165,33]],"rects":[]},"America\/Recife":{"offset":-3,"pin":[282,202],"country":"BR","polys":[[275,201,276,201,278,200,278,202,281,200,282,201,282,203,278,204,277,203,276,204,273,203,271,205,270,203,271,202,271,200,275,201]],"rects":[]},"America\/Regina":{"offset":-6,"pin":[147,81],"country":"CA","polys":[[146,84,136,84,136,77,138,76,136,75,136,62,152,62,152,72,151,73,152,74,153,84,146,84]],"rects":[]},"America\/Resolute":{"offset":-6,"pin":[166,31],"country":"CA","polys":[[165,30,168,30,168,31,162,31,165,30]],"rects":[]},"America\/Rio_Branco":{"offset":-4,"pin":[218,205],"country":"BR","polys":[[207,200,213,202,220,205,217,208,213,208,213,204,210,206,209,205,208,204,208,203,206,201,207,200]],"rects":[]},"America\/Santa_Isabel":{"offset":-8,"pin":[127,123],"country":"MX","polys":[[127,118,127,123,131,127,128,127,128,126,125,124,123,120,124,118,127,118]],"rects":[]},"America\/Santarem":{"offset":-3,"pin":[243,190],"country":"BR","polys":[[247,185,248,187,249,187,248,188,249,192,248,193,247,195,249,199,247,202,249,204,248,205,240,204,238,203,236,199,241,190,236,186,235,182,239,181,241,181,241,180,243,180,244,181,246,182,247,185]],"rects":[]},"America\/Santiago":{"offset":-3,"pin":[213,254],"country":"CL","polys":[[213,294,215,293,217,293,217,298,210,297,214,297,212,296,215,297,215,297,216,297,214,296,215,295,213,295,213,294],[207,286,207,288,208,289,209,289,209,291,210,292,217,293,212,293,211,296,209,295,210,295,212,294,211,293,208,293,208,294,207,294,208,293,207,293,207,292,208,292,208,292,209,292,208,293,209,293,209,291,208,290,208,291,209,291,207,291,208,292,208,292,207,291,207,292,206,291,207,290,206,290,207,289,207,289,206,290,206,289,205,288,206,288,205,287,207,287,206,286,205,287,205,285,206,285,205,285,206,285,205,284,208,284,207,283,205,283,206,283,205,283,206,282,206,281,203,281,205,279,206,279,206,281,208,279,207,279,207,278,208,278,207,278,209,276,207,276,209,272,208,272,209,272,209,271,208,271,209,270,207,271,206,270,208,266,207,262,208,261,211,254,211,245,213,239,213,233,214,229,213,223,215,221,217,225,216,227,218,232,220,232,219,234,217,236,217,240,215,243,214,247,213,249,214,255,213,257,213,259,212,261,212,264,211,266,211,272,210,272,211,275,210,276,212,277,210,277,211,278,210,279,211,281,209,283,209,285,207,286]],"rects":[]},"America\/Santo_Domingo":{"offset":-4,"pin":[214,147],"country":"DO","polys":[[212,147,211,148,210,147,211,144,214,145,216,145,215,146,217,147,217,148,212,147]],"rects":[]},"America\/Scoresbysund":{"offset":-1,"pin":[307,40],"country":"GL","polys":[[303,36,306,37,305,38,307,38,306,38,308,38,308,39,307,39,308,39,307,39,308,40,303,40,302,39,303,36]],"rects":[]},"America\/Sao_Paulo":{"offset":-2,"pin":[259,233],"country":"BR","polys":[[253,245,251,249,249,251,252,248,250,247,250,248,246,254,246,253,247,252,246,251,242,248,241,249,239,247,238,247,242,243,246,240,245,238,244,238,244,235,246,232,249,230,251,225,247,223,247,221,251,216,252,211,254,212,255,211,255,212,257,212,260,211,260,216,264,214,272,218,271,221,273,223,273,225,270,229,270,230,268,232,264,232,256,237,255,237,256,238,255,239,256,239,255,243,253,245]],"rects":[]},"America\/Sitka":{"offset":-9,"pin":[87,67],"country":"US","polys":[[92,67,94,69,90,67,93,67,92,67]],"rects":[]},"America\/St_Barthelemy":{"offset":-4,"pin":[228,148],"country":"BL","polys":[[228,148,228,148,228,148]],"rects":[]},"America\/St_Johns":{"offset":-3.5,"pin":[247,87],"country":"CA","polys":[[242,79,241,79,242,80,241,80,239,83,241,82,242,82,241,83,243,83,242,84,244,83,246,84,245,86,247,85,245,86,246,87,247,86,246,87,248,87,247,89,246,89,246,88,245,89,245,88,245,87,242,89,244,87,241,87,242,87,242,86,239,87,235,87,237,85,235,85,236,84,237,84,237,84,238,83,237,83,238,81,242,79]],"rects":[]},"America\/Thule":{"offset":-4,"pin":[216,28],"country":"GL","polys":[[226,28,217,29,215,28,218,27,211,27,222,26,214,26,215,25,208,24,221,22,226,28]],"rects":[]},"America\/St_Kitts":{"offset":-4,"pin":[228,149],"country":"KN","polys":[[228,149,228,150,228,149]],"rects":[]},"America\/St_Lucia":{"offset":-4,"pin":[231,156],"country":"LC","polys":[[232,156,232,157,232,156]],"rects":[]},"America\/St_Thomas":{"offset":-4,"pin":[224,147],"country":"VI","polys":[[224,147,224,147,224,147]],"rects":[]},"America\/St_Vincent":{"offset":-4,"pin":[231,158],"country":"VC","polys":[[231,158,231,158,231,158]],"rects":[]},"America\/Swift_Current":{"offset":-6,"pin":[140,82],"country":"CA","polys":[[140,82,140,82,140,82]],"rects":[]},"America\/Tegucigalpa":{"offset":-6,"pin":[180,156],"country":"HN","polys":[[181,157,180,158,179,157,176,155,177,154,179,152,183,152,186,152,188,154,185,155,183,157,181,157]],"rects":[]},"America\/Thunder_Bay":{"offset":-5,"pin":[176,86],"country":"CA","polys":[[177,85,176,86,177,85]],"rects":[]},"America\/Tijuana":{"offset":-8,"pin":[122,118],"country":"MX","polys":[[122,118,122,118,122,118]],"rects":[]},"America\/Toronto":{"offset":-5,"pin":[196,95],"country":"CA","polys":[[204,91,205,92,200,94,199,94,201,94,200,95,197,95,195,96,197,97,188,99,191,96,192,93,191,92,193,93,195,93,193,91,191,90,191,91,187,90,186,89,185,86,183,86,182,85,178,84,179,85,176,85,176,86,173,85,173,84,175,83,175,81,174,79,175,78,175,77,177,77,178,75,177,74,175,74,175,69,177,68,180,70,184,71,190,72,190,76,194,79,195,79,196,88,197,90,201,92,204,91]],"rects":[]},"America\/Tortola":{"offset":-4,"pin":[224,147],"country":"VG","polys":[[225,147,225,147,225,147]],"rects":[]},"America\/Vancouver":{"offset":-8,"pin":[111,84],"country":"CA","polys":[[100,81,106,82,110,85,107,85,107,84,106,84,105,84,104,83,105,83,101,82,102,81,100,81],[88,63,87,62,83,64,80,62,117,62,117,67,109,68,111,71,120,76,120,77,119,78,123,81,123,84,111,84,114,83,113,84,113,83,113,84,111,84,112,83,111,84,111,83,110,84,110,82,110,83,109,83,110,83,109,83,109,82,108,83,107,82,108,81,107,82,108,80,107,80,107,81,104,81,106,80,105,81,104,80,105,80,102,80,104,80,102,79,104,78,102,79,101,78,103,77,104,78,103,77,104,77,103,77,103,76,102,77,101,78,101,77,100,78,101,77,99,75,102,76,100,75,100,73,99,75,97,74,99,73,96,73,97,73,96,73,99,72,97,72,98,71,98,71,97,72,97,70,94,69,91,65,88,63]],"rects":[]},"America\/Whitehorse":{"offset":-8,"pin":[87,60],"country":"CA","polys":[[80,42,85,43,85,47,90,47,90,49,93,49,92,52,97,54,98,55,97,55,98,55,99,57,103,59,103,60,108,60,109,62,76,61,76,42,80,42]],"rects":[]},"America\/Winnipeg":{"offset":-6,"pin":[161,82],"country":"CA","polys":[[171,86,166,85,165,83,165,84,153,84,152,74,151,73,152,72,152,62,166,62,165,64,169,64,170,67,170,68,173,67,177,68,175,69,175,74,177,74,178,75,177,77,175,77,175,78,174,79,175,81,175,83,172,84,171,86]],"rects":[]},"America\/Yakutat":{"offset":-9,"pin":[78,63],"country":"US","polys":[[79,62,79,62,79,62]],"rects":[]},"America\/Yellowknife":{"offset":-7,"pin":[128,57],"country":"CA","polys":[[117,46,129,50,133,50,135,52,152,53,152,62,109,62,108,60,103,60,103,59,99,57,98,55,97,55,98,55,97,54,92,52,93,49,90,49,90,47,85,47,85,43,87,44,86,43,88,42,90,42,89,43,98,41,93,42,93,43,95,42,95,43,97,42,103,41,101,40,106,43,108,41,109,42,108,42,111,41,115,42,113,42,113,44,117,46],[124,26,126,26,124,26,125,27,122,28,120,28,121,27,117,29,111,29,118,26,124,26],[117,33,122,32,126,34,118,36,116,37,116,38,111,39,105,37,109,33,107,32,114,32,117,33],[127,28,136,30,136,31,130,32,128,31,134,30,121,30,126,29,122,30,127,29,123,29,127,28],[126,34,128,35,127,36,130,35,134,36,133,36,136,36,136,41,122,41,122,42,122,41,133,41,121,40,120,39,126,38,120,38,121,38,118,38,120,37,120,36,126,34]],"rects":[]},"Antarctica\/Macquarie":{"offset":11,"pin":[659,297],"country":"AU","polys":[[659,298,659,297,659,298]],"rects":[]},"Arctic\/Longyearbyen":{"offset":1,"pin":[381,25],"country":"SJ","polys":[[385,21,385,21,384,22,386,21,392,23,387,24,387,24,383,27,383,27,382,28,380,27,382,27,377,26,382,26,379,25,383,25,377,25,376,25,384,24,382,24,383,23,380,24,380,23,378,23,379,24,375,24,374,24,376,24,372,23,374,23,373,22,374,22,372,22,371,22,377,21,374,21,377,22,377,22,379,21,382,23,380,21,385,21],[399,20,403,20,396,22,384,20,388,20,387,20,389,20,388,20,393,21,394,20,395,20,395,20,399,20]],"rects":[]},"Asia\/Aden":{"offset":3,"pin":[438,159],"country":"YE","polys":[[438,158,434,159,433,154,434,149,440,151,440,153,445,147,451,146,453,151,452,152,451,153,438,158]],"rects":[]},"Asia\/Almaty":{"offset":6,"pin":[500,96],"country":"KZ","polys":[[488,98,483,101,480,100,478,98,482,96,482,95,481,94,481,90,472,88,475,87,474,86,476,84,479,84,482,81,482,81,482,77,478,77,479,76,478,76,479,76,479,73,484,71,488,71,488,74,493,74,493,75,500,73,499,74,501,75,506,81,507,80,508,81,512,80,516,83,519,83,520,84,517,86,516,88,511,88,510,91,510,92,509,92,505,93,506,93,507,96,506,98,503,97,497,97,494,96,493,97,493,98,490,97,488,98]],"rects":[]},"Asia\/Amman":{"offset":2,"pin":[420,119],"country":"JO","polys":[[423,121,424,122,423,123,420,125,418,125,419,118,422,119,425,116,426,119,422,120,423,121]],"rects":[]},"Asia\/Anadyr":{"offset":12,"pin":[695,52],"country":"RU","polys":[[14,47,20,49,18,50,17,50,17,50,14,50,15,50,15,51,13,52,15,53,13,53,9,52,8,50,3,50,2,49,3,49,1,49,1,50,0,51,0,43,9,46,11,49,12,48,10,47,14,47],[695,52,691,52,697,53,699,56,698,57,694,56,689,58,688,56,681,57,678,55,680,54,678,53,662,51,659,50,660,49,658,48,659,47,657,46,658,45,666,45,667,43,666,42,666,42,676,42,680,44,683,43,681,42,682,41,692,41,700,43,700,51,697,52,695,52]],"rects":[]},"Asia\/Aqtau":{"offset":5,"pin":[448,93],"country":"KZ","polys":[[459,93,459,100,455,98,452,99,453,97,450,96,448,93,450,93,449,93,450,92,453,92,453,89,450,88,446,90,444,89,445,89,445,88,441,86,446,86,455,84,455,85,457,85,457,89,460,91,460,92,459,93]],"rects":[]},"Asia\/Aqtobe":{"offset":5,"pin":[461,82],"country":"KZ","polys":[[456,81,456,80,458,81,460,80,463,80,466,81,469,81,470,80,472,82,471,84,475,87,472,88,469,87,464,91,460,92,459,89,457,88,457,85,454,84,456,83,456,81]],"rects":[]},"Asia\/Ashgabat":{"offset":5,"pin":[464,107],"country":"TM","polys":[[476,109,475,111,471,113,469,112,469,110,467,110,465,108,461,106,455,108,455,105,453,104,454,103,454,104,453,103,453,101,452,99,455,98,458,100,461,100,461,99,463,98,464,98,463,97,464,97,467,98,467,100,470,100,472,103,480,107,479,108,478,108,476,109]],"rects":[]},"Asia\/Baghdad":{"offset":3,"pin":[436,116],"country":"IQ","polys":[[442,123,441,125,437,125,432,121,426,119,425,116,430,114,430,110,433,108,437,109,438,111,440,111,438,115,440,117,442,118,443,120,443,121,444,123,442,123]],"rects":[]},"Asia\/Bahrain":{"offset":3,"pin":[448,131],"country":"BH","polys":[[448,131,448,131,448,131]],"rects":[]},"Asia\/Bangkok":{"offset":7,"pin":[545,157],"country":"TH","polys":[[548,171,548,173,547,173,547,172,545,171,545,172,541,167,542,163,544,161,543,156,541,154,542,151,539,147,540,147,541,144,542,144,544,143,546,144,545,145,547,145,546,149,548,148,550,148,551,147,552,147,555,153,554,156,551,155,549,157,550,161,548,159,546,159,546,157,544,158,543,166,544,166,545,170,548,171]],"rects":[]},"Asia\/Baku":{"offset":4,"pin":[447,102],"country":"AZ","polys":[[440,99,443,100,444,99,448,102,446,102,445,106,443,105,444,104,443,103,441,105,441,104,439,103,439,102,438,100,441,101,440,99]],"rects":[]},"Asia\/Chongqing":{"offset":8,"pin":[557,124],"country":"CN","polys":[[564,140,562,141,561,140,561,141,559,141,557,140,558,138,555,137,552,139,551,138,550,139,549,138,548,139,548,141,547,141,547,140,545,141,544,140,543,139,544,138,542,137,542,135,540,136,540,133,542,132,542,128,541,127,542,127,542,125,543,125,542,120,539,118,540,116,539,115,541,115,543,115,542,114,543,114,542,111,544,108,543,107,544,107,539,105,540,103,538,103,539,101,541,101,539,97,546,97,554,100,559,98,564,97,566,96,570,99,573,98,571,100,572,102,568,102,566,104,565,107,565,108,564,114,566,117,563,117,564,118,563,119,564,121,561,122,561,124,563,125,563,128,562,129,563,129,562,131,563,132,566,131,566,134,567,133,568,135,567,137,568,137,570,140,567,141,566,140,567,139,566,138,564,140]],"rects":[]},"Asia\/Beirut":{"offset":2,"pin":[419,115],"country":"LB","polys":[[420,116,418,117,419,114,421,114,421,115,420,116]],"rects":[]},"Asia\/Bishkek":{"offset":6,"pin":[495,97],"country":"KG","polys":[[495,102,494,103,494,104,490,104,485,103,492,101,489,100,489,101,486,100,489,98,488,98,489,97,493,98,493,97,494,96,497,97,503,97,506,98,502,101,499,101,498,102,495,102]],"rects":[]},"Asia\/Brunei":{"offset":8,"pin":[573,175],"country":"BN","polys":[[574,175,574,176,574,175]],"rects":[]},"Asia\/Choibalsan":{"offset":8,"pin":[573,86],"country":"MN","polys":[[577,90,575,92,573,92,571,93,568,92,567,90,567,88,569,87,569,83,572,82,577,83,575,86,575,87,580,86,583,88,582,90,580,89,577,90]],"rects":[]},"Asia\/Colombo":{"offset":5.5,"pin":[505,171],"country":"LK","polys":[[509,172,507,173,506,172,505,168,505,165,508,168,509,170,509,172]],"rects":[]},"Asia\/Damascus":{"offset":2,"pin":[421,116],"country":"SY","polys":[[423,118,422,119,419,118,419,117,421,115,419,112,421,110,421,109,426,110,432,108,430,110,430,114,423,118]],"rects":[]},"Asia\/Dhaka":{"offset":6,"pin":[526,136],"country":"BD","polys":[[525,140,526,138,525,140,523,140,523,135,521,134,523,133,521,132,522,130,524,132,524,131,525,133,530,134,527,136,528,138,529,136,530,141,529,141,530,142,529,139,529,139,528,139,528,138,526,138,526,136,525,136,526,137,523,136,525,137,526,139,525,140]],"rects":[]},"Asia\/Dili":{"offset":9,"pin":[594,203],"country":"TL","polys":[[593,203,598,202,593,204,593,203]],"rects":[]},"Asia\/Dubai":{"offset":4,"pin":[458,133],"country":"AE","polys":[[459,134,459,136,458,136,457,138,452,138,450,135,456,135,459,131,460,134,459,134]],"rects":[]},"Asia\/Dushanbe":{"offset":5,"pin":[484,106],"country":"TJ","polys":[[485,109,482,109,483,106,481,104,483,104,484,103,483,102,487,101,488,101,487,102,488,102,485,103,485,104,489,104,490,104,493,104,493,106,496,106,496,108,493,108,489,110,489,107,488,106,485,109]],"rects":[]},"Asia\/Gaza":{"offset":2,"pin":[417,120],"country":"PS","polys":[[417,120,417,121,417,120]],"rects":[]},"Asia\/Harbin":{"offset":8,"pin":[596,91],"country":"CN","polys":[[594,101,593,96,592,97,590,96,589,93,588,94,588,92,587,91,589,91,589,89,590,89,588,88,592,85,592,86,595,80,594,79,589,79,588,78,592,75,595,77,598,83,604,85,605,87,611,86,612,87,609,92,606,92,605,93,605,96,604,97,604,98,603,97,602,98,599,99,599,100,597,99,594,101]],"rects":[]},"Asia\/Hebron":{"offset":2,"pin":[418,120],"country":"PS","polys":[[418,120,418,118,419,120,418,121,418,120]],"rects":[]},"Asia\/Ho_Chi_Minh":{"offset":7,"pin":[557,163],"country":"VN","polys":[[556,166,554,167,554,165,553,164,554,162,556,163,556,161,559,160,559,154,554,147,552,145,554,144,553,143,553,143,551,142,550,140,549,139,549,138,552,139,555,137,558,138,557,140,560,141,557,142,558,142,555,146,562,154,563,159,562,162,558,163,557,165,556,166]],"rects":[]},"Asia\/Hong_Kong":{"offset":8,"pin":[572,139],"country":"HK","polys":[[572,139,571,139,572,139]],"rects":[]},"Asia\/Hovd":{"offset":7,"pin":[528,86],"country":"MN","polys":[[541,93,540,95,540,97,537,97,536,94,527,92,527,88,525,87,521,85,521,84,530,80,533,81,534,82,539,82,539,83,540,84,543,84,543,86,541,86,541,87,540,89,541,91,541,93]],"rects":[]},"Asia\/Irkutsk":{"offset":9,"pin":[553,78],"country":"RU","polys":[[575,68,574,69,575,71,577,72,577,73,571,75,572,76,571,77,568,78,565,79,561,79,560,81,561,81,559,82,555,81,550,82,549,81,548,79,542,78,543,76,538,75,536,73,538,73,538,70,540,69,539,68,540,66,545,66,546,67,547,66,549,64,549,63,553,65,555,64,554,62,555,62,555,61,553,60,557,57,558,56,556,55,558,55,557,53,561,53,562,54,560,54,563,55,563,56,562,56,564,57,563,58,563,59,565,59,562,63,563,64,568,63,569,64,575,61,578,62,578,63,581,63,582,65,579,65,578,66,579,67,579,68,575,68]],"rects":[]},"Asia\/Jakarta":{"offset":7,"pin":[558,198],"country":"ID","polys":[[569,199,570,201,573,201,573,203,560,201,555,199,556,197,561,198,561,199,565,199,566,198,569,199],[556,194,556,197,555,196,554,197,553,196,553,197,549,193,544,185,543,184,542,181,536,175,535,174,540,174,541,177,550,184,550,185,552,184,551,186,553,187,554,190,555,190,556,191,556,194]],"rects":[]},"Asia\/Jayapura":{"offset":9,"pin":[624,190],"country":"ID","polys":[[613,194,612,193,612,193,610,193,610,191,610,193,608,193,608,192,607,191,609,190,610,191,611,189,607,190,607,188,605,188,605,187,607,186,611,186,611,190,613,192,618,188,624,190,624,204,622,202,623,201,620,202,621,201,620,200,622,200,619,199,621,199,618,195,613,194]],"rects":[]},"Asia\/Kabul":{"offset":4.5,"pin":[485,114],"country":"AF","polys":[[473,124,468,124,470,121,468,120,468,117,469,116,468,115,469,112,472,113,478,108,482,109,485,109,488,106,489,107,489,110,493,108,496,108,489,111,489,113,488,115,486,115,487,116,485,117,484,120,483,120,482,121,480,121,479,124,473,124]],"rects":[]},"Asia\/Jerusalem":{"offset":2,"pin":[418,120],"country":"IL","polys":[[417,120,418,117,419,117,419,118,418,119,419,120,418,121,419,120,418,124,417,121,417,120]],"rects":[]},"Asia\/Kamchatka":{"offset":12,"pin":[658,76],"country":"RU","polys":[[667,67,668,70,665,70,664,71,665,72,661,74,661,76,658,76,658,78,655,80,653,70,655,67,655,66,659,65,665,61,668,60,668,60,669,59,669,57,671,57,668,56,667,58,668,58,666,58,665,57,667,56,666,55,667,54,667,53,668,53,667,52,678,53,680,54,678,55,681,57,688,56,689,58,685,59,681,62,677,60,673,62,673,61,671,62,668,62,667,64,665,65,668,66,667,67]],"rects":[]},"Asia\/Karachi":{"offset":5,"pin":[480,134],"country":"PK","polys":[[487,128,485,130,487,132,488,135,488,135,484,135,482,136,481,134,480,134,479,132,470,134,470,131,473,130,473,129,472,129,472,127,470,126,468,124,475,125,479,124,480,121,485,119,485,117,487,116,486,115,488,115,488,114,489,113,488,111,490,109,496,109,498,110,498,111,501,112,497,114,494,114,494,117,497,119,495,120,495,121,490,128,487,128]],"rects":[]},"Asia\/Kashgar":{"offset":8,"pin":[498,104],"country":"CN","polys":[[506,122,503,121,502,118,504,118,504,117,503,116,504,114,502,114,502,112,498,111,497,110,495,109,496,108,496,106,493,106,493,104,495,102,498,102,499,101,502,101,506,99,506,97,507,96,506,93,505,93,509,92,511,93,509,94,515,96,510,95,512,96,511,97,511,99,509,101,509,104,510,104,510,109,511,112,510,112,510,113,509,114,512,118,512,119,510,120,512,120,512,122,510,121,508,123,506,122]],"rects":[]},"Asia\/Kathmandu":{"offset":5.8,"pin":[516,128],"country":"NP","polys":[[516,127,521,128,521,131,517,130,514,128,512,129,506,126,506,124,509,122,516,126,516,127]],"rects":[]},"Asia\/Kolkata":{"offset":5.5,"pin":[522,139],"country":"IN","polys":[[506,158,505,161,505,164,504,164,503,165,504,166,502,166,502,168,500,168,499,167,493,152,491,144,492,142,491,141,492,140,491,140,491,139,491,139,490,141,487,142,484,139,486,139,487,138,485,138,483,137,484,136,483,136,484,135,488,135,485,129,487,127,490,128,495,121,495,120,497,119,494,117,494,114,497,114,502,112,502,114,504,114,503,116,504,117,504,118,502,118,503,121,508,123,506,126,517,130,521,131,521,128,522,127,523,130,529,130,529,129,528,128,530,128,534,125,537,125,537,126,538,126,537,127,539,127,538,128,539,129,537,129,535,130,533,136,531,136,531,140,529,136,528,138,527,136,530,134,525,133,524,131,524,132,522,130,521,132,523,133,521,134,523,135,523,141,522,140,522,141,521,139,519,141,519,142,518,144,515,145,510,150,510,151,506,153,506,158]],"rects":[]},"Asia\/Krasnoyarsk":{"offset":8,"pin":[531,70],"country":"RU","polys":[[537,30,537,37,537,47,537,57,537,67,537,30],[538,20,541,20,538,21,545,21,544,22,543,22,545,23,535,23,533,21,531,21,538,20],[536,18,541,19,538,19,539,20,532,21,528,20,536,18],[538,75,543,76,540,80,541,82,539,83,534,82,533,81,530,80,524,82,524,82,525,81,523,79,521,79,524,76,523,75,523,73,522,73,523,72,522,71,524,70,522,69,524,66,521,65,523,64,522,63,519,62,514,62,515,61,514,60,517,59,514,57,516,55,515,54,517,53,517,52,514,52,514,50,512,50,512,48,510,47,510,46,509,45,511,44,510,43,504,42,507,40,504,38,506,37,502,36,512,38,510,39,510,40,509,41,510,40,510,41,514,42,511,41,513,40,512,39,513,38,507,36,507,35,506,35,507,35,507,34,519,33,520,33,517,32,520,32,517,32,519,32,521,31,519,31,524,30,533,29,530,29,531,29,544,29,542,28,547,28,547,27,552,25,557,26,553,27,559,27,557,28,566,27,568,28,568,28,571,29,571,30,568,29,571,30,570,31,560,34,556,34,558,34,555,35,566,33,566,34,564,34,566,35,565,36,568,37,568,38,569,39,564,40,562,42,556,42,558,43,558,47,555,47,556,48,557,50,558,50,556,52,561,53,557,53,558,55,556,55,558,56,557,57,554,59,553,61,555,61,555,62,554,62,555,64,554,64,550,63,546,66,546,67,545,66,540,66,539,68,540,69,538,70,538,73,536,73,538,75]],"rects":[]},"Asia\/Kuala_Lumpur":{"offset":8,"pin":[548,178],"country":"MY","polys":[[552,180,553,182,551,182,547,179,546,176,545,171,547,172,547,173,549,172,550,174,552,180]],"rects":[]},"Asia\/Kuching":{"offset":8,"pin":[565,182],"country":"MY","polys":[[574,175,577,171,577,171,578,171,579,172,579,173,582,174,580,175,581,176,575,176,573,182,569,182,567,183,565,183,563,182,563,181,566,182,566,182,567,179,570,178,572,176,573,177,574,175,574,176,574,175]],"rects":[]},"Asia\/Kuwait":{"offset":3,"pin":[443,125],"country":"KW","polys":[[444,123,443,123,444,123]],"rects":[]},"Asia\/Macau":{"offset":8,"pin":[571,139],"country":"MO","polys":[[571,139,571,139,571,139]],"rects":[]},"Asia\/Magadan":{"offset":12,"pin":[643,63],"country":"RU","polys":[[650,62,650,63,652,63,644,64,644,64,646,63,641,62,640,63,637,63,636,63,636,62,633,61,635,60,634,58,630,58,623,57,621,55,623,53,621,51,623,50,621,49,623,48,620,47,625,45,624,44,626,44,625,43,628,43,626,42,627,41,624,41,630,37,640,37,642,37,640,38,646,39,658,39,661,40,661,41,663,42,663,43,666,42,667,43,666,45,658,45,657,46,659,47,658,48,660,49,659,50,667,52,668,53,667,53,667,54,666,55,667,56,665,57,666,58,661,60,662,60,661,59,662,58,656,58,650,62]],"rects":[]},"Asia\/Makassar":{"offset":8,"pin":[582,196],"country":"ID","polys":[[577,190,575,192,573,194,573,191,575,187,574,185,573,185,573,183,571,184,574,180,575,176,579,176,579,177,578,178,579,178,578,178,580,180,579,181,581,183,579,183,579,187,576,189,577,190],[588,192,588,192,589,194,587,195,585,192,585,190,584,191,584,197,582,197,583,193,582,192,581,192,581,191,582,187,583,187,583,184,585,182,591,183,593,182,592,184,584,184,584,185,583,186,585,188,586,187,590,186,590,187,586,189,588,192]],"rects":[]},"Asia\/Manila":{"offset":8,"pin":[585,155],"country":"PH","polys":[[592,172,591,171,592,170,590,169,590,170,589,169,587,171,587,170,588,169,590,167,591,168,590,169,593,168,593,166,594,166,594,165,595,166,596,170,595,172,594,170,594,174,594,172,592,172],[589,156,589,157,590,156,591,157,590,157,591,158,591,159,588,156,588,158,587,156,585,157,585,155,584,154,584,155,583,155,583,152,584,152,585,147,588,147,588,150,586,154,587,156,589,156]],"rects":[]},"Asia\/Muscat":{"offset":4,"pin":[464,136],"country":"OM","polys":[[460,148,458,148,457,150,453,151,451,146,457,144,458,140,457,138,458,136,459,136,459,134,461,136,464,137,466,139,464,143,462,143,462,146,461,146,460,148]],"rects":[]},"Asia\/Nicosia":{"offset":2,"pin":[415,113],"country":"CY","polys":[[414,114,413,113,417,112,416,112,416,113,414,114]],"rects":[]},"Asia\/Novokuznetsk":{"offset":7,"pin":[519,75],"country":"RU","polys":[[522,68,524,70,522,71,523,72,522,73,523,73,524,74,523,75,524,76,522,78,520,77,519,76,519,75,515,73,514,70,522,68]],"rects":[]},"Asia\/Novosibirsk":{"offset":7,"pin":[511,72],"country":"RU","polys":[[514,70,515,72,514,74,512,74,510,75,507,73,501,75,499,74,500,73,497,74,497,73,496,70,498,70,497,69,498,68,496,65,499,63,500,60,510,61,512,60,515,61,515,62,519,62,523,64,521,65,524,66,522,68,514,70]],"rects":[]},"Asia\/Omsk":{"offset":7,"pin":[493,72],"country":"RU","polys":[[496,65,498,68,497,69,498,70,496,70,497,73,497,74,493,75,493,74,488,74,488,72,487,72,488,69,489,68,487,67,488,65,489,66,492,66,496,65],[522,78,521,79,523,79,525,81,524,82,524,83,520,84,519,83,516,83,512,80,508,81,507,80,506,81,501,75,507,73,510,75,512,74,516,73,519,75,519,76,520,77,522,78]],"rects":[]},"Asia\/Phnom_Penh":{"offset":7,"pin":[554,161],"country":"KH","polys":[[556,161,556,163,552,163,551,162,550,163,549,157,551,155,556,156,556,155,559,155,559,160,556,161]],"rects":[]},"Asia\/Pontianak":{"offset":7,"pin":[563,185],"country":"ID","polys":[[575,188,572,192,570,191,568,192,567,191,564,191,564,187,562,186,562,182,563,181,565,183,567,183,569,182,572,182,571,184,574,184,573,185,574,185,575,188]],"rects":[]},"Asia\/Pyongyang":{"offset":9,"pin":[595,105],"country":"KP","polys":[[597,107,594,108,592,107,594,105,593,105,594,104,592,104,592,103,595,101,596,99,599,100,599,99,601,99,603,97,604,98,602,99,602,101,598,104,599,106,597,107]],"rects":[]},"Asia\/Qatar":{"offset":3,"pin":[450,133],"country":"QA","polys":[[450,133,449,135,449,133,450,131,450,133]],"rects":[]},"Asia\/Qyzylorda":{"offset":6,"pin":[477,93],"country":"KZ","polys":[[482,77,482,81,482,81,479,84,476,84,474,86,471,84,472,82,471,80,467,78,469,77,468,77,469,76,471,76,469,75,470,75,468,75,469,74,478,73,479,76,478,77,482,77],[478,97,477,95,471,96,468,93,468,91,469,89,467,89,467,90,468,90,466,90,466,91,464,91,469,87,478,90,481,90,481,94,482,95,482,96,479,98,478,97]],"rects":[]},"Asia\/Rangoon":{"offset":6.5,"pin":[537,151],"country":"MM","polys":[[541,154,543,156,544,161,542,164,542,159,541,157,540,151,539,151,538,149,538,151,537,150,536,153,535,152,534,153,535,151,534,152,534,151,533,152,534,149,533,145,533,146,532,145,533,145,532,145,533,145,532,144,531,143,531,144,529,141,531,139,531,136,533,136,535,130,538,129,539,129,538,128,540,126,542,128,542,130,542,132,540,134,540,136,542,135,542,137,544,138,543,139,544,140,545,141,547,141,545,143,541,144,540,147,539,147,542,151,541,154]],"rects":[]},"Asia\/Riyadh":{"offset":3,"pin":[441,134],"country":"SA","polys":[[434,149,433,151,429,144,426,142,425,136,423,135,418,127,417,127,418,125,420,125,424,122,422,120,426,119,429,119,437,125,444,126,445,128,448,130,447,132,449,134,450,134,450,135,452,138,457,138,458,140,457,144,445,147,440,153,439,151,436,149,434,149,434,149]],"rects":[]},"Asia\/Sakhalin":{"offset":11,"pin":[627,88],"country":"RU","polys":[[630,82,631,85,630,84,628,84,627,87,629,90,629,90,627,89,626,91,626,85,627,80,625,77,626,75,628,75,627,73,628,74,629,76,628,79,630,82]],"rects":[]},"Asia\/Samarkand":{"offset":5,"pin":[480,103],"country":"UZ","polys":[[483,105,483,107,482,109,479,108,480,107,472,103,470,100,467,100,467,98,464,97,463,97,464,98,463,98,461,99,461,100,459,100,459,93,464,91,463,94,466,95,468,93,471,96,477,95,479,97,478,99,479,99,480,100,480,102,481,103,481,104,483,105]],"rects":[]},"Asia\/Seoul":{"offset":9,"pin":[597,108],"country":"KR","polys":[[601,113,598,113,598,114,597,114,596,115,596,114,597,111,595,109,597,109,596,107,597,106,600,106,601,108,602,111,601,113]],"rects":[]},"Asia\/Shanghai":{"offset":8,"pin":[586,121],"country":"CN","polys":[[561,124,561,122,564,121,563,119,564,118,563,117,566,117,564,114,565,108,565,107,566,104,568,102,572,102,571,100,573,98,570,99,568,98,566,96,568,95,567,94,567,93,568,92,571,93,580,89,582,90,583,88,580,86,575,87,575,86,577,83,579,83,582,82,582,81,585,78,583,77,585,76,592,75,588,78,589,79,594,79,595,80,592,86,592,85,588,88,590,89,589,89,589,91,587,91,588,92,588,94,589,93,590,96,592,97,593,96,594,101,586,105,587,104,586,104,586,103,588,102,586,101,581,104,579,104,579,105,580,107,581,106,581,108,582,109,585,107,589,108,588,109,584,111,582,113,584,114,585,118,587,120,584,119,587,121,584,123,587,124,586,124,587,124,586,125,586,127,585,127,584,130,582,130,583,131,583,133,582,132,581,135,580,134,579,136,577,137,576,138,573,138,573,139,571,139,571,138,571,139,570,140,568,138,568,137,567,137,568,135,567,133,566,134,566,131,563,132,562,131,563,129,562,129,563,128,563,125,561,124]],"rects":[]},"Asia\/Singapore":{"offset":8,"pin":[552,182],"country":"SG","polys":[[552,182,552,182,552,182]],"rects":[]},"Asia\/Taipei":{"offset":8,"pin":[586,134],"country":"TW","polys":[[584,139,584,136,585,134,586,133,587,133,585,140,584,139]],"rects":[]},"Asia\/Tashkent":{"offset":5,"pin":[485,100],"country":"UZ","polys":[[484,103,484,103,483,104,481,104,480,100,483,101,488,98,486,100,489,101,489,100,492,101,489,102,487,102,487,101,484,103]],"rects":[]},"Asia\/Tbilisi":{"offset":4,"pin":[437,99],"country":"GE","polys":[[433,100,431,100,431,97,428,95,433,96,435,97,438,97,441,100,435,100,433,100]],"rects":[]},"Asia\/Tehran":{"offset":3.5,"pin":[450,112],"country":"IR","polys":[[469,120,470,121,468,124,470,126,472,127,472,129,473,129,473,130,470,131,469,133,461,132,460,129,457,131,454,130,450,128,447,123,446,123,445,122,445,123,444,123,443,121,443,120,442,118,440,117,438,114,440,111,438,111,436,107,437,106,436,104,437,103,440,105,443,103,444,104,443,105,445,106,445,108,451,110,455,109,455,108,460,106,465,108,467,110,469,110,469,113,468,115,468,116,468,117,469,120]],"rects":[]},"Asia\/Thimphu":{"offset":6,"pin":[524,129],"country":"BT","polys":[[529,129,529,130,525,130,523,129,525,127,528,128,529,129]],"rects":[]},"Asia\/Tokyo":{"offset":9,"pin":[622,112],"country":"JP","polys":[[627,93,631,95,633,94,632,96,634,96,630,97,629,99,626,97,623,97,623,98,625,99,622,100,622,97,623,97,623,96,625,96,625,92,627,93],[604,115,606,116,606,117,607,117,605,121,604,121,604,120,604,121,603,120,604,118,603,117,603,118,602,118,602,117,603,117,602,117,604,115],[611,112,615,112,616,108,617,108,616,109,617,109,619,108,622,105,622,102,623,100,624,101,624,100,625,100,626,104,625,106,624,107,623,110,624,112,623,113,622,113,622,112,622,112,620,114,620,113,619,114,616,114,617,114,616,113,616,115,614,116,613,115,613,114,607,114,607,115,604,115,605,114,608,112,611,112]],"rects":[]},"Asia\/Ulaanbaatar":{"offset":8,"pin":[558,87],"country":"MN","polys":[[554,99,546,97,540,97,540,95,541,92,540,89,541,87,541,86,543,86,543,85,539,83,541,82,540,80,542,78,548,79,549,81,551,82,558,82,561,84,564,84,569,83,569,87,567,88,567,90,568,92,567,94,568,95,564,97,559,98,554,99]],"rects":[]},"Asia\/Urumqi":{"offset":8,"pin":[520,95],"country":"CN","polys":[[541,127,537,127,538,126,537,124,534,125,529,128,525,127,523,129,522,127,517,128,510,123,509,122,511,121,512,122,512,121,510,120,512,119,512,118,509,114,510,113,510,112,511,112,510,109,510,104,509,104,509,101,511,99,511,97,512,96,510,95,515,96,509,94,511,93,510,91,511,88,516,88,517,86,521,84,521,85,525,87,527,88,527,92,536,94,537,97,539,97,541,101,539,101,538,103,540,103,539,105,544,107,543,107,544,108,542,111,543,114,542,114,543,115,541,115,539,115,540,116,539,118,541,118,542,122,543,125,542,125,542,127,541,127]],"rects":[]},"Asia\/Vientiane":{"offset":7,"pin":[550,148],"country":"LA","polys":[[557,155,556,156,555,156,555,153,552,147,551,147,550,148,548,148,546,149,547,145,545,145,546,144,545,143,547,141,548,142,548,139,550,140,551,142,553,143,553,143,554,144,552,145,554,147,557,151,559,152,559,155,557,155]],"rects":[]},"Asia\/Vladivostok":{"offset":11,"pin":[607,96],"country":"RU","polys":[[606,93,606,92,609,92,612,87,612,86,605,87,604,85,605,84,606,82,604,80,606,79,609,78,609,77,612,77,612,76,612,75,606,76,606,76,606,75,604,74,609,71,605,71,605,69,606,68,605,67,607,66,606,65,607,66,608,64,606,63,606,62,609,60,608,58,611,58,612,59,614,57,607,54,608,53,608,52,606,50,603,49,609,45,609,44,607,43,610,42,609,41,609,40,607,40,606,39,609,37,609,37,608,37,611,38,622,38,621,37,623,37,621,36,625,36,624,35,637,36,629,37,624,41,627,41,626,42,628,43,625,43,626,44,624,44,625,45,620,47,623,48,621,49,623,50,621,51,623,52,622,53,623,54,622,55,621,56,627,58,634,58,635,60,633,61,636,62,636,63,627,63,613,72,616,73,616,74,618,73,617,75,619,74,619,75,620,73,622,73,625,75,624,76,625,78,623,81,623,84,618,91,610,97,609,97,606,96,604,98,604,97,605,96,605,93,606,93],[620,28,623,29,626,29,625,28,633,30,629,31,622,31,621,32,616,30,617,29,620,28]],"rects":[]},"Asia\/Yakutsk":{"offset":10,"pin":[602,58],"country":"RU","polys":[[605,71,609,71,604,74,606,75,606,76,612,75,612,76,612,77,609,77,609,78,606,79,604,81,606,82,606,83,605,84,599,83,595,77,590,75,585,75,583,77,585,77,585,78,582,81,582,82,579,83,572,82,565,84,560,83,560,82,561,81,560,81,561,79,565,79,568,78,571,77,572,76,571,75,577,73,577,72,575,71,574,69,579,68,579,67,578,66,578,65,582,65,581,63,578,63,578,62,575,61,569,64,568,63,564,64,562,63,565,59,563,59,563,58,564,57,562,56,563,56,563,55,560,54,562,54,561,53,556,52,558,50,557,50,556,48,555,47,558,47,558,43,556,42,562,42,564,40,569,39,568,38,568,37,566,36,565,35,566,35,564,34,566,33,569,33,571,34,575,33,590,35,591,35,590,34,592,33,602,35,601,35,602,36,600,36,602,37,600,37,602,38,601,38,605,40,607,39,607,40,609,40,609,41,610,42,607,43,609,44,609,45,603,49,606,50,608,52,608,53,607,54,614,57,612,59,611,58,608,58,609,60,606,62,606,63,608,64,607,66,606,65,607,66,605,67,606,68,605,69,605,71]],"rects":[]},"Asia\/Yerevan":{"offset":4,"pin":[437,102],"country":"AM","polys":[[438,100,439,102,439,103,441,104,441,105,440,105,439,104,435,103,435,100,438,100]],"rects":[]},"Atlantic\/Azores":{"offset":-1,"pin":[300,107],"country":"PT","polys":[],"rects":[[289,114,301,98]]},"Atlantic\/Bermuda":{"offset":-4,"pin":[224,119],"country":"BM","polys":[],"rects":[[219,124,229,113]]},"Atlantic\/Canary":{"offset":0,"pin":[320,127],"country":"ES","polys":[],"rects":[[310,133,329,120]]},"Atlantic\/Cape_Verde":{"offset":-1,"pin":[304,154],"country":"CV","polys":[],"rects":[[296,160,311,145]]},"Atlantic\/Faroe":{"offset":0,"pin":[337,58],"country":"FO","polys":[],"rects":[[330,64,343,52]]},"Atlantic\/Madeira":{"offset":0,"pin":[317,118],"country":"PT","polys":[],"rects":[[311,128,324,112]]},"Atlantic\/Reykjavik":{"offset":0,"pin":[308,53],"country":"IS","polys":[],"rects":[[305,60,324,43]]},"Atlantic\/South_Georgia":{"offset":-2,"pin":[279,297],"country":"GS","polys":[],"rects":[[269,307,299,295]]},"Atlantic\/St_Helena":{"offset":0,"pin":[339,218],"country":"SH","polys":[],"rects":[[322,268,339,201]]},"Atlantic\/Stanley":{"offset":-3,"pin":[238,291],"country":"FK","polys":[],"rects":[[226,299,243,285]]},"Australia\/Adelaide":{"offset":10.5,"pin":[619,257],"country":"AU","polys":[[613,238,624,238,624,263,622,262,622,260,620,258,622,260,621,259,619,258,619,257,619,255,618,257,616,257,617,257,618,254,618,252,618,253,614,256,614,257,613,256,613,256,613,255,610,251,605,250,601,250,601,238,613,238]],"rects":[]},"Australia\/Brisbane":{"offset":10,"pin":[648,241],"country":"AU","polys":[[642,231,643,231,643,233,643,233,645,234,648,238,648,241,649,243,646,243,644,245,642,244,640,245,624,245,624,238,618,238,618,219,622,221,624,221,626,216,625,213,626,211,625,211,627,207,629,210,630,215,631,214,633,216,634,224,639,227,641,231,642,232,642,231]],"rects":[]},"Australia\/Broken_Hill":{"offset":10.5,"pin":[625,251],"country":"AU","polys":[[624,251,624,250,626,250,626,251,624,251]],"rects":[]},"Australia\/Currie":{"offset":11,"pin":[630,267],"country":"AU","polys":[[630,267,630,267,630,267]],"rects":[]},"Australia\/Darwin":{"offset":9.5,"pin":[604,211],"country":"AU","polys":[[601,216,602,216,602,215,602,214,603,211,604,211,604,210,605,211,605,210,608,210,608,209,607,208,611,210,613,210,614,210,614,210,615,210,614,211,616,209,616,210,615,212,614,212,614,215,612,215,618,219,618,238,601,238,601,216]],"rects":[]},"Australia\/Eucla":{"offset":8.8,"pin":[601,250],"country":"AU","polys":[[601,249,600,251,594,252,594,249,601,249]],"rects":[]},"Australia\/Hobart":{"offset":11,"pin":[636,273],"country":"AU","polys":[[638,269,638,274,636,273,635,275,633,273,632,272,633,272,631,269,632,269,636,270,635,269,638,269]],"rects":[]},"Australia\/Lindeman":{"offset":10,"pin":[640,227],"country":"AU","polys":[[640,226,639,226,640,226]],"rects":[]},"Australia\/Lord_Howe":{"offset":11,"pin":[659,250],"country":"AU","polys":[[659,250,659,250,659,250]],"rects":[]},"Australia\/Melbourne":{"offset":11,"pin":[632,263],"country":"AU","polys":[[627,256,629,257,631,259,638,259,638,261,642,262,637,263,634,265,635,265,633,264,631,264,632,263,632,263,629,265,625,264,624,263,624,255,626,255,627,256]],"rects":[]},"Australia\/Perth":{"offset":8,"pin":[575,251],"country":"AU","polys":[[594,216,593,215,594,214,595,215,595,214,596,214,597,213,599,215,599,217,599,216,600,217,600,215,601,216,601,249,594,249,594,252,592,253,590,255,583,255,579,257,576,257,574,255,574,254,575,253,575,250,573,245,570,239,571,240,571,237,571,239,572,239,570,235,572,230,572,230,572,231,573,230,577,227,579,228,585,225,588,222,588,220,589,219,590,221,591,220,590,218,593,219,592,219,593,217,592,218,592,217,592,216,594,217,593,216,594,216]],"rects":[]},"Australia\/Sydney":{"offset":11,"pin":[644,255],"country":"AU","polys":[[643,257,642,258,642,262,638,261,638,259,631,259,629,257,624,255,624,251,626,251,626,250,624,250,624,245,640,245,642,244,644,245,646,243,649,243,647,250,644,254,643,254,644,254,643,257]],"rects":[]},"Europe\/Amsterdam":{"offset":1,"pin":[360,77],"country":"NL","polys":[[362,79,362,81,360,79,357,79,359,79,358,78,359,77,361,77,360,76,361,75,364,76,363,77,364,77,363,78,362,79]],"rects":[]},"Europe\/Andorra":{"offset":1,"pin":[353,98],"country":"AD","polys":[[353,98,353,98,353,98]],"rects":[]},"Europe\/Athens":{"offset":2,"pin":[396,107],"country":"GR","polys":[[395,107,396,108,394,108,395,110,394,109,394,110,393,109,392,109,391,107,392,106,395,107,391,106,390,105,391,105,389,103,391,101,402,99,401,101,396,101,397,102,396,102,397,103,394,102,395,104,395,104,395,105,394,105,397,106,397,108,395,107]],"rects":[]},"Europe\/Belgrade":{"offset":1,"pin":[390,93],"country":"RS","polys":[[392,93,394,93,393,95,395,96,394,98,390,99,389,97,390,97,387,96,388,94,387,94,387,92,388,92,387,91,389,90,392,93]],"rects":[]},"Europe\/Bucharest":{"offset":2,"pin":[401,94],"country":"RO","polys":[[405,92,408,92,406,95,403,94,397,95,394,95,394,94,394,93,392,93,392,92,389,90,391,90,393,87,395,86,398,87,402,86,405,88,405,92]],"rects":[]},"Europe\/Berlin":{"offset":1,"pin":[376,77],"country":"DE","polys":[[364,84,362,83,362,78,364,78,363,77,364,75,367,75,367,74,369,75,367,74,367,73,368,73,366,72,366,72,369,72,370,73,372,73,371,74,374,73,378,75,377,76,378,77,379,80,374,82,377,85,375,86,375,87,365,87,366,84,364,84]],"rects":[]},"Europe\/Budapest":{"offset":1,"pin":[387,87],"country":"HU","polys":[[390,90,385,91,381,89,382,88,382,87,383,86,386,87,391,85,394,86,390,90]],"rects":[]},"Europe\/Chisinau":{"offset":2,"pin":[406,88],"country":"MD","polys":[[408,89,406,89,406,90,405,92,405,88,402,86,404,85,407,86,408,89]],"rects":[]},"Europe\/Bratislava":{"offset":1,"pin":[383,86],"country":"SK","polys":[[383,86,383,85,386,83,394,84,393,86,390,85,386,87,383,86]],"rects":[]},"Europe\/Brussels":{"offset":1,"pin":[358,81],"country":"BE","polys":[[356,81,355,80,360,79,362,82,361,83,359,82,358,82,356,81]],"rects":[]},"Europe\/Copenhagen":{"offset":1,"pin":[374,71],"country":"DK","polys":[[369,71,369,72,367,72,367,71,366,71,366,69,371,66,370,68,371,69,369,71]],"rects":[]},"Europe\/Dublin":{"offset":0,"pin":[338,75],"country":"IE","polys":[[337,74,338,74,338,78,332,79,330,79,331,78,330,78,331,77,333,77,331,77,333,76,330,75,331,74,330,73,333,74,334,73,333,73,336,71,337,71,334,73,337,74]],"rects":[]},"Europe\/Gibraltar":{"offset":1,"pin":[340,111],"country":"GI","polys":[[340,111,340,111,340,111]],"rects":[]},"Europe\/Guernsey":{"offset":0,"pin":[345,83],"country":"GG","polys":[[345,83,345,83,345,83]],"rects":[]},"Europe\/Helsinki":{"offset":2,"pin":[399,61],"country":"FI","polys":[[401,61,395,62,395,61,392,60,392,58,391,56,392,55,393,55,394,54,400,51,399,50,396,49,397,48,396,46,396,45,390,43,392,43,394,44,398,44,401,41,404,41,407,42,405,44,408,46,406,47,409,50,408,51,409,53,408,54,411,56,404,61,401,61]],"rects":[]},"Europe\/Isle_of_Man":{"offset":0,"pin":[341,74],"country":"IM","polys":[[341,73,341,74,341,73]],"rects":[]},"Europe\/Istanbul":{"offset":2,"pin":[406,101],"country":"TR","polys":[[421,109,420,111,420,110,420,109,414,111,410,109,408,111,405,109,403,110,405,109,403,109,404,108,403,108,403,107,401,106,401,105,403,106,402,106,402,104,401,104,401,103,402,102,408,101,407,100,411,101,413,99,418,98,421,100,425,101,433,100,435,101,435,103,437,103,436,104,437,106,436,107,437,108,436,109,433,108,426,110,421,109]],"rects":[]},"Europe\/Jersey":{"offset":0,"pin":[346,84],"country":"JE","polys":[[346,84,346,84,346,84]],"rects":[]},"Europe\/Kaliningrad":{"offset":3,"pin":[390,73],"country":"RU","polys":[[391,71,390,72,394,72,394,73,388,73,390,73,389,73,389,72,391,71]],"rects":[]},"Europe\/Kiev":{"offset":2,"pin":[409,81],"country":"UA","polys":[[426,87,424,88,422,89,422,87,421,87,418,86,418,87,417,87,418,90,417,90,413,90,411,89,413,89,411,89,408,91,408,92,406,92,405,92,406,89,409,90,407,86,404,85,398,87,395,84,394,83,397,81,396,79,397,78,409,80,410,78,416,77,417,79,416,79,417,80,419,80,419,81,423,81,424,82,428,83,427,84,428,85,427,85,427,87,426,87]],"rects":[]},"Europe\/Lisbon":{"offset":0,"pin":[332,105],"country":"PT","polys":[[335,108,335,109,333,109,333,106,332,106,333,105,332,105,333,101,333,99,334,98,334,99,337,99,338,100,337,101,336,103,335,103,337,106,335,108]],"rects":[]},"Europe\/Ljubljana":{"offset":1,"pin":[378,90],"country":"SI","polys":[[381,89,382,89,380,90,380,92,376,91,377,91,376,90,377,89,381,89]],"rects":[]},"Europe\/London":{"offset":0,"pin":[350,79],"country":"GB","polys":[[345,79,343,79,340,78,342,77,342,76,341,76,342,76,345,75,344,75,345,73,343,73,344,72,340,72,341,71,341,69,339,70,339,71,339,69,340,68,338,68,340,68,339,66,340,66,339,66,340,65,340,64,344,64,341,66,343,66,341,67,346,67,345,69,343,69,345,69,342,70,346,70,348,73,350,74,350,75,349,75,350,75,350,76,353,77,353,78,351,79,353,79,352,80,343,81,343,82,339,82,342,80,344,80,345,79,345,79]],"rects":[]},"Europe\/Luxembourg":{"offset":1,"pin":[362,83],"country":"LU","polys":[[362,83,361,83,362,82,363,83,362,83]],"rects":[]},"Europe\/Madrid":{"offset":1,"pin":[343,102],"country":"ES","polys":[[349,107,346,109,341,110,338,111,337,110,338,109,338,109,335,108,337,106,335,103,336,103,337,101,338,100,337,99,334,99,334,98,333,99,333,98,332,97,335,95,347,96,349,97,356,98,356,99,351,101,352,101,349,104,350,105,349,107]],"rects":[]},"Europe\/Malta":{"offset":1,"pin":[378,111],"country":"MT","polys":[[378,111,378,111,378,111]],"rects":[]},"Europe\/Mariehamn":{"offset":2,"pin":[389,61],"country":"AX","polys":[[390,61,390,61,390,61]],"rects":[]},"Europe\/Minsk":{"offset":3,"pin":[404,74],"country":"BY","polys":[[408,79,399,78,396,79,396,78,395,78,397,77,396,74,400,74,400,72,402,71,401,71,402,71,405,70,409,70,410,71,410,72,414,75,411,76,412,78,410,78,409,80,408,79]],"rects":[]},"Europe\/Monaco":{"offset":1,"pin":[364,95],"country":"MC","polys":[[364,95,364,95,364,95]],"rects":[]},"Europe\/Moscow":{"offset":4,"pin":[423,70],"country":"RU","polys":[[456,34,460,35,457,36,458,36,457,36,458,37,457,37,462,40,454,39,455,39,450,37,454,36,452,36,454,36,452,35,456,34],[467,29,481,27,484,27,483,28,469,30,466,31,466,32,465,31,465,32,463,32,464,32,461,33,463,33,460,33,462,34,460,33,461,34,460,34,455,34,459,34,454,33,460,33,457,32,461,31,459,31,460,31,459,30,467,29],[441,93,441,94,443,95,442,97,444,99,443,100,438,97,435,98,433,96,428,96,421,92,424,90,423,89,426,88,424,88,424,87,427,87,428,86,427,85,428,85,427,84,428,83,424,82,423,81,419,81,419,80,417,80,416,79,417,79,416,77,412,78,411,76,414,75,410,72,410,71,405,70,404,67,403,67,404,66,403,65,405,63,405,62,409,62,406,61,406,60,404,61,411,56,408,54,409,53,408,51,409,50,406,47,408,46,406,45,406,43,405,43,412,41,414,42,412,42,413,42,413,42,415,42,414,43,420,43,430,46,430,48,425,49,412,47,416,48,414,49,418,50,417,51,418,52,418,52,423,54,424,53,421,52,429,52,427,50,432,48,436,50,437,47,435,47,436,45,434,44,439,44,441,46,437,47,441,48,443,48,443,46,445,46,444,45,452,45,454,43,456,43,454,43,455,44,453,45,465,43,466,44,465,44,466,44,469,44,467,42,468,41,476,43,475,43,478,44,477,45,479,45,478,46,479,46,466,52,465,58,460,59,457,60,451,60,452,61,447,62,447,63,444,62,445,61,443,60,442,59,440,61,441,61,441,63,443,64,440,66,443,66,441,67,441,68,446,67,450,70,450,70,452,70,453,69,453,70,454,69,453,70,455,71,453,72,454,72,454,74,450,73,447,73,447,74,443,75,444,77,434,77,433,79,433,80,430,81,432,83,432,84,433,85,432,86,434,87,436,87,436,86,441,87,440,88,442,89,440,90,442,90,441,91,443,92,441,93]],"rects":[]},"Europe\/Oslo":{"offset":1,"pin":[371,62],"country":"NO","polys":[[366,66,363,66,363,65,361,64,361,64,363,64,361,64,363,63,360,63,364,61,361,62,361,61,360,61,361,60,360,61,360,60,361,60,360,59,364,60,365,59,360,59,360,59,361,59,360,59,361,59,360,58,363,58,360,57,362,57,362,57,363,57,364,57,362,56,366,56,364,56,364,55,367,56,365,55,367,56,366,55,372,54,372,54,372,53,370,54,369,54,374,51,372,52,375,51,373,51,375,50,374,50,375,49,376,50,375,49,378,49,375,49,376,49,375,48,377,48,376,48,377,48,376,47,380,47,378,47,381,46,379,46,381,45,380,45,381,45,382,46,381,45,383,45,381,45,385,44,382,44,384,44,384,44,385,44,384,43,385,42,388,43,387,42,388,41,388,42,390,41,389,43,391,42,390,42,391,41,393,42,392,41,393,41,391,41,392,40,396,41,395,41,398,40,397,39,398,39,400,39,399,40,399,41,402,39,401,40,403,40,404,39,406,39,404,39,405,40,404,40,406,39,410,40,406,41,408,41,407,42,410,42,406,43,407,42,404,41,400,42,400,43,398,44,394,44,391,43,389,43,390,44,389,45,386,44,385,45,383,45,380,49,378,49,378,51,377,52,377,52,377,53,374,54,374,58,375,59,374,60,375,61,373,62,373,64,371,63,370,62,370,64,369,63,366,66]],"rects":[]},"Europe\/Paris":{"offset":1,"pin":[355,85],"country":"FR","polys":[[358,96,356,96,356,98,355,98,347,96,347,96,348,93,348,91,349,92,348,91,348,90,346,89,346,88,345,87,342,87,341,86,342,86,341,85,344,85,345,85,347,85,346,83,348,84,351,83,350,83,353,82,353,80,355,80,358,82,359,82,361,83,366,84,365,87,364,87,362,90,363,90,364,92,363,92,364,94,365,94,365,95,362,97,358,96]],"rects":[]},"Europe\/Podgorica":{"offset":1,"pin":[387,98],"country":"ME","polys":[[387,96,390,97,388,97,388,99,386,98,387,96]],"rects":[]},"Europe\/Prague":{"offset":1,"pin":[378,82],"country":"CZ","polys":[[379,84,377,85,375,83,374,82,380,80,382,81,382,82,384,82,387,83,383,85,379,84]],"rects":[]},"Europe\/Riga":{"offset":2,"pin":[397,68],"country":"LV","polys":[[393,67,396,68,397,67,397,66,399,66,404,67,405,69,402,71,398,69,391,70,391,68,393,67]],"rects":[]},"Europe\/Rome":{"offset":1,"pin":[374,99],"country":"IT","polys":[[382,103,382,103,383,105,381,107,382,105,380,103,372,98,369,94,367,94,365,95,365,94,364,94,363,92,364,92,363,91,366,89,368,91,368,89,370,90,370,89,374,88,377,89,376,90,377,91,374,92,374,93,374,94,376,95,379,98,381,99,381,100,386,103,386,103,383,102,382,103]],"rects":[]},"Europe\/Samara":{"offset":4,"pin":[448,76],"country":"RU","polys":[[447,73,452,73,451,73,451,76,449,79,444,77,444,76,443,75,447,74,447,73],[456,69,454,70,454,69,453,70,453,69,452,70,450,70,449,69,450,68,449,67,451,67,451,65,455,65,456,68,455,69,456,69]],"rects":[]},"Europe\/San_Marino":{"offset":1,"pin":[374,95],"country":"SM","polys":[[374,95,374,95,374,95]],"rects":[]},"Europe\/Sarajevo":{"offset":1,"pin":[386,95],"country":"BA","polys":[[381,93,388,93,387,94,388,94,387,95,388,95,387,96,386,98,384,97,381,93]],"rects":[]},"Europe\/Simferopol":{"offset":2,"pin":[416,93],"country":"UA","polys":[[418,90,419,92,421,92,416,94,414,92,415,91,413,92,416,91,415,90,418,90]],"rects":[]},"Europe\/Skopje":{"offset":1,"pin":[392,99],"country":"MK","polys":[[393,98,395,99,394,100,390,101,390,100,390,99,393,98]],"rects":[]},"Europe\/Sofia":{"offset":2,"pin":[395,97],"country":"BG","polys":[[404,97,403,98,405,99,402,99,401,100,395,100,393,98,395,96,393,95,394,94,395,95,399,95,403,94,406,95,404,97]],"rects":[]},"Europe\/Stockholm":{"offset":1,"pin":[385,63],"country":"SE","polys":[[374,69,375,69,373,67,373,65,372,65,372,64,373,64,373,62,375,61,374,60,375,59,374,58,373,55,375,53,377,53,377,52,378,51,378,49,380,49,382,47,381,46,384,45,385,45,385,44,389,44,389,43,396,45,396,46,397,48,396,49,397,50,392,50,393,50,391,51,392,51,391,52,392,53,390,54,385,56,384,55,385,56,384,57,384,57,383,58,383,60,387,62,385,63,386,63,385,64,384,63,384,64,381,64,383,65,382,65,383,65,382,66,383,67,381,69,379,70,378,71,376,71,375,71,375,71,374,69]],"rects":[]},"Europe\/Tallinn":{"offset":2,"pin":[398,63],"country":"EE","polys":[[397,63,400,62,405,63,403,64,404,66,402,67,399,66,397,66,398,65,396,65,396,63,397,63]],"rects":[]},"Europe\/Tirane":{"offset":1,"pin":[389,100],"country":"AL","polys":[[389,103,388,102,388,99,387,98,388,97,390,98,390,100,391,101,389,103]],"rects":[]},"Europe\/Uzhgorod":{"offset":2,"pin":[393,85],"country":"UA","polys":[[395,84,398,86,395,86,393,86,395,84]],"rects":[]},"Europe\/Vaduz":{"offset":1,"pin":[369,88],"country":"LI","polys":[[369,88,368,88,369,88]],"rects":[]},"Europe\/Vatican":{"offset":1,"pin":[374,99],"country":"VA","polys":[[374,99,374,99,374,99]],"rects":[]},"Europe\/Vienna":{"offset":1,"pin":[382,86],"country":"AT","polys":[[369,87,375,87,375,86,379,84,383,85,383,86,382,87,382,88,381,89,378,90,374,89,374,88,370,89,369,87]],"rects":[]},"Europe\/Vilnius":{"offset":2,"pin":[399,73],"country":"LT","polys":[[391,70,398,69,402,71,400,72,400,74,396,74,394,73,394,72,391,71,391,70]],"rects":[]},"Europe\/Volgograd":{"offset":4,"pin":[436,85],"country":"RU","polys":[[441,85,442,87,445,88,445,89,444,89,446,90,445,91,444,91,444,91,441,91,442,90,440,90,442,89,440,88,441,87,440,87,439,86,436,86,436,87,435,87,432,86,433,85,432,84,432,83,430,81,433,80,433,79,434,77,444,76,449,78,448,79,444,81,445,82,442,82,441,85],[444,60,445,61,444,62,447,63,447,62,449,62,454,61,453,63,455,64,455,65,451,65,451,67,449,67,450,68,450,70,446,67,441,68,441,67,443,66,440,66,443,64,441,63,441,61,440,61,442,59,444,60]],"rects":[]},"Europe\/Warsaw":{"offset":1,"pin":[391,78],"country":"PL","polys":[[396,82,394,83,395,84,392,83,387,83,384,82,382,82,382,81,379,80,378,77,377,76,378,75,385,72,388,73,388,74,395,73,397,76,395,78,397,80,396,82]],"rects":[]},"Europe\/Zagreb":{"offset":1,"pin":[381,91],"country":"HR","polys":[[387,93,381,92,384,97,381,96,378,92,377,93,376,92,380,92,380,90,382,89,385,91,387,91,388,92,387,93]],"rects":[]},"Europe\/Zaporozhye":{"offset":2,"pin":[418,87],"country":"UA","polys":[[417,87,418,87,418,86,419,86,422,87,422,89,418,90,419,90,417,87]],"rects":[]},"Europe\/Zurich":{"offset":1,"pin":[367,88],"country":"CH","polys":[[362,90,362,90,364,87,367,87,369,87,368,88,370,89,370,90,368,89,368,91,366,89,364,91,363,90,362,90]],"rects":[]},"Indian\/Antananarivo":{"offset":3,"pin":[442,224],"country":"MG","polys":[],"rects":[[434,237,447,210]]},"Indian\/Chagos":{"offset":6,"pin":[491,200],"country":"IO","polys":[],"rects":[[484,205,496,191]]},"Indian\/Christmas":{"offset":7,"pin":[556,206],"country":"CX","polys":[],"rects":[[550,212,561,201]]},"Indian\/Cocos":{"offset":6.5,"pin":[538,210],"country":"CC","polys":[],"rects":[[533,215,543,204]]},"Indian\/Comoro":{"offset":3,"pin":[434,209],"country":"KM","polys":[],"rects":[[429,216,442,203]]},"Indian\/Kerguelen":{"offset":5,"pin":[487,286],"country":"TF","polys":[],"rects":[[448,288,501,263]]},"Indian\/Mahe":{"offset":4,"pin":[458,195],"country":"SC","polys":[],"rects":[[440,206,459,193]]},"Indian\/Maldives":{"offset":5,"pin":[493,176],"country":"MV","polys":[],"rects":[[486,186,498,170]]},"Indian\/Mauritius":{"offset":4,"pin":[462,226],"country":"MU","polys":[],"rects":[[460,227,473,206]]},"Indian\/Mayotte":{"offset":3,"pin":[438,211],"country":"YT","polys":[],"rects":[[433,217,443,206]]},"Indian\/Reunion":{"offset":4,"pin":[458,228],"country":"RE","polys":[],"rects":[[452,234,464,223]]},"Pacific\/Apia":{"offset":14,"pin":[16,213],"country":"WS","polys":[],"rects":[[9,219,22,208]]},"Pacific\/Auckland":{"offset":13,"pin":[690,261],"country":"NZ","polys":[[679,281,674,279,677,275,682,273,686,268,687,270,689,269,688,270,689,270,689,271,686,274,687,275,683,276,682,279,679,281],[693,269,691,270,690,270,691,268,688,266,689,265,690,263,689,260,689,260,688,260,686,256,689,257,690,261,691,261,691,260,693,263,697,262,696,265,694,266,693,269]],"rects":[]},"Pacific\/Chatham":{"offset":13.8,"pin":[7,275],"country":"NZ","polys":[],"rects":[[1,281,13,270]]},"Pacific\/Chuuk":{"offset":10,"pin":[645,170],"country":"FM","polys":[],"rects":[[618,174,649,164]]},"Pacific\/Easter":{"offset":-5,"pin":[137,241],"country":"CL","polys":[],"rects":[[132,246,143,236]]},"Pacific\/Enderbury":{"offset":13,"pin":[17,191],"country":"KI","polys":[],"rects":[[6,200,23,186]]},"Pacific\/Fakaofo":{"offset":13,"pin":[17,204],"country":"TK","polys":[],"rects":[[10,209,22,198]]},"Pacific\/Efate":{"offset":11,"pin":[677,221],"country":"VU","polys":[],"rects":[[669,227,686,212]]},"Pacific\/Fiji":{"offset":13,"pin":[697,222],"country":"FJ","polys":[[2,220,2,221,2,220]],"rects":[]},"Pacific\/Funafuti":{"offset":12,"pin":[698,203],"country":"TV","polys":[],"rects":[[687,209,705,192]]},"Pacific\/Galapagos":{"offset":-6,"pin":[176,187],"country":"EC","polys":[],"rects":[[166,193,181,177]]},"Pacific\/Gambier":{"offset":-9,"pin":[88,233],"country":"PF","polys":[],"rects":[[79,238,93,224]]},"Pacific\/Kwajalein":{"offset":12,"pin":[675,166],"country":"MH","polys":[],"rects":[[669,172,681,161]]},"Pacific\/Guadalcanal":{"offset":11,"pin":[662,205],"country":"SB","polys":[],"rects":[[652,210,678,195]]},"Pacific\/Guam":{"offset":10,"pin":[631,157],"country":"GU","polys":[],"rects":[[626,163,637,152]]},"Pacific\/Honolulu":{"offset":-10,"pin":[43,141],"country":"US","polys":[],"rects":[[12,146,49,131]]},"Pacific\/Johnston":{"offset":-10,"pin":[20,151],"country":"UM","polys":[],"rects":[[15,156,25,146]]},"Pacific\/Kiritimati":{"offset":14,"pin":[44,181],"country":"KI","polys":[],"rects":[[37,209,58,175]]},"Pacific\/Kosrae":{"offset":11,"pin":[667,174],"country":"FM","polys":[],"rects":[[662,179,672,169]]},"Pacific\/Majuro":{"offset":12,"pin":[683,170],"country":"MH","polys":[],"rects":[[663,176,685,155]]},"Pacific\/Midway":{"offset":-11,"pin":[5,127],"country":"UM","polys":[],"rects":[[-2,132,10,122]]},"Pacific\/Marquesas":{"offset":-9.5,"pin":[79,204],"country":"PF","polys":[],"rects":[[71,212,86,196]]},"Pacific\/Nauru":{"offset":12,"pin":[675,186],"country":"NR","polys":[],"rects":[[670,191,680,181]]},"Pacific\/Niue":{"offset":-11,"pin":[20,224],"country":"NU","polys":[],"rects":[[15,229,25,219]]},"Pacific\/Norfolk":{"offset":11.5,"pin":[677,245],"country":"NF","polys":[],"rects":[[672,250,682,240]]},"Pacific\/Noumea":{"offset":11,"pin":[674,231],"country":"NC","polys":[],"rects":[[658,237,685,219]]},"Pacific\/Pago_Pago":{"offset":-11,"pin":[18,214],"country":"AS","polys":[],"rects":[[12,220,26,203]]},"Pacific\/Palau":{"offset":9,"pin":[611,170],"country":"PW","polys":[],"rects":[[600,179,617,168]]},"Pacific\/Pitcairn":{"offset":-8,"pin":[97,237],"country":"PN","polys":[],"rects":[[96,242,107,229]]},"Pacific\/Pohnpei":{"offset":11,"pin":[658,171],"country":"FM","polys":[],"rects":[[651,178,668,165]]},"Pacific\/Port_Moresby":{"offset":10,"pin":[636,205],"country":"PG","polys":[],"rects":[[626,209,660,187]]},"Pacific\/Rarotonga":{"offset":-10,"pin":[39,229],"country":"CK","polys":[],"rects":[[27,230,44,203]]},"Pacific\/Saipan":{"offset":10,"pin":[633,154],"country":"MP","polys":[],"rects":[[627,156,639,143]]},"Pacific\/Tahiti":{"offset":-10,"pin":[59,221],"country":"PF","polys":[],"rects":[[49,242,85,214]]},"Pacific\/Tarawa":{"offset":12,"pin":[686,182],"country":"KI","polys":[],"rects":[[680,190,694,178]]},"Pacific\/Tongatapu":{"offset":13,"pin":[9,229],"country":"TO","polys":[],"rects":[[2,231,17,217]]},"Pacific\/Wake":{"offset":12,"pin":[674,145],"country":"UM","polys":[],"rects":[[669,150,679,140]]},"Pacific\/Wallis":{"offset":12,"pin":[7,212],"country":"WF","polys":[],"rects":[[-2,220,13,207]]}}';

  __selected_layout = "cn";

  __selected_layout_item = null;

  __selected_variant_item = null;

  __selected_use_uefi = DCore.Installer.system_support_efi();

  __selected_timezone = DCore.Installer.get_timezone_local();

  if (__selected_timezone == null) {
    __selected_timezone = "UTC";
  }

  __selected_username = null;

  __selected_hostname = null;

  __selected_password = null;

  __selected_locale = DCore.Installer.get_current_locale();

  sync_installer_conf = function() {
    var layout, variant;
    console.log("[conf.coffee] sync_installer_conf()");
    DCore.Installer.record_accounts_info(__selected_username, __selected_hostname, __selected_password);
    DCore.Installer.record_timezone_info(__selected_timezone);
    DCore.Installer.record_locale_info(__selected_locale);
    DCore.Installer.record_bootloader_info(__selected_bootloader, __selected_use_uefi);
    if (__selected_layout.indexOf(",") !== -1) {
      layout = __selected_layout.split(",")[0];
      variant = __selected_layout.split(",")[1];
    } else {
      layout = __selected_layout;
      variant = null;
    }
    DCore.Installer.record_keyboard_layout_info(layout, variant);
    record_mount_points();
    if (__selected_mode === "simple") {
      return DCore.Installer.record_simple_mode_info(true);
    } else {
      return DCore.Installer.record_simple_mode_info(false);
    }
  };

  record_mount_points = function() {
    var disk, error, j, len1, part, results;
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      results.push((function() {
        var error1, len2, m, ref, results1;
        ref = v_disk_info[disk]["partitions"];
        results1 = [];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          if (v_part_info[part]["fs"] === "swap") {
            v_part_info[part]["mp"] = "swap";
          }
          if ((v_part_info[part]["mp"] != null) && v_part_info[part]["mp"] !== "unused") {
            try {
              DCore.Installer.record_mountpoint_info(part, v_part_info[part]["mp"]);
              if (v_part_info[part]["mp"] === "/") {
                results1.push(DCore.Installer.record_root_disk_info(disk));
              } else {
                results1.push(void 0);
              }
            } catch (error1) {
              error = error1;
              results1.push(console.error("[conf.coffee] record_mount_points() error: ", error));
            }
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  try_removed_start_install = function() {
    var callback;
    console.log("[conf.coffee] try_removed_start_install() partition mode: ", __selected_mode);
    if (progress_page == null) {
      progress_page = new Progress("progress");
    }
    pc.switch_page(progress_page);
    callback = function() {
      if (__selected_mode === "simple") {
        undo_part_table_info();
        auto_simple_partition(__selected_item.id, "part");
      }
      do_partition();
      console.log("[conf.coffee] try_removed_start_install() end of do_partition()");
      sync_installer_conf();
      return DCore.Installer.start_install();
    };
    return setTimeout(callback, 1000);
  };

  Dialog = (function(superClass) {
    extend(Dialog, superClass);

    function Dialog(id1, with_cancel, ok_cb1, cancel_cb1) {
      this.id = id1;
      this.with_cancel = with_cancel;
      this.ok_cb = ok_cb1;
      this.cancel_cb = cancel_cb1;
      Dialog.__super__.constructor.apply(this, arguments);
      this.title = create_element("div", "DialogTitle", this.element);
      this.title_txt = create_element("div", "DialogTxt", this.title);
      this.title_close = create_element("div", "DialogClose", this.title);
      this.title_close.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.hide_dialog();
        };
      })(this));
      this.content = create_element("div", "DialogContent", this.element);
      this.foot = create_element("div", "DialogBtn", this.element);
      this.ok = create_element("div", "DialogOKButton", this.foot);
      this.ok.addEventListener("click", (function(_this) {
        return function(e) {
          _this.hide_dialog();
          return typeof _this.ok_cb === "function" ? _this.ok_cb() : void 0;
        };
      })(this));
      if (this.with_cancel) {
        this.cancel = create_element("div", "DialogCancelButton", this.foot);
        this.cancel.addEventListener("click", (function(_this) {
          return function(e) {
            _this.hide_dialog();
            return typeof _this.cancel_cb === "function" ? _this.cancel_cb() : void 0;
          };
        })(this));
      } else {
        this.ok.setAttribute("style", "margin:31px 145px 0 0");
      }
      this.set_button_text();
      this.show_dialog();
      if (this.with_cancel) {
        this.foot.addEventListener('keyup', (function(_this) {
          return function(e) {
            var code;
            code = e.keyCode;
            if (code === KEYCODE.LEFT_ARROW) {
              return _this.cancel.focus();
            } else if (code === KEYCODE.RIGHT_ARROW) {
              return _this.ok.focus();
            }
          };
        })(this));
      }
    }

    Dialog.prototype.show_at = function(parent) {
      return parent.appendChild(this.element);
    };

    Dialog.prototype.show_dialog = function() {
      var callback, el, j, len1;
      __in_model = true;
      __board.setAttribute("style", "display:block");
      for (j = 0, len1 = tabEnableElements.length; j < len1; j++) {
        el = tabEnableElements[j];
        el.setAttribute("tabindex", "-1");
      }
      enable_tab(this.title_close);
      enable_tab(this.ok);
      if (this.cancel) {
        enable_tab(this.cancel);
      }
      callback = function() {
        var cancelButton, okButton;
        cancelButton = document.querySelector(".DialogCancelButton");
        if (cancelButton) {
          return cancelButton.focus();
        } else {
          okButton = document.querySelector(".DialogOKButton");
          if (okButton) {
            return okButton.focus();
          }
        }
      };
      return setTimeout(callback, 50);
    };

    Dialog.prototype.hide_dialog = function() {
      var el, j, len1;
      __in_model = false;
      this.destroy();
      for (j = 0, len1 = tabEnableElements.length; j < len1; j++) {
        el = tabEnableElements[j];
        el.setAttribute("tabindex", "0");
      }
      return __board.setAttribute("style", "display:none");
    };

    Dialog.prototype.set_button_text = function(ok_text, cancel_text) {
      var ref, ref1;
      this.ok_text = ok_text != null ? ok_text : _("OK");
      this.cancel_text = cancel_text != null ? cancel_text : _("Cancel");
      if ((ref = this.ok) != null) {
        ref.innerText = this.ok_text;
      }
      return (ref1 = this.cancel) != null ? ref1.innerText = this.cancel_text : void 0;
    };

    return Dialog;

  })(Widget);

  ExitDialog = (function(superClass) {
    extend(ExitDialog, superClass);

    function ExitDialog(exit_installer_cb) {
      ExitDialog.__super__.constructor.call(this, "ExitDialog", true, exit_installer_cb);
      this.add_css_class("DialogCommon");
      this.exit_tips = create_element("div", "dialog_tips", this.content);
      this.exit_tips.innerText = _("Are you sure to exit from installation?");
    }

    return ExitDialog;

  })(Dialog);

  PromptDialog = (function(superClass) {
    extend(PromptDialog, superClass);

    function PromptDialog(title, content, ok_cb, cancel_cb) {
      PromptDialog.__super__.constructor.call(this, "PromptDialog", true, ok_cb, cancel_cb);
      this.add_css_class("DialogCommon");
      this.title_txt.innerText = title;
      this.root_tips = create_element("div", "dialog_tips", this.content);
      this.root_tips.innerText = content;
    }

    return PromptDialog;

  })(Dialog);

  MessageDialog = (function(superClass) {
    extend(MessageDialog, superClass);

    function MessageDialog(title, content, cancel_cb) {
      MessageDialog.__super__.constructor.call(this, "MessageDialog", false, cancel_cb);
      this.add_css_class("DialogCommon");
      this.title_txt.innerText = title;
      this.root_tips = create_element("div", "dialog_tips", this.content);
      this.root_tips.innerText = content;
    }

    return MessageDialog;

  })(Dialog);

  DeletePartDialog = (function(superClass) {
    extend(DeletePartDialog, superClass);

    function DeletePartDialog(id1, partid1) {
      this.id = id1;
      this.partid = partid1;
      DeletePartDialog.__super__.constructor.call(this, this.id, true, this.delete_part_cb);
      this.add_css_class("DialogCommon");
      this.title_txt.innerText = _("Delete Partition");
      this.delete_tips = create_element("div", "dialog_tips", this.content);
      this.delete_tips.innerText = _("Are you sure you want to delete this partition?");
    }

    DeletePartDialog.prototype.delete_part_cb = function() {
      var ref, ref1, ref2, ref3, remain_part;
      remain_part = delete_part(this.partid);
      if ((ref = Widget.look_up("part_table")) != null) {
        ref.fill_items();
      }
      if ((ref1 = Widget.look_up("part_line_maps")) != null) {
        ref1.fill_linemap();
      }
      if ((ref2 = Widget.look_up(remain_part)) != null) {
        ref2.focus();
      }
      return (ref3 = Widget.look_up("part")) != null ? ref3.fill_bootloader() : void 0;
    };

    return DeletePartDialog;

  })(Dialog);

  FormatDialog = (function(superClass) {
    extend(FormatDialog, superClass);

    function FormatDialog(id1) {
      this.id = id1;
      FormatDialog.__super__.constructor.call(this, this.id, true, this.format_cb);
      this.add_css_class("DialogCommon");
      this.title_txt.innerText = _("Formatting Partition");
      this.format_tips = create_element("div", "dialog_tips", this.content);
      this.format_tips.innerText = _("Are you sure you want to format this partition?");
    }

    FormatDialog.prototype.format_cb = function() {
      return console.log("[dialog.coffee] FormatDialog.format_cb()");
    };

    return FormatDialog;

  })(Dialog);

  InstallDialog = (function(superClass) {
    extend(InstallDialog, superClass);

    function InstallDialog(id1) {
      var path, target;
      this.id = id1;
      InstallDialog.__super__.constructor.call(this, this.id, true, this.confirm_install_cb);
      this.add_css_class("DialogCommon");
      this.title_txt.innerText = _("Proceed with installation");
      this.root_tips = create_element("div", "dialog_tips", this.content);
      if (__selected_mode === "advance") {
        target = get_target_part();
      } else {
        target = __selected_item.id;
      }
      path = v_part_info[target]["path"];
      if (v_part_info[target]["type"] === "freespace") {
        this.root_tips.innerText = _("Deepin OS will be installed to freespace.");
      } else {
        this.root_tips.innerText = _("Deepin OS will be installed to ") + path + _("\nThe partition will be formatted if you continue the installation. Please make a backup for the important data. \n") + _("Do you want to continue the installation ?");
      }
    }

    InstallDialog.prototype.confirm_install_cb = function() {
      return try_removed_start_install();
    };

    return InstallDialog;

  })(Dialog);

  AddPartDialog = (function(superClass) {
    extend(AddPartDialog, superClass);

    function AddPartDialog(id1, partid1) {
      this.id = id1;
      this.partid = partid1;
      AddPartDialog.__super__.constructor.call(this, this.id, true, this.add_part_cb);
      this.add_css_class("DialogCommon");
      this.element.style.top = "85px";
      this.title_txt.innerText = _("Add Partition");
      this.fill_type();
      this.fill_size();
      this.fill_align();
      this.fill_fs();
      this.fill_mount();
      this.fill_tips();
    }

    AddPartDialog.prototype.add_part_cb = function() {
      var new_part, ref, ref1, ref2, ref3;
      this.gather_info();
      new_part = add_part(this.partid, this.n_type, this.n_size, this.n_align, this.n_fs, this.n_mp);
      v_part_info[new_part]["mp"] = this.n_mp;
      if ((ref = Widget.look_up("part_table")) != null) {
        ref.fill_items();
      }
      if ((ref1 = Widget.look_up("part_line_maps")) != null) {
        ref1.fill_linemap();
      }
      if ((ref2 = Widget.look_up(new_part)) != null) {
        ref2.focus();
      }
      return (ref3 = Widget.look_up("part")) != null ? ref3.fill_bootloader() : void 0;
    };

    AddPartDialog.prototype.fill_type = function() {
      this.type = create_element("div", "", this.content);
      this.type_desc = create_element("span", "AddDesc", this.type);
      this.type_desc.innerText = _("Type:");
      this.type_value = create_element("span", "AddValue", this.type);
      this.primary_span = create_element("span", "AddValueItem", this.type_value);
      this.type_primary = create_element("span", "", this.primary_span);
      this.primary_desc = create_element("span", "", this.primary_span);
      this.primary_desc.innerText = _("Primary");
      this.logical_span = create_element("span", "AddValueItem", this.type_value);
      this.type_logical = create_element("span", "", this.logical_span);
      this.logical_desc = create_element("span", "", this.logical_span);
      this.logical_desc.innerText = _("Logical");
      this.type_radio = "primary";
      if (!can_add_normal(this.partid)) {
        this.primary_span.style.display = "none";
        this.type_radio = "logical";
        this.type_primary.setAttribute("class", "RadioUnChecked");
        this.type_logical.setAttribute("class", "RadioChecked");
      } else {
        this.type_radio = "primary";
        this.type_primary.setAttribute("class", "RadioChecked");
        this.type_logical.setAttribute("class", "RadioUnchecked");
      }
      if (!can_add_logical(this.partid)) {
        this.logical_span.style.display = "none";
      }
      this.type_primary.addEventListener("click", (function(_this) {
        return function(e) {
          _this.type_radio = "primary";
          _this.type_primary.setAttribute("class", "RadioChecked");
          return _this.type_logical.setAttribute("class", "RadioUnchecked");
        };
      })(this));
      return this.type_logical.addEventListener("click", (function(_this) {
        return function(e) {
          _this.type_radio = "logical";
          _this.type_primary.setAttribute("class", "RadioUnChecked");
          return _this.type_logical.setAttribute("class", "RadioChecked");
        };
      })(this));
    };

    AddPartDialog.prototype.fill_size = function() {
      this.size = create_element("div", "", this.content);
      this.size_desc = create_element("span", "AddDesc", this.size);
      this.size_desc.innerText = _("Size:");
      this.max_size_mb = (v_part_info[this.partid]["length"] / MB).toFixed(0);
      this.size_value = create_element("span", "AddValue", this.size);
      this.size_wrap = create_element("div", "SizeWrap", this.size_value);
      this.size_input = create_element("input", "", this.size_wrap);
      this.size_input.setAttribute("value", this.max_size_mb);
      this.size_input.addEventListener("blur", (function(_this) {
        return function(e) {
          var parse;
          parse = parseInt(_this.size_input.value);
          if (isNaN(parse)) {
            return _this.size_input.value = _this.max_size_mb;
          } else {
            if (parse < 0) {
              return _this.size_input.value = 0;
            } else if (parse > _this.max_size_mb) {
              return _this.size_input.value = _this.max_size_mb;
            } else {
              return _this.size_input.value = parse;
            }
          }
        };
      })(this));
      this.minus_img = create_element("div", "SizeMinus", this.size_wrap);
      this.minus_img.addEventListener("click", (function(_this) {
        return function(e) {
          var parse;
          parse = parseInt(_this.size_input.value);
          if (isNaN(parse)) {
            return _this.size_input.value = _this.max_size_mb;
          } else {
            if (parse >= 1) {
              return _this.size_input.value = parse - 1;
            }
          }
        };
      })(this));
      this.add_img = create_element("div", "SizeAdd", this.size_wrap);
      this.add_img.addEventListener("click", (function(_this) {
        return function(e) {
          var parse;
          parse = parseInt(_this.size_input.value);
          if (isNaN(parse)) {
            return _this.size_input.value = _this.max_size_mb;
          } else {
            if (parse <= _this.max_size_mb - 1) {
              return _this.size_input.value = parse + 1;
            }
          }
        };
      })(this));
      this.dw = create_element("div", "SizeDw", this.size_wrap);
      return this.dw.innerText = "MB";
    };

    AddPartDialog.prototype.fill_align = function() {
      this.align = create_element("div", "", this.content);
      this.align_desc = create_element("span", "AddDesc", this.align);
      this.align_desc.innerText = _("Align:");
      this.align_value = create_element("span", "AddValue", this.align);
      this.start_span = create_element("span", "AddValueItem", this.align_value);
      this.align_start = create_element("span", "", this.start_span);
      this.start_desc = create_element("span", "", this.start_span);
      this.start_desc.innerText = _("Begin");
      this.end_span = create_element("span", "AddValueItem", this.align_value);
      this.align_end = create_element("span", "", this.end_span);
      this.end_desc = create_element("span", "", this.end_span);
      this.end_desc.innerText = _("End");
      this.align_radio = "start";
      this.align_start.setAttribute("class", "RadioChecked");
      this.align_end.setAttribute("class", "RadioUnchecked");
      this.align_start.addEventListener("click", (function(_this) {
        return function(e) {
          _this.align_radio = "start";
          _this.align_start.setAttribute("class", "RadioChecked");
          return _this.align_end.setAttribute("class", "RadioUnchecked");
        };
      })(this));
      return this.align_end.addEventListener("click", (function(_this) {
        return function(e) {
          _this.align_radio = "end";
          _this.align_start.setAttribute("class", "RadioUnChecked");
          return _this.align_end.setAttribute("class", "RadioChecked");
        };
      })(this));
    };

    AddPartDialog.prototype.fill_fs = function() {
      this.fs = create_element("div", "", this.content);
      this.fs_desc = create_element("span", "AddDesc", this.fs);
      this.fs_desc.innerText = _("Filesystem:");
      this.fs_value = create_element("span", "AddValue", this.fs);
      this.fs_select = new DropDown("dd_fs_" + this.partid, false, this.fs_change_cb);
      this.fs_value.appendChild(this.fs_select.element);
      if (__selected_use_uefi) {
        this.fs_select.set_drop_items(__fs_efi_keys, __fs_efi_values);
      } else {
        this.fs_select.set_drop_items(__fs_keys, __fs_values);
      }
      this.fs_select.set_drop_size(130, 22);
      this.fs_select.set_selected("ext4");
      return this.fs_select.show_drop();
    };

    AddPartDialog.prototype.fs_change_cb = function(fs) {
      if (fs === "efi" || fs === "swap" || fs === "unused" || fs === "fat16" || fs === "fat32" || fs === "ntfs") {
        return Widget.look_up("AddModel").mp.style.display = "none";
      } else {
        return Widget.look_up("AddModel").mp.style.display = "block";
      }
    };

    AddPartDialog.prototype.fill_mount = function() {
      this.mp = create_element("div", "", this.content);
      this.mp_desc = create_element("span", "AddDesc", this.mp);
      this.mp_desc.innerText = _("Mount:");
      this.mount_value = create_element("span", "AddValue", this.mp);
      this.mount_select = new DropDown("dd_mp_" + this.partid, true, (function(_this) {
        return function(data) {
          return _this.mp_change_cb(_this.partid, data);
        };
      })(this));
      this.mount_value.appendChild(this.mount_select.element);
      this.mount_select.set_drop_items(__mp_keys, __mp_values);
      this.mount_select.set_drop_size(130, 22);
      this.mount_select.set_selected("unused");
      return this.mount_select.show_drop();
    };

    AddPartDialog.prototype.mp_change_cb = function(partid, mp) {
      var part, ref;
      if (mp.substring(0, 1) !== "/") {
        mp = "unused";
      }
      if (indexOf.call(get_selected_mp(), mp) >= 0) {
        part = get_mp_partition(mp);
        if ((part != null) && part !== partid) {
          v_part_info[part]["mp"] = "unused";
          return (ref = Widget.look_up(part)) != null ? ref.fill_mount() : void 0;
        } else {
          return console.error("[dialog.coffee] AddPartDialog.mp_change_cb(), failed to get mp_partition in add_dialog, partid:", partid, ", mp:", mp);
        }
      }
    };

    AddPartDialog.prototype.fill_tips = function() {
      return this.tips = create_element("div", "", this.content);
    };

    AddPartDialog.prototype.gather_info = function() {
      if (this.type_radio === "primary") {
        this.n_type = "normal";
      } else {
        this.n_type = "logical";
      }
      if (parseInt(this.size_input.value) === this.max_size_mb) {
        this.n_size = v_part_info[this.partid]["length"];
      } else {
        this.n_size = parseInt(this.size_input.value) * MB;
      }
      if (this.n_size == null) {
        this.tips.innerText = _("Please enter a valid partition size.");
      }
      this.n_align = this.align_radio;
      this.n_fs = this.fs_select.get_selected();
      return this.n_mp = this.mount_select.get_selected();
    };

    return AddPartDialog;

  })(Dialog);

  VirtualMachine = (function(superClass) {
    extend(VirtualMachine, superClass);

    function VirtualMachine(id1) {
      this.id = id1;
      this.ok_cb = bind(this.ok_cb, this);
      VirtualMachine.__super__.constructor.apply(this, arguments);
      this.title_txt = create_element("div", "VirtualTitle", this.element);
      this.title_txt.innerText = _("Tips");
      this.content = create_element("div", "VirtualContent", this.element);
      this.tips = create_element("div", "VirtualTips", this.content);
      this.tips.innerText = _("It is detected that you are using a virtual machine. Installing Deepin on a virtual machine will affect its performances. You are recommended to experience it in a real environment.");
      this.foot = create_element("div", "VirtualFoot", this.element);
      this["continue"] = new NextStep("VirtualMachineContinue", _("Continue"), this.ok_cb);
      this.foot.appendChild(this["continue"].element);
      this["continue"].next_bt_enable();
      this.element.style.display = "block";
    }

    VirtualMachine.prototype.ok_cb = function() {
      console.debug("[virtual.coffee] VirtualMachine.ok_cb() auto_mode: " + pc.auto_mode);
      if (pc.auto_mode) {
        if (progress_page == null) {
          progress_page = new Progress("progress");
        }
        pc.switch_page(progress_page);
        return DCore.Installer.start_install();
      } else {
        if (welcome_page == null) {
          welcome_page = new Welcome("welcome");
        }
        return pc.switch_page(welcome_page);
      }
    };

    return VirtualMachine;

  })(Page);

  __focused_layout_item = null;

  __legal_keys = 'abcdefghijklmnopqrstuvwxyz' + '0123456789' + '-_';

  ErrorCode = {
    EMPTY: 1,
    INVALID: 2,
    FIRST_UPPER: 3,
    EXIST: 4,
    SYSTEM_USED: 5,
    NOT_MATCH: 6
  };

  __selected_zone_index = 8;

  __database = JSON.parse(timezone_json);

  _sort_layout = function(layout_a, layout_b) {
    var a_desc, b_desc;
    a_desc = DCore.Installer.get_layout_description(layout_a);
    b_desc = DCore.Installer.get_layout_description(layout_b);
    return a_desc.localeCompare(b_desc);
  };

  get_matched_items = function(key, list) {
    var item, j, len1, matched;
    matched = [];
    for (j = 0, len1 = list.length; j < len1; j++) {
      item = list[j];
      if (item.toLowerCase().indexOf(key.toLowerCase()) !== -1) {
        matched.push(item);
      }
    }
    return matched;
  };

  is_ancestor = function(ancestor, el) {
    while (el != null) {
      if (el === ancestor) {
        return true;
      }
      el = el.parentNode;
    }
    return false;
  };

  __keyboard_widget = null;

  __timezone_widget = null;

  __account_widget = null;

  keyboardSet_div = null;

  timezoneSet_div = null;

  tooltipOffsetX = (document.body.clientWidth - document.body.offsetWidth) / 2;

  tooltipOffsetY = (document.body.clientHeight - document.body.offsetHeight) / 2;

  update_keyboard_text = function(tri) {
    var current_layout, x;
    current_layout = DCore.Installer.get_layout_description(__selected_layout);
    console.log("[welcome.coffee] update_keyboard_text() current layout: " + current_layout);
    if (keyboardSet_div != null) {
      keyboardSet_div.innerText = current_layout;
    }
    if (keyboardSet_div != null) {
      keyboardSet_div.title = current_layout;
    }
    x = (keyboardSet_div != null ? keyboardSet_div.offsetLeft : void 0) - 15;
    if (x > 0) {
      if (tri != null) {
        tri.style.left = x;
      }
    }
    return DCore.Installer.set_layout(__selected_layout);
  };

  update_timezone_text = function(tri) {
    var city, error1, right, utc, x;
    utc = DCore.Installer.get_timezone_utc(__selected_timezone);
    console.log("[welcome.coffee] update_timezone_text(), current timezone: " + utc);
    if (timezoneSet_div != null) {
      timezoneSet_div.title = utc;
    }
    try {
      city = __selected_timezone.split("/").pop();
    } catch (error1) {
      city = __selected_timezone;
    }
    right = DCore.dgettext("tzdata", city);
    if (right == null) {
      right = city;
    }
    if (timezoneSet_div != null) {
      timezoneSet_div.innerText = right;
    }
    x = (timezoneSet_div != null ? timezoneSet_div.offsetLeft : void 0) - 15;
    if (x > 0) {
      return tri != null ? tri.style.left = x : void 0;
    }
  };

  LayoutItem = (function(superClass) {
    extend(LayoutItem, superClass);

    function LayoutItem(id1, layout1, keyboard) {
      this.id = id1;
      this.layout = layout1;
      this.keyboard = keyboard;
      LayoutItem.__super__.constructor.apply(this, arguments);
      this.element.innerText = DCore.Installer.get_layout_description(this.layout);
      if (this.layout === __selected_layout.split(",")[0]) {
        this.focus();
      }
    }

    LayoutItem.prototype.focus = function() {
      if (__focused_layout_item != null) {
        __focused_layout_item.blur();
      }
      __focused_layout_item = this;
      this.keyboard.fill_variants(this.layout);
      if (__focused_layout_item === __selected_layout_item) {
        this.element.setAttribute("class", "LayoutItem KeyboardActive");
      } else {
        this.element.setAttribute("class", "LayoutItem KeyboardFocus");
      }
      return this.element.scrollIntoView();
    };

    LayoutItem.prototype.blur = function() {
      if (__focused_layout_item === __selected_layout_item) {
        return this.element.setAttribute("class", "LayoutItem KeyboardSelect");
      } else {
        return this.element.setAttribute("class", "LayoutItem");
      }
    };

    LayoutItem.prototype.active = function() {
      if (__selected_layout_item != null) {
        __selected_layout_item.unactive();
      }
      __selected_layout_item = this;
      return this.element.setAttribute("class", "LayoutItem KeyboardActive");
    };

    LayoutItem.prototype.unactive = function() {
      return this.element.setAttribute("class", "LayoutItem");
    };

    LayoutItem.prototype.do_click = function(e) {
      if (__focused_layout_item !== this) {
        return this.focus();
      }
    };

    LayoutItem.prototype.do_mouseover = function(e) {
      if (__focused_layout_item === this) {
        return;
      }
      if (__selected_layout_item === this) {
        this.element.setAttribute("class", "LayoutItem KeyboardSelectHover");
        return;
      }
      return this.element.setAttribute("class", "LayoutItem KeyboardHover");
    };

    LayoutItem.prototype.do_mouseout = function(e) {
      if (__focused_layout_item === this) {
        return;
      }
      if (__selected_layout_item === this) {
        this.element.setAttribute("class", "LayoutItem KeyboardSelect");
        return;
      }
      return this.element.setAttribute("class", "LayoutItem");
    };

    return LayoutItem;

  })(Widget);

  VariantItem = (function(superClass) {
    extend(VariantItem, superClass);

    function VariantItem(id1, variant1, keyboard) {
      this.id = id1;
      this.variant = variant1;
      this.keyboard = keyboard;
      this.do_dblclick = bind(this.do_dblclick, this);
      VariantItem.__super__.constructor.apply(this, arguments);
      this.element.innerText = DCore.Installer.get_layout_description(this.variant);
      if (this.variant === __selected_layout) {
        this.focus();
      }
    }

    VariantItem.prototype.focus = function() {
      if (__selected_variant_item != null) {
        __selected_variant_item.blur();
      }
      __selected_variant_item = this;
      this.element.setAttribute("class", "VariantItem KeyboardActive");
      __selected_layout = this.variant;
      if (__focused_layout_item != null) {
        __focused_layout_item.active();
      }
      return this.keyboard.update_layout(this.variant);
    };

    VariantItem.prototype.blur = function() {
      return this.element.setAttribute("class", "VariantItem");
    };

    VariantItem.prototype.do_click = function(e) {
      if (__selected_variant_item !== this) {
        return this.focus();
      }
    };

    VariantItem.prototype.do_dblclick = function() {
      if (__selected_variant_item !== this) {
        this.focus();
      }
      return __account_widget.show();
    };

    VariantItem.prototype.do_mouseover = function(e) {
      if (__selected_variant_item !== this) {
        return this.element.setAttribute("class", "VariantItem KeyboardHover");
      }
    };

    VariantItem.prototype.do_mouseout = function(e) {
      if (__selected_variant_item !== this) {
        return this.element.setAttribute("class", "VariantItem");
      }
    };

    return VariantItem;

  })(Widget);

  KeyboardDetectDialog = (function(superClass) {
    extend(KeyboardDetectDialog, superClass);

    function KeyboardDetectDialog(id1, type1, keyboard) {
      this.id = id1;
      this.type = type1;
      this.keyboard = keyboard;
      this.process_key_press = bind(this.process_key_press, this);
      this.do_keypress = bind(this.do_keypress, this);
      KeyboardDetectDialog.__super__.constructor.apply(this, arguments);
      this.add_css_class("DialogCommon");
      this.element.style.top = "200px";
      this.title = create_element("div", "", this.element);
      this.title_close = create_element("div", "DialogClose", this.title);
      this.title_close.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.hide_dialog();
        };
      })(this));
      this.content = create_element("div", "DialogContent", this.element);
      this.desc = create_element("div", "Desc", this.content);
      this.detail = create_element("div", "Detail", this.content);
      this.foot = create_element("div", "DialogBtn", this.element);
      this.ok = create_element("div", "", this.foot);
      this.ok.innerText = _("Yes");
      this.ok.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.process_have_key();
        };
      })(this));
      this.cancel = create_element("div", "", this.foot);
      this.cancel.innerText = _("No");
      this.cancel.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.process_no_have_key();
        };
      })(this));
    }

    KeyboardDetectDialog.prototype.do_keypress = function(e) {
      if (this.type === "press") {
        return this.process_key_press(e);
      }
    };

    KeyboardDetectDialog.prototype.process_have_key = function() {
      var error, error1, error2, r, step;
      console.log("[welcome.coffee] KeyboardDetectDialog.process_have_key(), detect dialog process have key");
      step = null;
      r = null;
      try {
        step = DCore.Installer.keyboard_detect_get_present();
      } catch (error1) {
        error = error1;
        console.error("[welcome.coffee] call keyboard_detect_get_present() error: " + error);
      }
      if (step != null) {
        try {
          r = DCore.Installer.keyboard_detect_read_step(step);
        } catch (error2) {
          error = error2;
          console.error("[welcome.coffee] call keyboard_detect_read_step() error: " + error);
        }
      }
      if (r != null) {
        return this.keyboard.process_keyboard_detect(r);
      } else {
        return this.hide_dialog();
      }
    };

    KeyboardDetectDialog.prototype.process_no_have_key = function() {
      var error, error1, error2, r, step;
      console.log("[welcome.coffee] KeyboardDetectDialog.process_no_have_key() detect dialog process no have key");
      step = null;
      r = null;
      try {
        step = DCore.Installer.keyboard_detect_get_not_present();
      } catch (error1) {
        error = error1;
        console.error("[welcome.coffee] call keyboard_detect_get_not_present() error: " + error);
      }
      if (step != null) {
        try {
          r = DCore.Installer.keyboard_detect_read_step(step);
        } catch (error2) {
          error = error2;
          console.error("[welcome.coffee] call keyboard_detect_read_step() error: " + error);
        }
      }
      if (r != null) {
        return this.keyboard.process_keyboard_detect(r);
      } else {
        return this.hide_dialog();
      }
    };

    KeyboardDetectDialog.prototype.process_key_press = function(e) {
      var code, error, error1, error2, error3, keycodes, r, step;
      console.log("[welcome.coffee] KeyboardDetectDialog.process_key_process() detect dialog process key press");
      keycodes = null;
      step = null;
      r = null;
      code = DCore.Installer.get_keycode_from_keysym(e.which) - 8;
      if (code > 255 || code < 0) {
        console.eror("[welcome.coffee] call get_keycode_from_keysym() error: got invalid code " + code);
        return;
      }
      try {
        keycodes = DCore.Installer.keyboard_detect_get_keycodes();
      } catch (error1) {
        error = error1;
        console.error("[welcome.coffee] call keyboard_detect_get_keycodes() error: " + error);
      }
      if (keycodes != null) {
        try {
          step = keycodes[code];
        } catch (error2) {
          error = error2;
          console.error("[welcome.coffee] KeyboardDetectDialog.process_key_press() error, failed to get `step`: " + error);
        }
        if (step != null) {
          try {
            r = DCore.Installer.keyboard_detect_read_step(step);
          } catch (error3) {
            error = error3;
            console.error("[welcome.coffee] call keyboard_detect_read_step() error: " + error);
          }
          if (r != null) {
            return this.keyboard.process_keyboard_detect(r);
          } else {
            return this.hide_dialog();
          }
        } else {
          return this.hide_dialog();
        }
      } else {
        return this.hide_dialog();
      }
    };

    KeyboardDetectDialog.prototype.fill_detail = function(symbols) {
      var item, j, len1, results;
      this.detail.innerHTML = "";
      this.detail_ul = create_element("ul", "", this.detail);
      results = [];
      for (j = 0, len1 = symbols.length; j < len1; j++) {
        item = symbols[j];
        results.push(this.fill_detail_item(item));
      }
      return results;
    };

    KeyboardDetectDialog.prototype.fill_detail_item = function(s) {
      var item;
      item = create_element("li", "", this.detail_ul);
      return item.innerText = s;
    };

    KeyboardDetectDialog.prototype.update_type = function(type) {
      var error, error1, symbols;
      try {
        symbols = DCore.Installer.keyboard_detect_get_symbols();
      } catch (error1) {
        error = error1;
        console.error("[welcome.coffee] call keyboard_detect_get_symbols() error: " + error);
      }
      if (type === "press") {
        this.type = type;
        this.foot.style.display = "none";
        this.desc.innerText = _("Please press one of the following keys.");
        this.fill_detail(symbols);
        return this.show_dialog();
      } else if (type === "have") {
        this.type = type;
        this.foot.style.display = "block";
        this.desc.innerText = _("Please confirm you have the following keys.");
        this.fill_detail(symbols);
        return this.show_dialog();
      } else if (type === "result") {
        return this.hide_dialog();
      } else {
        console.warn("[welcome.coffee] KeyboardDetectDialog.update_type() invalid type: " + type);
        return this.hide_dialog();
      }
    };

    KeyboardDetectDialog.prototype.show_at = function(parent) {
      return parent.appendChild(this.element);
    };

    KeyboardDetectDialog.prototype.show_dialog = function() {
      __in_model = true;
      __board.setAttribute("style", "display:block");
      this.element.style.display = "block";
      enable_tab(this.element);
      return this.element.focus();
    };

    KeyboardDetectDialog.prototype.hide_dialog = function() {
      __in_model = false;
      __board.setAttribute("style", "display:none");
      return this.element.style.display = "none";
    };

    return KeyboardDetectDialog;

  })(Widget);

  Keyboard = (function(superClass) {
    extend(Keyboard, superClass);

    function Keyboard(id1) {
      var des, des_pinyin, item, j, len1, ref;
      this.id = id1;
      this.detect_keyboard_cb = bind(this.detect_keyboard_cb, this);
      Keyboard.__super__.constructor.apply(this, arguments);
      this.init_layouts();
      this.tri = create_element("div", "KeyboardTri", this.element);
      this.query = create_element("div", "Query", this.element);
      this.query_ul = create_element("ul", "", this.query);
      this.init_query_ul();
      this.content = create_element("div", "KeyBoardContent", this.element);
      this.list = create_element("div", "KeyBoardList", this.content);
      this.layout_list = create_element("div", "LayoutList", this.list);
      this.variant_list = create_element("div", "VariantList", this.list);
      this.op = create_element("div", "KeyBoardOp", this.content);
      this.detect_btn = create_element("div", "Detect", this.op);
      this.detect_btn.innerText = _("Detect Layout");
      this.detect_btn.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.detect_keyboard_cb(e);
        };
      })(this));
      this.active_btn = create_element("div", "Default", this.op);
      this.active_btn.innerText = _("View Current");
      this.active_btn.addEventListener("click", (function(_this) {
        return function(e) {
          if (__selected_layout != null) {
            return _this.set_to_layout(__selected_layout);
          }
        };
      })(this));
      this.fill_layouts(this.layouts);
      this.hide();
      update_keyboard_text(this.tri);
      this.searcher = new Trie();
      this.layouts_des_pinyin = {};
      ref = this.layouts;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        item = ref[j];
        des = DCore.Installer.get_layout_description(item);
        des_pinyin = codefans_net_CC2PY(des);
        this.layouts_des_pinyin[des_pinyin] = des;
        this.searcher.insert(des_pinyin);
      }
    }

    Keyboard.prototype.show = function() {
      var ref;
      if (__timezone_widget != null) {
        __timezone_widget.hide();
      }
      if (__account_widget != null) {
        __account_widget.hide();
      }
      this.displayed = true;
      this.element.style.display = "block";
      if (__selected_layout_item != null) {
        __selected_layout_item.focus();
      }
      return (ref = ArrowToolTip.container) != null ? ref.style.display = "none" : void 0;
    };

    Keyboard.prototype.hide = function() {
      this.displayed = false;
      return this.element.style.display = "none";
    };

    Keyboard.prototype.init_query_ul = function() {
      var c, j, len1, ref, results;
      this.selected_letter = null;
      ref = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        c = ref[j];
        results.push(this.create_query_li(c));
      }
      return results;
    };

    Keyboard.prototype.create_query_li = function(c) {
      var li;
      li = create_element("li", "", this.query_ul);
      li.innerText = c;
      return li.addEventListener("click", (function(_this) {
        return function(e) {
          var ref;
          if ((ref = _this.selected_letter) != null) {
            ref.setAttribute("class", "");
          }
          _this.selected_letter = li;
          _this.selected_letter.setAttribute("class", "LetterActive");
          return _this.execute_letter_query(c);
        };
      })(this));
    };

    Keyboard.prototype.init_layouts = function() {
      var current, j, lay, lay_var, layout, len1, len2, m, mylay, myvar, ref, ref1, variant;
      lay_var = DCore.Installer.get_current_layout_variant();
      lay = lay_var["layouts"];
      if ((lay != null) && lay.length > 0) {
        mylay = lay[0];
      }
      variant = lay_var["variants"];
      if ((variant != null) && variant.length > 0) {
        myvar = variant[0];
      }
      if ((myvar != null) && myvar.length > 0) {
        current = mylay + "," + myvar;
      } else {
        current = mylay;
      }
      if (current != null) {
        __selected_layout = current;
      }
      this.layouts = [];
      this.variants = {};
      ref = DCore.Installer.get_keyboard_layouts();
      for (j = 0, len1 = ref.length; j < len1; j++) {
        layout = ref[j];
        this.layouts.push(layout);
        this.variants[layout] = [];
        this.variants[layout].push(layout);
        ref1 = DCore.Installer.get_layout_variants(layout);
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          variant = ref1[m];
          this.variants[layout].push(layout + "," + variant);
        }
      }
      return this.layouts.sort(_sort_layout);
    };

    Keyboard.prototype.fill_layouts = function(layouts) {
      var item, j, layout, len1, results;
      this.layout_list.innerHTML = "";
      results = [];
      for (j = 0, len1 = layouts.length; j < len1; j++) {
        layout = layouts[j];
        item = new LayoutItem("layoutitem_" + layout, layout, this);
        results.push(this.layout_list.appendChild(item.element));
      }
      return results;
    };

    Keyboard.prototype.fill_variants = function(layout) {
      var item, j, len1, ref, results, variant;
      this.variant_list.innerHTML = "";
      ref = this.variants[layout];
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        variant = ref[j];
        item = new VariantItem("variantitem_" + variant, variant, this);
        results.push(this.variant_list.appendChild(item.element));
      }
      return results;
    };

    Keyboard.prototype.update_layout = function(layout) {
      __selected_layout = layout;
      return update_keyboard_text(this.tri);
    };

    Keyboard.prototype.execute_letter_query = function(letter) {
      var desc, j, key, len1, len2, m, match, matched, matched_layouts, matched_pinyin, ref, ref1;
      matched_pinyin = this.searcher.autoComplete(letter);
      matched = [];
      for (j = 0, len1 = matched_pinyin.length; j < len1; j++) {
        match = matched_pinyin[j];
        matched.push(this.layouts_des_pinyin[match]);
      }
      this.layout_list.innerHTML = "";
      this.variant_list.innerHTML = "";
      matched_layouts = [];
      ref = this.layouts;
      for (m = 0, len2 = ref.length; m < len2; m++) {
        key = ref[m];
        desc = DCore.Installer.get_layout_description(key);
        if (indexOf.call(matched, desc) >= 0) {
          matched_layouts.push(key);
        }
      }
      this.fill_layouts(matched_layouts);
      if (matched_layouts.length > 0) {
        return (ref1 = Widget.look_up("layoutitem_" + matched_layouts[0])) != null ? ref1.focus() : void 0;
      }
    };

    Keyboard.prototype.set_to_layout = function(layout) {
      var a, lay_var, ref, ref1;
      a = layout.split(",");
      if (a.length > 1) {
        lay_var = a[0];
      } else {
        lay_var = layout;
      }
      if (indexOf.call(this.layouts, lay_var) >= 0) {
        this.fill_layouts(lay_var.split());
        if ((ref = Widget.look_up("layoutitem_" + lay_var)) != null) {
          ref.focus();
        }
        return (ref1 = Widget.look_up("variantitem_" + layout)) != null ? ref1.focus() : void 0;
      } else {
        return console.warn("[welcome.coffee] Keyboard.set_to_layout() invalid layout, layout: " + layout + ", lay_var: " + lay_var);
      }
    };

    Keyboard.prototype.detect_keyboard_cb = function(e) {
      var r;
      r = DCore.Installer.keyboard_detect_read_step("0");
      if (this.detect_dialog != null) {
        this.detect_dialog.destroy();
        this.detect_dialog = null;
      }
      this.detect_dialog = new KeyboardDetectDialog("detect_dialog", null, this);
      this.detect_dialog.show_at(document.body);
      this.detect_dialog.hide_dialog();
      return this.process_keyboard_detect(r);
    };

    Keyboard.prototype.process_keyboard_detect = function(r) {
      if (r === 1) {
        return this.detect_dialog.update_type("press");
      } else if (r === 2 || r === 3) {
        return this.detect_dialog.update_type("have");
      } else if (r === 4) {
        this.detect_dialog.update_type("result");
        return this.handle_detect_result();
      } else {
        return console.warn("[welcome.coffee] Keyboard.process_keyboard_detect() invalid keyboard type: " + r);
      }
    };

    Keyboard.prototype.handle_detect_result = function() {
      var detect_result, layout;
      detect_result = DCore.Installer.keyboard_detect_get_result();
      layout = detect_result.split(":").join(",");
      console.log("[welcome.coffee] Keyboard.handle_detect_result() layout: " + layout);
      return this.set_to_layout(layout);
    };

    return Keyboard;

  })(Widget);

  Timezone = (function(superClass) {
    extend(Timezone, superClass);

    function Timezone(id1) {
      this.id = id1;
      Timezone.__super__.constructor.apply(this, arguments);
      this.tri = create_element("div", "TimezoneTri", this.element);
      this.query = create_element("div", "Query", this.element);
      this.query_div = create_element("div", "Left", this.query);
      this.query_wrap = create_element("div", "QueryWrap", this.query_div);
      this.query_input = create_element("input", "", this.query_wrap);
      this.query_input.setAttribute("placeholder", _("Please select or search your location."));
      this.query_input.addEventListener("keyup", (function(_this) {
        return function(e) {
          var ref;
          if (e.which === 13) {
            return _this.execute_query();
          } else if (e.which === 27) {
            return (ref = _this.query_complete) != null ? ref.style.display = "none" : void 0;
          }
        };
      })(this));
      this.query_input.addEventListener("input", (function(_this) {
        return function(e) {
          return _this.show_query_complete();
        };
      })(this));
      this.query_img = create_element("div", "QueryImg", this.query_wrap);
      this.query_img.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.execute_query();
        };
      })(this));
      this.picker_wrap = create_element("div", "TmezoneWrap", this.element);
      this.picker = create_element("div", "TimezonePicker", this.picker_wrap);
      this.picker.addEventListener("mousemove", (function(_this) {
        return function(e) {
          var area, j, len1, mouse_zone, px, ref, results;
          px = e.x - 25;
          mouse_zone = Math.round(px * 24 / 700 - 12).toString();
          if (mouse_zone !== __selected_zone_index) {
            __selected_zone_index = mouse_zone;
            _this.destroy_canvas("picker");
            ref = _this.get_offset_areas(__selected_zone_index);
            results = [];
            for (j = 0, len1 = ref.length; j < len1; j++) {
              area = ref[j];
              results.push(_this.draw_canvas(area));
            }
            return results;
          }
        };
      })(this));
      this.canvas = create_element("canvas", "TimezoneCanvas", this.picker);
      this.canvas.setAttribute("width", 700);
      this.canvas.setAttribute("height", 370);
      this.img = create_img("TimezoneMap", "images/zonemap.png", this.picker);
      this.img.setAttribute("usemap", "#ImageMap");
      this.img.addEventListener("click", (function(_this) {
        return function(e) {
          return _this.hide_query_complete();
        };
      })(this));
      this.construct_map();
      this.hide();
      update_timezone_text(this.tri);
      this.set_timezone(__selected_timezone, false);
      this.timezone_changed = false;
      this.guessTimeZone((function(_this) {
        return function(timezone) {
          console.log("[welcome.coffee] Timezone guessTimezone returns: " + timezone);
          if (!_this.timezone_changed) {
            console.log("[welcome.coffee] Timezone change current timezone based on IP address: " + timezone);
            return _this.set_timezone(timezone, false);
          }
        };
      })(this));
    }

    Timezone.prototype.init_search_list = function() {
      var error, error1, j, l, left, len1, ref, results, right, zone;
      this.search_list = [];
      this.zone_dict = {};
      ref = DCore.Installer.get_timezone_list();
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        zone = ref[j];
        this.search_list.push(zone);
        this.zone_dict[zone] = zone;
        try {
          left = DCore.dgettext("tzdata", zone.split("/")[0]);
          right = DCore.dgettext("tzdata", zone.split("/")[1]);
          if ((left != null) && (right != null)) {
            l = left + "/" + right;
            if (indexOf.call(this.search_list, l) < 0) {
              this.search_list.push(l);
              results.push(this.zone_dict[l] = zone);
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        } catch (error1) {
          error = error1;
          results.push(console.error("[welcome.coffee] call dgettext() error: " + error));
        }
      }
      return results;
    };

    Timezone.prototype.show = function() {
      var ref;
      if (__keyboard_widget != null) {
        __keyboard_widget.hide();
      }
      if (__account_widget != null) {
        __account_widget.hide();
      }
      this.displayed = true;
      this.element.style.display = "block";
      enable_tab(this.query_input);
      return (ref = ArrowToolTip.container) != null ? ref.style.display = "none" : void 0;
    };

    Timezone.prototype.hide = function() {
      var ref;
      this.displayed = false;
      this.element.style.display = "none";
      disable_tab(this.query_input);
      return (ref = ArrowToolTip.container) != null ? ref.style.display = "none" : void 0;
    };

    Timezone.prototype.construct_map = function() {
      var key, results, val;
      this.imagemap = create_element("map", "", this.element);
      this.imagemap.setAttribute("name", "ImageMap");
      this.imagemap.setAttribute("id", "ImageMap");
      results = [];
      for (key in __database) {
        val = __database[key];
        results.push(this.construct_area(key));
      }
      return results;
    };

    Timezone.prototype.construct_area = function(key) {
      var area;
      area = create_element("area", "TimezoneArea", this.imagemap);
      disable_tab(area);
      area.setAttribute("data-timezone", key);
      area.setAttribute("data-country", __database[key]["country"]);
      area.setAttribute("data-pin", __database[key]["pin"]);
      area.setAttribute("data-offset", __database[key]["offset"]);
      area.setAttribute("href", "#");
      if (__database[key]["polys"].length !== 0) {
        area.setAttribute("shape", "poly");
        area.setAttribute("coords", __database[key]["polys"]);
      } else if (__database[key]["rects"].length !== 0) {
        area.setAttribute("shape", "rect");
        area.setAttribute("coords", __database[key]["rects"]);
      }
      area.addEventListener("click", (function(_this) {
        return function(e) {
          _this.show_pin(area);
          __selected_timezone = area.getAttribute("data-timezone");
          return update_timezone_text(_this.tri);
        };
      })(this));
      area.addEventListener("mousemove", (function(_this) {
        return function(e) {
          _this.destroy_canvas(area);
          return _this.draw_timezone(area);
        };
      })(this));
      return area.addEventListener("mouseout", (function(_this) {
        return function(e) {
          return _this.destroy_canvas(area);
        };
      })(this));
    };

    Timezone.prototype.show_pin = function(area, show_tooltip) {
      var pin, pos, style, text, x, y;
      if (show_tooltip == null) {
        show_tooltip = true;
      }
      if (this.pin == null) {
        this.pin = create_element("div", "Pin", this.picker_wrap);
        this.pin_img = create_img("", "images/pin.png", this.pin);
        this.pin.addEventListener("dblclick", (function(_this) {
          return function() {
            return __account_widget.show();
          };
        })(this));
      }
      pin = area.getAttribute("data-pin").split(",");
      x = parseInt(pin[0]) - 6;
      y = parseInt(pin[1]) + 50 - 6;
      style = "left:" + x + "px;" + "top:" + y + "px";
      this.pin.setAttribute("style", style);
      text = area.getAttribute("data-timezone").split("/").pop();
      if (show_tooltip) {
        if (this.tooltip == null) {
          this.tooltip = new ArrowToolTip(this.pin, _(text, "tzdata"), false);
        }
        this.tooltip.set_text(_(text, "tzdata"));
        this.tooltip.setPointerEvents('none');
        this.tooltip.show();
        pos = this.tooltip.get_xy();
        ArrowToolTip.move_to(this.tooltip, pos.x - tooltipOffsetX, pos.y - tooltipOffsetY);
      }
      if (this.circle != null) {
        this.circle.parentElement.removeChild(this.circle);
      }
      this.circle = create_element("div", "Circle", this.pin);
      this.circle.setAttribute("id", "pin_circle");
      this.circle_inner = create_element("div", "Inner", this.circle);
      this.circle_outer = create_element("div", "Outer", this.circle);
      apply_animation(this.circle_outer, "pinflash", "1.5s", "linear");
      apply_animation(this.circle_inner, "flashpin", "1.5s", "linear");
      return setTimeout(function() {
        return document.getElementById("pin_circle").style.display = "none";
      }, 1500);
    };

    Timezone.prototype.draw_timezone = function(myarea) {
      var area, j, len1, offset, ref, results;
      offset = myarea.getAttribute("data-offset");
      ref = this.get_offset_areas(offset);
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        area = ref[j];
        results.push(this.draw_canvas(area));
      }
      return results;
    };

    Timezone.prototype.get_offset_areas = function(offset) {
      var area, areas, j, len1, ref;
      areas = [];
      ref = this.imagemap.children;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        area = ref[j];
        if (area.getAttribute("data-offset") === offset) {
          areas.push(area);
        }
      }
      return areas;
    };

    Timezone.prototype.get_area = function(timezone) {
      var area, j, len1, ref;
      ref = this.imagemap.children;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        area = ref[j];
        if (area.getAttribute("data-timezone") === timezone) {
          return area;
        }
      }
    };

    Timezone.prototype.set_timezone = function(timezone, show_tooltip) {
      var area;
      if (show_tooltip == null) {
        show_tooltip = true;
      }
      area = this.get_area(timezone);
      console.log("[welcome.coffee] Timezone.set_timezone() timezone: " + timezone);
      if (area != null) {
        this.draw_timezone(area);
        this.show_pin(area, show_tooltip);
        __selected_timezone = timezone;
        this.timezone_changed = true;
        return update_timezone_text(this.tri);
      }
    };

    Timezone.prototype.draw_canvas = function(area) {
      var ctx, i, poly;
      ctx = this.canvas.getContext("2d");
      poly = area.getAttribute("coords").split(",");
      ctx.beginPath();
      ctx.moveTo(poly[0], poly[1]);
      i = 2;
      while (i < poly.length - 1) {
        ctx.lineTo(poly[i], poly[i + 1]);
        i = i + 2;
      }
      ctx.closePath();
      ctx.fillStyle = "rgba(255,255,255,1)";
      return ctx.fill();
    };

    Timezone.prototype.destroy_canvas = function(area) {
      var ctx;
      ctx = this.canvas.getContext("2d");
      return ctx.clearRect(0, 0, 700, 370);
    };

    Timezone.prototype.show_query_complete = function() {
      var item, j, key, len1, matched, results;
      console.log("[welcome.coffee.Timezone] show_query_complete()");
      if (this.query_complete != null) {
        this.query_div.removeChild(this.query_complete);
        this.query_complete = null;
      }
      this.query_complete = create_element("div", "QueryComplete", this.query_div);
      if (this.search_list == null) {
        this.init_search_list();
      }
      key = this.query_input.value;
      matched = get_matched_items(key, this.search_list);
      if (key.length > 0 && matched.length > 0) {
        this.query_complete.style.display = "block";
        results = [];
        for (j = 0, len1 = matched.length; j < len1; j++) {
          item = matched[j];
          results.push(this.create_complete_item(item));
        }
        return results;
      } else {
        return this.query_complete.style.display = "none";
      }
    };

    Timezone.prototype.hide_query_complete = function() {
      var ref;
      console.log("[welcome.coffee.Timezone] hide_query_complete()");
      return (ref = this.query_complete) != null ? ref.style.display = "none" : void 0;
    };

    Timezone.prototype.create_complete_item = function(txt) {
      var item;
      item = create_element("div", "QueryCompleteItem", this.query_complete);
      item.innerText = txt;
      return item.addEventListener("click", (function(_this) {
        return function(e) {
          _this.set_timezone(_this.zone_dict[txt]);
          return _this.query_complete.style.display = "none";
        };
      })(this));
    };

    Timezone.prototype.execute_query = function() {
      var key, matched;
      if (this.search_list == null) {
        this.init_search_list();
      }
      key = this.query_input.value;
      matched = get_matched_items(key, this.search_list);
      if (matched.length === 1) {
        return this.set_timezone(this.zone_dict[matched[0]]);
      }
    };

    Timezone.prototype.guessTimeZone = function(callback) {
      var url;
      url = "http://freegeoip.net/json/";
      return ajax(url, true, (function(_this) {
        return function(xhr) {
          var info;
          info = JSON.parse(xhr.response);
          console.log("[welcome.coffee] Timezone guessTimezone() ip info: " + xhr.response);
          if (info && info["time_zone"]) {
            return callback(info["time_zone"]);
          }
        };
      })(this));
    };

    return Timezone;

  })(Widget);

  WelcomeFormItem = (function(superClass) {
    var ACCOUNTS;

    extend(WelcomeFormItem, superClass);

    ACCOUNTS = "com.deepin.daemon.Accounts";

    function WelcomeFormItem(id1) {
      this.id = id1;
      this.validateConfirmPassword = bind(this.validateConfirmPassword, this);
      this.validatePassword = bind(this.validatePassword, this);
      this.validateHostname = bind(this.validateHostname, this);
      this.doValidateHostname = bind(this.doValidateHostname, this);
      this.doValidateHostnameTmp = bind(this.doValidateHostnameTmp, this);
      this.validateUsername = bind(this.validateUsername, this);
      WelcomeFormItem.__super__.constructor.apply(this, arguments);
      this.tooltip = null;
      this.valid = {
        ok: false,
        msg: _("Empty"),
        code: ErrorCode.EMPTY
      };
      this.account_dbus = DCore.DBus.sys(ACCOUNTS);
      this.value_origin = null;
      this.changed = false;
      this.msg_tid = null;
      this.status = {};
      this.input = create_element("input", "input_" + this.id, this.element);
      this.fill_widget();
      this.input.addEventListener("focus", (function(_this) {
        return function(e) {
          return _this.check_capslock();
        };
      })(this));
      this.input.addEventListener("blur", (function(_this) {
        return function(e) {
          _this.check_capslock();
          switch (_this.id) {
            case "username":
              _this.validateUsername(_this.input.value);
              break;
            case "hostname":
              _this.validateHostname(_this.input.value, false);
              break;
            case "password":
              _this.validatePassword(_this.input.value, false);
              break;
            case "confirmpassword":
              _this.validateConfirmPassword(_this.input.value, false);
          }
          if (_this.valid.ok) {
            return _this.destroy_tooltip();
          } else {
            return _this.set_tooltip(_this.valid.msg);
          }
        };
      })(this));
      this.input.addEventListener('input', (function(_this) {
        return function(e) {
          var confirm, hostnameItem, ref, ref1;
          switch (_this.id) {
            case "username":
              _this.input.value = _this.input.value.toLowerCase();
              _this.validateUsername(_this.input.value);
              if (_this.valid.ok) {
                _this.destroy_tooltip();
                hostnameItem = Widget.look_up("hostname");
                if (hostnameItem.changed === false) {
                  hostnameItem.input.value = _this.input.value + "-pc";
                  hostnameItem.valid = {
                    ok: true,
                    msg: "",
                    code: 0
                  };
                }
              } else {
                if ((ref = _this.valid.code) === ErrorCode.INVALID || ref === ErrorCode.FIRST_UPPER) {
                  _this.input.value = _this.value_origin;
                }
                if (_this.input.value.length === 0) {
                  hostnameItem = Widget.look_up("hostname");
                  if (hostnameItem.changed === false) {
                    hostnameItem.input.value = "";
                  }
                }
                _this.set_tooltip(_this.valid.msg);
              }
              break;
            case "hostname":
              _this.validateHostname(_this.input.value, true);
              if (_this.valid.ok) {
                _this.destroy_tooltip();
              } else {
                _this.input.value = _this.value_origin;
                _this.set_tooltip(_this.valid.msg);
              }
              break;
            case "password":
              _this.validatePassword(_this.input.value, true);
              if (_this.valid.ok) {
                _this.destroy_tooltip();
              } else if (_this.valid.code === ErrorCode.PARTICAL_MATCH) {
                _this.destroy_tooltip();
              } else {
                _this.set_tooltip(_this.valid.msg);
              }
              confirm = Widget.look_up("confirmpassword");
              if (_this.input.value !== confirm.input.value && confirm.changed) {
                confirm.valid = {
                  ok: false,
                  msg: _("The two passwords do not match."),
                  code: ErrorCode.NOT_MATCH
                };
                confirm.set_tooltip(confirm.valid.msg);
              } else {
                confirm.destroy_tooltip();
              }
              break;
            case "confirmpassword":
              _this.validateConfirmPassword(_this.input.value, true);
              if (_this.valid.ok) {
                _this.destroy_tooltip();
              } else if (_this.valid.code === ErrorCode.PARTICAL_MATCH) {
                _this.destroy_tooltip();
              } else {
                _this.set_tooltip(_this.valid.msg);
              }
          }
          _this.value_origin = _this.input.value;
          return (ref1 = Widget.look_up("account")) != null ? ref1.check_start_ready() : void 0;
        };
      })(this));
      this.input.addEventListener("change", (function(_this) {
        return function(e) {
          return _this.changed = true;
        };
      })(this));
      this.input.addEventListener('keydown', (function(_this) {
        return function(e) {
          var ref;
          _this.check_capslock();
          if (_this.id === "confirmpassword" && e.keyCode === 13) {
            return (ref = Widget.look_up("account")) != null ? ref.start_install_cb() : void 0;
          }
        };
      })(this));
    }

    WelcomeFormItem.prototype.validateUsername = function(username) {
      var error, error1, user_val, val;
      val = this.account_dbus.IsUsernameValid_sync(username);
      if (val[0]) {
        this.valid = {
          ok: true,
          msg: "",
          code: 0
        };
        return;
      }
      user_val = [];
      try {
        user_val = this.account_dbus.FindUserByName_sync(username);
        if (user_val[0] !== "") {
          this.valid = {
            ok: true,
            msg: "",
            code: 0
          };
          return;
        }
      } catch (error1) {
        error = error1;
        console.error("[welcome.coffee] call FindUserByName_sync() error: " + error);
      }
      return this.valid = {
        ok: false,
        msg: DCore.dgettext("dde-daemon", val[1]),
        code: val[2]
      };
    };

    WelcomeFormItem.prototype.doValidateHostnameTmp = function(hostname) {
      var regexp;
      regexp = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9\-\.])*$/;
      return regexp.test(hostname);
    };

    WelcomeFormItem.prototype.doValidateHostname = function(hostname) {
      var regexp;
      regexp = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
      return regexp.test(hostname);
    };

    WelcomeFormItem.prototype.validateHostname = function(hostname, temp) {
      if ((hostname == null) || hostname.length === 0 || (temp && this.doValidateHostnameTmp(hostname)) || this.doValidateHostname(hostname)) {
        return this.valid = {
          ok: true,
          msg: "",
          code: 0
        };
      } else {
        return this.valid = {
          ok: false,
          msg: _("Computer name is invald."),
          code: ErrorCode.INVALID
        };
      }
    };

    WelcomeFormItem.prototype.validatePassword = function(password, temp) {
      var confirmPassword, confirmPasswordItem;
      confirmPasswordItem = Widget.look_up("confirmpassword");
      if (confirmPasswordItem.changed) {
        confirmPasswordItem.valid = {
          ok: true,
          msg: "",
          code: 0
        };
      }
      confirmPassword = confirmPasswordItem.input.value;
      if ((password == null) || password.length === 0) {
        return this.valid = {
          ok: false,
          msg: _("Password can not be empty."),
          code: ErrorCode.EMPTY
        };
      } else if (password === confirmPassword) {
        return this.valid = {
          ok: true,
          msg: "",
          code: 0
        };
      } else if (temp && confirmPassword.substring(0, password.length) === password) {
        return this.valid = {
          ok: false,
          msg: "Partial match",
          code: ErrorCode.PARTICAL_MATCH
        };
      } else {
        return this.valid = {
          ok: true,
          msg: "",
          code: 0
        };
      }
    };

    WelcomeFormItem.prototype.validateConfirmPassword = function(confirmPassword, temp) {
      var password, passwordItem;
      passwordItem = Widget.look_up("password");
      passwordItem.valid = {
        ok: true,
        msg: "",
        code: 0
      };
      password = passwordItem.input.value;
      if (password === confirmPassword) {
        return this.valid = {
          ok: true,
          msg: "",
          code: 0
        };
      } else if (temp && password.substring(0, confirmPassword.length) === confirmPassword) {
        return this.valid = {
          ok: false,
          msg: "Partial match",
          code: ErrorCode.PARTICAL_MATCH
        };
      } else {
        return this.valid = {
          ok: false,
          msg: _("The two passwords do not match."),
          code: ErrorCode.NOT_MATCH
        };
      }
    };

    WelcomeFormItem.prototype.set_tooltip = function(text) {
      var pos;
      if (text === null || text === "") {
        return;
      }
      if (this.tooltip === null) {
        this.tooltip = new ArrowToolTip(this.input, text, true);
        this.input.removeEventListener('mouseover', this.tooltip.on_mouseover);
        this.input.removeEventListener('mouseout', this.tooltip.hide);
        this.tooltip.set_delay_time(0);
      }
      this.tooltip.set_text(text);
      this.tooltip.show();
      pos = this.tooltip.get_xy();
      return ArrowToolTip.move_to(this.tooltip, 228, pos.y - tooltipOffsetY - 95);
    };

    WelcomeFormItem.prototype.destroy_tooltip = function() {
      var ref, ref1;
      if ((ref = this.tooltip) != null) {
        ref.hide();
      }
      if ((ref1 = this.tooltip) != null) {
        ref1.destroy();
      }
      return this.tooltip = null;
    };

    WelcomeFormItem.prototype.get_input_value = function() {
      return this.input.value;
    };

    WelcomeFormItem.prototype.check_capslock = function() {
      if (this.id === "password" || this.id === "confirmpassword") {
        if (DCore.Installer.detect_capslock()) {
          return this.warn.style.display = "block";
        } else {
          return this.warn.style.display = "none";
        }
      }
    };

    WelcomeFormItem.prototype.fill_widget = function() {
      var confirm_holder, hostname_holder, password_holder, username_holder;
      switch (this.id) {
        case "username":
          username_holder = _("Username");
          return this.input.setAttribute("placeholder", username_holder);
        case "hostname":
          hostname_holder = _("Computer Name");
          return this.input.setAttribute("placeholder", hostname_holder);
        case "password":
          password_holder = _("Password");
          this.input.setAttribute("placeholder", password_holder);
          this.input.classList.add("PasswordStyle");
          return this.warn = create_element("div", "CapsWarning", this.element);
        case "confirmpassword":
          confirm_holder = _("Retype Password");
          this.input.setAttribute("placeholder", confirm_holder);
          this.input.classList.add("PasswordStyle");
          return this.warn = create_element("div", "CapsWarning", this.element);
      }
    };

    WelcomeFormItem.prototype.input_focus = function() {
      this.input.setAttribute("autofocus", "autofocus");
      return this.input.focus();
    };

    return WelcomeFormItem;

  })(Widget);

  Account = (function(superClass) {
    extend(Account, superClass);

    function Account(id1) {
      this.id = id1;
      this.start_install_cb = bind(this.start_install_cb, this);
      Account.__super__.constructor.apply(this, arguments);
      this.form = create_element("div", "WelcomeForm", this.element);
      this.username = new WelcomeFormItem("username");
      this.username.input.setAttribute("maxLength", 32);
      this.username.valid = {
        ok: false,
        msg: _("Username can not be empty."),
        code: ErrorCode.EMPTY
      };
      this.form.appendChild(this.username.element);
      this.hostname = new WelcomeFormItem("hostname");
      this.hostname.valid = {
        ok: false,
        msg: _("Computer name can not be empty."),
        code: ErrorCode.EMPTY
      };
      this.form.appendChild(this.hostname.element);
      this.password = new WelcomeFormItem("password");
      this.password.valid = {
        ok: false,
        msg: _("Password can not be empty."),
        code: ErrorCode.EMPTY
      };
      this.form.appendChild(this.password.element);
      this.confirmpassword = new WelcomeFormItem("confirmpassword");
      this.confirmpassword.valid = {
        ok: false,
        msg: _("Password cannot be empty."),
        code: ErrorCode.EMPTY
      };
      this.form.appendChild(this.confirmpassword.element);
      this.next_step = new NextStep("start", _("Next"), this.start_install_cb);
      this.element.appendChild(this.next_step.element);
      this.next_step.set_pos("absolute", "260px", "60px");
      this.next_step.next_bt_disable();
      this.username.input_focus();
    }

    Account.prototype.show = function() {
      if (__timezone_widget != null) {
        __timezone_widget.hide();
      }
      if (__keyboard_widget != null) {
        __keyboard_widget.hide();
      }
      return this.element.style.display = "block";
    };

    Account.prototype.hide = function() {
      return this.element.style.display = "none";
    };

    Account.prototype.check_start_ready = function() {
      var ref, ref1;
      if (DEBUG) {
        __init_parted_finish = true;
      }
      if (!__init_parted_finish) {
        return false;
      }
      console.log("[welcome.coffee] Account check_start_ready():", this.username.valid, this.hostname.valid, this.password.valid, this.confirmpassword.valid);
      if (this.username.valid.ok && this.hostname.valid.ok && this.password.valid.ok && this.confirmpassword.valid.ok) {
        if ((ref = this.next_step) != null) {
          ref.next_bt_enable();
        }
        return true;
      } else {
        if ((ref1 = this.next_step) != null) {
          ref1.next_bt_disable();
        }
        return false;
      }
    };

    Account.prototype.fill_item_data = function() {
      __selected_username = this.username.get_input_value();
      __selected_hostname = this.hostname.get_input_value();
      __selected_password = this.password.get_input_value();
      return console.log("[welcome.coffee] Account.fill_item_data() selected_username: " + __selected_username + ", selected_hostname: " + __selected_hostname);
    };

    Account.prototype.start_install_cb = function() {
      this.fill_item_data();
      if (this.check_start_ready()) {
        undo_part_table_info();
        this.username.destroy_tooltip();
        this.hostname.destroy_tooltip();
        this.password.destroy_tooltip();
        this.confirmpassword.destroy_tooltip();
        pc.switch_page(new Part("Part"));
        return typeof __selected_item !== "undefined" && __selected_item !== null ? __selected_item.focus() : void 0;
      }
    };

    return Account;

  })(Widget);

  Welcome = (function(superClass) {
    extend(Welcome, superClass);

    function Welcome(id1) {
      this.id = id1;
      Welcome.__super__.constructor.apply(this, arguments);
      this.titleimg = create_img("", "images/progress_account.png", this.titleprogress);
      this.title_set = create_element("div", "TitleSet", this.title);
      this.timezone_set = create_element("div", "TimezoneSet", this.title_set);
      this.timezone_set.setAttribute("id", "TimezoneSet");
      enable_tab(this.timezone_set);
      this.timezone_set.innerText = _("Time Zone", "INSTALLER");
      timezoneSet_div = this.timezone_set;
      this.keyboard_set = create_element("div", "KeyboardSet", this.title_set);
      this.keyboard_set.setAttribute("id", "KeyboardSet");
      enable_tab(this.keyboard_set);
      this.keyboard_set.innerText = _("Keyboard");
      keyboardSet_div = this.keyboard_set;
      this.wrap = create_element("div", "WelcomeWrap", this.element);
      this.keyboard = new Keyboard("keyboard");
      this.wrap.appendChild(this.keyboard.element);
      __keyboard_widget = this.keyboard;
      this.timezone = new Timezone("timezone");
      this.wrap.appendChild(this.timezone.element);
      __timezone_widget = this.timezone;
      this.account = new Account("account");
      this.wrap.appendChild(this.account.element);
      this.account.show();
      __account_widget = this.account;
    }

    Welcome.prototype.do_click = function(e) {
      if (is_ancestor(this.keyboard_set, e.target)) {
        if (this.keyboard.displayed) {
          return this.account.show();
        } else {
          return this.keyboard.show();
        }
      } else if (is_ancestor(this.timezone_set, e.target)) {
        if (this.timezone.displayed) {
          return this.account.show();
        } else {
          return this.timezone.show();
        }
      } else {
        if (this.keyboard.displayed) {
          if (!is_ancestor(this.keyboard.element, e.target)) {
            this.account.show();
          }
        }
        if (this.timezone.displayed) {
          if (!is_ancestor(this.timezone.element, e.target)) {
            return this.account.show();
          }
        }
      }
    };

    return Welcome;

  })(Page);

  KB = 1024.0;

  MB = 1024 * KB;

  GB = 1024 * MB;

  BOOT_SIZE_MIN = 300 * MB;

  minimum_disk_size_required = 8 * GB;

  MINIMUM_PRECEDING_SIZE = 1 * MB;

  DCore.signal_connect("used", function(msg) {
    var ref;
    v_part_info[msg.part]["used"] = msg.free;
    m_part_info[msg.part]["used"] = msg.free;
    return (ref = Widget.look_up(msg.part)) != null ? ref.update_part_used() : void 0;
  });

  random_list = [];

  get_random_color = function() {
    var item, j, len1;
    if (random_list.length === 0) {
      for (j = 0, len1 = _color_list.length; j < len1; j++) {
        item = _color_list[j];
        random_list.push(item);
      }
    }
    return random_list.splice(0, 1);
  };

  disks = null;

  is_match_install_require = function() {
    var disk, j, len1, ref;
    ref = DCore.Installer.list_disks();
    for (j = 0, len1 = ref.length; j < len1; j++) {
      disk = ref[j];
      if (DCore.Installer.get_disk_size(disk) > minimum_disk_size_required) {
        return true;
      }
    }
    return false;
  };

  m_disk_info = {};

  init_m_disk_info = function() {
    var disk, j, len1, part, results;
    m_disk_info = {};
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      m_disk_info[disk] = {};
      m_disk_info[disk]["change"] = false;
      m_disk_info[disk]["path"] = v_disk_info[disk]["path"];
      m_disk_info[disk]["partitions"] = [];
      results.push((function() {
        var len2, m, ref, ref1, results1;
        ref = v_disk_info[disk]["partitions"];
        results1 = [];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          if ((ref1 = v_part_info[part]["type"]) === "normal" || ref1 === "extended" || ref1 === "logical" || ref1 === "freespace") {
            results1.push(m_disk_info[disk]["partitions"].push(part));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  m_part_info = {};

  init_m_part_info = function() {
    var disk, j, len1, part, results;
    m_part_info = {};
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      results.push((function() {
        var len2, m, ref, results1;
        ref = m_disk_info[disk]["partitions"];
        results1 = [];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          m_part_info[part] = {};
          m_part_info[part]["disk"] = disk;
          m_part_info[part]["used"] = v_part_info[part]["used"];
          m_part_info[part]["type"] = v_part_info[part]["type"];
          m_part_info[part]["start"] = v_part_info[part]["start"];
          m_part_info[part]["length"] = v_part_info[part]["length"];
          m_part_info[part]["end"] = v_part_info[part]["end"];
          m_part_info[part]["fs"] = v_part_info[part]["fs"];
          m_part_info[part]["format"] = false;
          m_part_info[part]["mp"] = v_part_info[part]["mp"];
          m_part_info[part]["path"] = v_part_info[part]["path"];
          m_part_info[part]["color"] = v_part_info[part]["color"];
          m_part_info[part]["width"] = v_part_info[part]["width"];
          m_part_info[part]["os"] = v_part_info[part]["os"];
          m_part_info[part]["label"] = v_part_info[part]["label"];
          m_part_info[part]["lvm"] = v_part_info[part]["lvm"];
          m_part_info[part]["op"] = "keep";
          results1.push(m_part_info[part]["path"] = v_part_info[part]["path"]);
        }
        return results1;
      })());
    }
    return results;
  };

  _sort_part_op = function(part_a, part_b) {
    if (m_part_info[part_a]["op"] === "delete") {
      if (m_part_info[part_a]["type"] === "extended") {
        return 1;
      } else {
        return -1;
      }
    } else if (m_part_info[part_a]["op"] === "update") {
      if (m_part_info[part_a]["type"] === "extended") {
        if (m_part_info[part_a]["length"] < v_part_info[part_a]["length"]) {
          return -1;
        } else {
          return 1;
        }
      } else if (m_part_info[part_b]["type"] === "extended") {
        if (m_part_info[part_b]["length"] < v_part_info[part_b]["length"]) {
          return 1;
        } else {
          return -1;
        }
      } else {
        return -1;
      }
    } else if (m_part_info[part_a]["op"] === "add") {
      if (m_part_info[part_a]["type"] === "extended") {
        return -1;
      } else {
        return 1;
      }
    } else {
      console.error("[part_util.coffee] _sort_part_op() error, invalid op: ", m_part_info[part_a]["op"]);
      return -1;
    }
  };

  _sort_disk = function(disk_a, disk_b) {
    var a_path, b_path;
    a_path = DCore.Installer.get_disk_path(disk_a);
    b_path = DCore.Installer.get_disk_path(disk_b);
    if (a_path < b_path) {
      return -1;
    } else {
      return 1;
    }
  };

  _filter_modeled_delete = function(part, index) {
    return m_part_info[part]["op"] === "delete";
  };

  _filter_modeled_update = function(part, index) {
    return m_part_info[part]["op"] === "update";
  };

  _filter_modeled_add = function(part, index) {
    return m_part_info[part]["op"] === "add";
  };

  get_modeled_partitions = function(disk) {
    var add_partitions, delete_partitions, j, len1, len2, len3, m, modeled, n, part, partitions, update_partitions;
    console.log("[part_util.coffee] get_modeled_partitons: " + disk);
    partitions = [];
    for (part in m_part_info) {
      if (m_part_info[part]["disk"] === disk && m_part_info[part]["op"] !== "keep") {
        partitions.push(part);
      }
    }
    delete_partitions = partitions.filter(_filter_modeled_delete).sort(_sort_part_op);
    update_partitions = partitions.filter(_filter_modeled_update).sort(_sort_part_op);
    add_partitions = partitions.filter(_filter_modeled_add).sort(_sort_part_op);
    modeled = [];
    for (j = 0, len1 = delete_partitions.length; j < len1; j++) {
      part = delete_partitions[j];
      modeled.push(part);
    }
    for (m = 0, len2 = update_partitions.length; m < len2; m++) {
      part = update_partitions[m];
      modeled.push(part);
    }
    for (n = 0, len3 = add_partitions.length; n < len3; n++) {
      part = add_partitions[n];
      modeled.push(part);
    }
    return modeled;
  };

  mark_update = function(part) {
    var ref;
    console.log("[part_util.coffee] mark_update() part: " + part + ", " + m_part_info[part]);
    if (indexOf.call(m_disk_info[v_part_info[part]["disk"]]["partitions"], part) >= 0) {
      m_disk_info[v_part_info[part]["disk"]]["change"] = true;
      if ((ref = m_part_info[part]["op"]) !== "keep" && ref !== "update") {
        console.error("[part_util.coffee] mark_update(), should not reach for mark update, op: " + m_part_info[part]["op"]);
      }
      return m_part_info[part]["op"] = "update";
    } else {
      return console.warn("[part_util.coffee] mark_update(), skip mark update for new partition, " + m_part_info[part]);
    }
  };

  mark_add = function(part) {
    console.log("[part_util.coffee] mark_add() part: " + part + ", " + m_part_info[part]);
    if (indexOf.call(m_disk_info[v_part_info[part]["disk"]]["partitions"], part) >= 0) {
      return console.error("[part_util.coffee] mark_add() error in mark add, part originally exists, " + part + ", " + m_disk_info[v_part_info][part]);
    } else {
      m_disk_info[v_part_info[part]["disk"]]["change"] = true;
      m_part_info[part] = {};
      m_part_info[part]["op"] = "add";
      m_part_info[part]["disk"] = v_part_info[part]["disk"];
      m_part_info[part]["type"] = v_part_info[part]["type"];
      m_part_info[part]["fs"] = v_part_info[part]["fs"];
      m_part_info[part]["start"] = v_part_info[part]["start"];
      m_part_info[part]["length"] = v_part_info[part]["length"];
      m_part_info[part]["end"] = v_part_info[part]["end"];
      return m_part_info[part]["mp"] = v_part_info[part]["mp"];
    }
  };

  mark_delete = function(part) {
    var ref;
    console.log("[part_util.coffee] mark_delete() part: " + part);
    if (indexOf.call(m_disk_info[v_part_info[part]["disk"]]["partitions"], part) >= 0) {
      if ((ref = m_part_info[part]["op"]) === "keep" || ref === "update") {
        m_disk_info[v_part_info[part]["disk"]]["change"] = true;
        return m_part_info[part]["op"] = "delete";
      } else {
        return console.error("[part_util.coffee] mark_delete() invalid flag for orig partition to mark delete, " + part + ", " + m_part_info[part]);
      }
    } else {
      if (m_part_info[part]["op"] === "add") {
        m_disk_info[v_part_info[part]["disk"]]["change"] = true;
        return delete m_part_info[part];
      } else {
        return console.error("[part_util.coffee] mark_delete() invalid flag for new part to mark delete, " + part);
      }
    }
  };

  __update_fs_json = function(part, fs) {
    return '{"op":"update_fs","part":"#{part}","fs":"#{fs}"}';
  };

  do_partition = function() {
    var disk, error, j, len1, part, results, ret;
    console.log("[part_util.coffee] do_partition()");
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      if (m_disk_info[disk]["change"] !== true) {
        continue;
      }
      results.push((function() {
        var error1, error10, error2, error3, error4, error5, error6, error7, error8, error9, len2, m, ref, ref1, results1;
        ref = get_modeled_partitions(disk);
        results1 = [];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          switch (m_part_info[part]["op"]) {
            case "delete":
              try {
                DCore.Installer.delete_disk_partition(part);
              } catch (error1) {
                error = error1;
                console.error("[part_util.coffee] call delete_disk_partition() failed, part: " + part);
              }
              try {
                results1.push(DCore.Installer.write_disk(disk));
              } catch (error2) {
                error = error2;
                results1.push(console.error("[part_util.coffee] call write_disk() failed, disk: " + disk));
              }
              break;
            case "update":
              if (m_part_info[part]["start"] !== v_part_info[part]["start"] || m_part_info[part]["length"] !== v_part_info[part]["length"]) {
                try {
                  DCore.Installer.update_partition_geometry(part, v_part_info[part]["start"], v_part_info[part]["length"]);
                } catch (error3) {
                  error = error3;
                  console.error("[part_util.coffee] do_partition() call update_partition_geometry() failed: " + error);
                }
                try {
                  DCore.Installer.write_disk(disk);
                } catch (error4) {
                  error = error4;
                  console.error("[part_util.coffee] do_partition() call write_disk() failed: " + error);
                }
              }
              if (m_part_info[part]["fs"] !== v_part_info[part]["fs"] || v_part_info[part]["format"]) {
                if ((ref1 = v_part_info[part]["fs"]) !== "" && ref1 !== "unused") {
                  try {
                    ret = DCore.Installer.update_partition_fs(part, v_part_info[part]["fs"]);
                  } catch (error5) {
                    error = error5;
                    console.error("[part_util.coffee] do_partition() call update_partition_fs() failed: " + error);
                  }
                }
              }
              try {
                results1.push(DCore.Installer.write_disk(disk));
              } catch (error6) {
                error = error6;
                results1.push(console.error("[part_util.coffee] do_partition() call write_disk() error: " + error + ", disk: " + disk));
              }
              break;
            case "add":
              try {
                DCore.Installer.new_disk_partition(part, disk, m_part_info[part]["type"], m_part_info[part]["fs"], m_part_info[part]["start"], m_part_info[part]["end"]);
              } catch (error7) {
                error = error7;
                console.error("[part_util.coffee] do_partition() call new_disk_partition() error: " + error + ", part: " + part + ", disk: " + disk);
              }
              try {
                DCore.Installer.write_disk(disk);
              } catch (error8) {
                error = error8;
                console.error("[part_util.coffee] do_partition() call write_disk() error: " + error + ", disk: " + disk);
              }
              if (v_part_info[part]["type"] !== "extended") {
                try {
                  DCore.Installer.update_partition_fs(part, v_part_info[part]["fs"]);
                } catch (error9) {
                  error = error9;
                  console.error("[part_util.coffee] do_partition() call update_partition_fs() error: " + error + ", part: " + part);
                }
                try {
                  results1.push(DCore.Installer.write_disk(disk));
                } catch (error10) {
                  error = error10;
                  results1.push(console.error("[part_util.coffee] do_partition() call write_disk() error: " + error + ", disk: " + disk));
                }
              } else {
                results1.push(void 0);
              }
              break;
            default:
              results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  auto_simple_partition = function(device, type) {
    var align, fs, mp, partid, ref, size;
    console.log("[part_util.coffee] auto_simple_partition(), device: " + device + ", type: " + type);
    if (type === "part") {
      if (m_part_info[device]["type"] === "freespace") {
        partid = device;
        if (is_in_extended(partid)) {
          type = "logical";
        } else {
          type = "normal";
        }
        size = v_part_info[partid]["length"];
        align = "start";
        fs = "ext4";
        mp = "/";
        add_part(partid, type, size, align, fs, mp);
      } else if ((ref = m_part_info[device]["type"]) === "normal" || ref === "logical") {
        update_part_fs(device, "ext4");
        update_part_format(device, true);
        update_part_mp(device, "/");
      } else {
        console.error("[part_util.coffee] auto_simple_partition(), invalid as extended doesn't show in simple view");
      }
      if (typeof __selected_home !== "undefined" && __selected_home !== null) {
        return update_part_mp(__selected_home, "/home");
      }
    } else {
      return console.error("[part_util.coffee] auto_simple_partition(), invalid type to do simple partition");
    }
  };

  get_recommand_target = function() {
    var disk, j, len1, len2, m, part, recommand, ref;
    recommand = null;
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      ref = m_disk_info[disk]["partitions"];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        part = ref[m];
        if (m_part_info[part]["type"] !== "extended") {
          if (recommand != null) {
            if (m_part_info[part]["length"] > m_part_info[recommand]["length"]) {
              recommand = part;
            }
          } else {
            recommand = part;
          }
        }
      }
    }
    return recommand;
  };

  get_target_part = function() {
    var disk, j, len1, len2, m, part, ref;
    console.log("[part_util.coffee] get_target_part()");
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      ref = v_disk_info[disk]["partitions"];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        part = ref[m];
        if (v_part_info[part]["mp"] === "/") {
          return part;
        }
      }
    }
    return null;
  };

  check_target_part = function() {
    if (get_target_part() != null) {
      return true;
    } else {
      return false;
    }
  };

  check_has_mount = function(disk) {
    var j, len1, part, ref;
    ref = m_disk_info[disk]["partitions"];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      part = ref[j];
      if (DCore.Installer.is_partition_busy(part)) {
        return true;
      }
    }
    return false;
  };

  check_only_swap_mount = function(disk) {
    var j, len1, part, ref;
    ref = m_disk_info[disk]["partitions"];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      part = ref[j];
      if (DCore.Installer.is_partition_busy(part)) {
        if (v_part_info[part]["type"] !== "extended") {
          if (v_part_info[part]["fs"] !== "swap") {
            return false;
          }
        }
      }
    }
    return true;
  };

  get_efi_boot_part = function() {
    var disk, j, len1, len2, m, part, ref;
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      ref = v_disk_info[disk]["partitions"];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        part = ref[m];
        if (v_part_info[part]["fs"] === "efi") {
          return part;
        }
      }
    }
    return null;
  };

  v_disk_info = {};

  init_v_disk_info = function() {
    var disk, j, len1, part, results, type;
    disks = DCore.Installer.list_disks();
    disks.sort(_sort_disk);
    v_disk_info = {};
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      v_disk_info[disk] = {};
      v_disk_info[disk]["length"] = DCore.Installer.get_disk_size(disk);
      v_disk_info[disk]["model"] = DCore.Installer.get_disk_model(disk);
      v_disk_info[disk]["max_primary"] = DCore.Installer.get_disk_max_primary_count(disk);
      v_disk_info[disk]["path"] = DCore.Installer.get_disk_path(disk);
      v_disk_info[disk]["type"] = DCore.Installer.get_disk_type(disk);
      v_disk_info[disk]["partitions"] = [];
      results.push((function() {
        var len2, m, ref, results1;
        ref = DCore.Installer.get_disk_partitions(disk);
        results1 = [];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          type = DCore.Installer.get_partition_type(part);
          if (type === "freespace") {
            results1.push(v_disk_info[disk]["partitions"].push(part));
          } else if (type === "normal" || type === "extended" || type === "logical") {
            results1.push(v_disk_info[disk]["partitions"].push(part));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  v_part_info = {};

  init_v_part_info = function() {
    var disk, j, len1, part, results;
    v_part_info = {};
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      results.push((function() {
        var len2, m, ref, results1;
        ref = v_disk_info[disk]["partitions"];
        results1 = [];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          v_part_info[part] = {};
          v_part_info[part]["type"] = DCore.Installer.get_partition_type(part);
          v_part_info[part]["disk"] = disk;
          v_part_info[part]["used"] = "unknown";
          v_part_info[part]["start"] = DCore.Installer.get_partition_start(part);
          v_part_info[part]["length"] = DCore.Installer.get_partition_size(part);
          v_part_info[part]["end"] = DCore.Installer.get_partition_end(part);
          v_part_info[part]["mp"] = "unused";
          v_part_info[part]["path"] = DCore.Installer.get_partition_path(part);
          v_part_info[part]["color"] = get_random_color();
          v_part_info[part]["width"] = Math.floor((v_part_info[part]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
          v_part_info[part]["format"] = false;
          if (v_part_info[part]["type"] !== "freespace") {
            DCore.Installer.get_partition_free(part);
            v_part_info[part]["fs"] = DCore.Installer.get_partition_fs(part);
            if (v_part_info[part]["fs"] == null) {
              v_part_info[part]["fs"] = "unused";
            } else if (v_part_info[part]["fs"] === "fat32") {
              if (DCore.Installer.get_partition_flag(part, "boot") === true) {
                if (v_disk_info[disk]["type"] === "gpt") {
                  v_part_info[part]["fs"] = "efi";
                }
              }
            }
            v_part_info[part]["os"] = DCore.Installer.get_partition_os(part);
            v_part_info[part]["label"] = DCore.Installer.get_partition_label(part);
            results1.push(v_part_info[part]["lvm"] = DCore.Installer.get_partition_flag(part, "lvm"));
          } else {
            v_part_info[part]["fs"] = "unused";
            v_part_info[part]["os"] = null;
            v_part_info[part]["label"] = null;
            results1.push(v_part_info[part]["lvm"] = null);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  get_disk_fake_length = function(disk) {
    var j, len1, length, part, ref, ref1;
    sort_v_disk_info(disk);
    length = 0;
    ref = v_disk_info[disk]["partitions"];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      part = ref[j];
      if ((ref1 = v_part_info[part]["type"]) === "normal" || ref1 === "logical" || ref1 === "freespace") {
        length += v_part_info[part]["length"];
      }
    }
    return v_disk_info[disk]["length"] = length;
  };

  sync_part_os = function() {
    var disk, item, j, len1, len2, len3, m, n, part, ref, ref1, results;
    results = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      ref = v_disk_info[disk]["partitions"];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        part = ref[m];
        if (v_part_info[part]["type"] !== "freespace") {
          v_part_info[part]["os"] = DCore.Installer.get_partition_os(part);
        }
      }
      ref1 = m_disk_info[disk]["partitions"];
      for (n = 0, len3 = ref1.length; n < len3; n++) {
        part = ref1[n];
        m_part_info[part]["os"] = DCore.Installer.get_partition_os(part);
      }
      if (Widget.look_up("part_table") != null) {
        results.push((function() {
          var len4, ref2, results1, t;
          ref2 = Widget.look_up("part_table").partitems;
          results1 = [];
          for (t = 0, len4 = ref2.length; t < len4; t++) {
            item = ref2[t];
            results1.push(item.update_device_os());
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  _sort_part_geom = function(part_a, part_b) {
    if (v_part_info[part_a]["start"] === v_part_info[part_b]["start"]) {
      if (v_part_info[part_a]["type"] === "extended") {
        return -1;
      } else if (v_part_info[part_b]["type"] === "extended") {
        return 1;
      } else {
        console.error("[part_util.coffee] _sort_part_geom() error, part type is invalid: " + v_part_info[part_a] + ", " + v_part_info[part_b]);
        return v_part_info[part_a]["end"] - v_part_info[part_b]["end"];
      }
    } else {
      return v_part_info[part_a]["start"] - v_part_info[part_b]["start"];
    }
  };

  sort_v_disk_info = function(disk) {
    return v_disk_info[disk]["partitions"].sort(_sort_part_geom);
  };

  _filter_extended = function(part, index) {
    return v_part_info[part]["type"] === "extended";
  };

  get_extended_partition = function(disk) {
    var extended;
    extended = v_disk_info[disk]["partitions"].filter(_filter_extended);
    if ((extended != null) && extended.length > 0) {
      return extended[0];
    }
  };

  is_in_extended = function(part) {
    var extended, ref;
    if ((ref = v_part_info[part]["type"]) === "normal" || ref === "extended") {
      return false;
    } else if (v_part_info[part]["type"] === "logical") {
      return true;
    } else if (v_part_info[part]["type"] === "freespace") {
      extended = get_extended_partition(v_part_info[part]["disk"]);
      if (extended != null) {
        if (v_part_info[part]["start"] >= v_part_info[extended]["start"] && v_part_info[part]["end"] <= v_part_info[extended]["end"]) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    } else {
      console.error("[part_util.coffee] is_in_extended() error, unknown part type: " + v_part_info[part]["type"]);
      return false;
    }
  };

  _filter_in_extended = function(part, index) {
    return is_in_extended(part);
  };

  _filter_not_in_extended = function(part, index) {
    return !is_in_extended(part);
  };

  _filter_normal = function(part, index) {
    return v_part_info[part]["type"] === "normal";
  };

  _filter_primary = function(part, index) {
    var ref;
    return (ref = v_part_info[part]["type"]) === "normal" || ref === "extended";
  };

  _filter_logical = function(part, index) {
    return v_part_info[part]["type"] === "logical";
  };

  _filter_freespace = function(part, index) {
    return v_part_info[part]["type"] === "freespace";
  };

  get_main_blocks = function(disk) {
    return v_disk_info[disk]["partitions"].filter(_filter_not_in_extended);
  };

  get_secondary_blocks = function(disk) {
    return v_disk_info[disk]["partitions"].filter(_filter_in_extended);
  };

  get_normal_partitions = function(disk) {
    return v_disk_info[disk]["partitions"].filter(_filter_normal);
  };

  get_primary_partitions = function(disk) {
    return v_disk_info[disk]["partitions"].filter(_filter_primary);
  };

  get_logical_partitions = function(disk) {
    return v_disk_info[disk]["partitions"].filter(_filter_logical);
  };

  get_freespace_partitions = function(disk) {
    return v_disk_info[disk]["partitions"].filter(_filter_freespace);
  };

  get_part_num = function(part) {
    var ref;
    if ((ref = v_part_info[part]["type"]) !== "normal" && ref !== "logical" && ref !== "extended") {
      console.error("[part_util.coffee] get_part_num() invalid part type: " + v_part_info[part]["type"] + ", part: " + part);
      return -1;
    }
    if (v_part_info[part]["path"] != null) {
      return parseInt(v_part_info[part]["path"].replace(/\D/g, ''));
    } else {
      console.error("[part_util.coffee] get_part_num() invalid part path: " + v_part_info[part]["path"] + ", part: " + part);
      return -1;
    }
  };

  is_in_same_block = function(part_a, part_b) {
    var disk, main_blocks;
    disk = v_part_info[part_a]["disk"];
    main_blocks = get_main_blocks(disk);
    if (indexOf.call(main_blocks, part_a) >= 0) {
      return indexOf.call(main_blocks, part_b) >= 0;
    } else {
      return indexOf.call(main_blocks, part_b) < 0;
    }
  };

  get_prev_part = function(part) {
    var disk, index, main_blocks, secondary_blocks;
    disk = v_part_info[part]["disk"];
    sort_v_disk_info(disk);
    main_blocks = get_main_blocks(disk);
    secondary_blocks = get_secondary_blocks(disk);
    if (indexOf.call(main_blocks, part) >= 0) {
      index = main_blocks.indexOf(part);
      if (index > 0) {
        return main_blocks[index - 1];
      }
    } else if (indexOf.call(secondary_blocks, part) >= 0) {
      index = secondary_blocks.indexOf(part);
      if (index > 0) {
        return secondary_blocks[index - 1];
      }
    } else {
      return console.error("[part_util.coffee] get_prev_part() error: part " + part + " is neither in main_blocks nor in secondary_blocks");
    }
  };

  get_next_part = function(part) {
    var disk, index, main_blocks, secondary_blocks;
    disk = v_part_info[part]["disk"];
    sort_v_disk_info(disk);
    main_blocks = get_main_blocks(disk);
    secondary_blocks = get_secondary_blocks(disk);
    if (indexOf.call(main_blocks, part) >= 0) {
      index = main_blocks.indexOf(part);
      if (index < main_blocks.length - 1) {
        return main_blocks[index + 1];
      }
    } else if (indexOf.call(secondary_blocks, part) >= 0) {
      index = secondary_blocks.indexOf(part);
      if (index < secondary_blocks.length - 1) {
        return secondary_blocks[index + 1];
      }
    } else {
      return console.error("[part_util.coffee] get_next_part() error: part " + part + " is neither in main_blocks nor in secondary_blocks");
    }
  };

  can_add_normal = function(part) {
    var disk, j, len1, logical, logical_after, logical_before, ref;
    if (v_part_info[part]["type"] !== "freespace") {
      return false;
    }
    disk = v_part_info[part]["disk"];
    if (get_primary_partitions(disk).length > v_disk_info[disk]["max_primary"] - 1) {
      return false;
    }
    if (is_in_extended(part)) {
      logical_before = false;
      logical_after = false;
      ref = get_logical_partitions(disk);
      for (j = 0, len1 = ref.length; j < len1; j++) {
        logical = ref[j];
        if (v_part_info[logical]["end"] < v_part_info[part]["start"]) {
          logical_before = true;
        }
        if (v_part_info[logical]["start"] > v_part_info[part]["end"]) {
          logical_after = true;
        }
      }
      if (logical_before && logical_after) {
        return false;
      }
    }
    return true;
  };

  can_add_logical = function(part) {
    var disk, extended, j, len1, len2, m, normal, ref, ref1;
    if (v_part_info[part]["type"] !== "freespace") {
      return false;
    }
    disk = v_part_info[part]["disk"];
    if (v_disk_info[disk]["type"] === "gpt") {
      return false;
    }
    extended = get_extended_partition(disk);
    if (extended != null) {
      if (v_part_info[part]["end"] < v_part_info[extended]["start"]) {
        ref = get_normal_partitions(disk);
        for (j = 0, len1 = ref.length; j < len1; j++) {
          normal = ref[j];
          if (v_part_info[normal]["start"] > v_part_info[part]["end"] && v_part_info[normal]["end"] < v_part_info[extended]["start"]) {
            return false;
          }
        }
      }
      if (v_part_info[part]["start"] > v_part_info[extended]["end"]) {
        ref1 = get_normal_partitions(disk);
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          normal = ref1[m];
          if (v_part_info[normal]["start"] > v_part_info[extended]["end"] && v_part_info[normal]["end"] < v_part_info[part]["start"]) {
            return false;
          }
        }
      }
    } else {
      if (get_normal_partitions(disk).length === v_disk_info[disk]["max_primary"]) {
        return false;
      }
    }
    return true;
  };

  update_part_fs = function(part, fs) {
    var ref, ref1;
    console.log("[part_util.coffee] update_part_fs(), part: " + part + ", fs: " + fs + ", path: " + v_part_info[part]["path"]);
    v_part_info[part]["fs"] = fs;
    if (fs === "unused" || fs === "fat16" || fs === "fat32" || fs === "ntfs" || fs === "swap" || fs === "efi") {
      v_part_info[part]["mp"] = "unused";
      if ((ref = Widget.look_up(part)) != null) {
        ref.fill_mount();
      }
    }
    if ((ref1 = Widget.look_up(part)) != null) {
      ref1.fill_format();
    }
    return mark_update(part);
  };

  update_part_format = function(part, format) {
    console.log("[part_util.coffee] update_part_format(), part: " + part + ", format: " + format + ", path: " + v_part_info[part]["path"]);
    v_part_info[part]["format"] = format;
    return mark_update(part);
  };

  update_part_mp = function(part, mp) {
    console.log("[part_util.coffee] update_part_mp(), part: " + part + ", mp: " + mp);
    v_part_info[part]["mp"] = mp;
    return mark_update(part);
  };

  update_part_display_path = function(part, op) {
    var current_num, disk, disk_path, item, j, len1, len2, m, maxnum, part_num, path_list, ref, ref1, ref2, ref3;
    disk = v_part_info[part]["disk"];
    disk_path = v_disk_info[disk]["path"];
    if (op === "add") {
      maxnum = 0;
      if (v_part_info[part]["type"] === "logical") {
        maxnum = 4;
        ref = get_logical_partitions(disk);
        for (j = 0, len1 = ref.length; j < len1; j++) {
          item = ref[j];
          part_num = get_part_num(item);
          if (part_num > maxnum) {
            maxnum = part_num;
          }
        }
        return v_part_info[part]["path"] = disk_path + (maxnum + 1);
      } else if ((ref1 = v_part_info[part]["type"]) === "normal" || ref1 === "extended") {
        path_list = get_primary_partitions(disk).map(get_part_num).sort();
        part_num = 1;
        while (indexOf.call(path_list, part_num) >= 0) {
          part_num++;
        }
        return v_part_info[part]["path"] = disk_path + part_num;
      } else {
        return console.error("[part_util.coffee] update_part_display_path(), invalid part type: " + v_part_info[part]["type"] + ", part: " + part + ", op: " + op);
      }
    } else if (op === "delete") {
      current_num = get_part_num(part);
      if (v_part_info[part]["type"] === "logical") {
        ref2 = get_logical_partitions(disk);
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          item = ref2[m];
          part_num = get_part_num(item);
          if (part_num > current_num) {
            v_part_info[item]["path"] = disk_path + (part_num - 1);
          }
        }
        return v_part_info[part]["path"] = "";
      } else if ((ref3 = v_part_info[part]["type"]) === "normal" || ref3 === "extended") {
        return v_part_info[part]["path"] = "";
      } else {
        return console.error("[part_util.coffee] update_part_display_path(), invalid part type: " + v_part_info[part]["type"] + ", part: " + part + ", op: " + op);
      }
    } else {
      return console.error("[part_util.coffee] update_part_display_path(), invalid op type: " + op + ", part: " + part);
    }
  };

  get_selected_mp = function() {
    var disk, j, len1, len2, m, mp_list, part, ref;
    mp_list = [];
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      ref = v_disk_info[disk]["partitions"];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        part = ref[m];
        if ((v_part_info[part]["mp"] != null) && v_part_info[part]["mp"] !== "unused") {
          mp_list.push(v_part_info[part]["mp"]);
        }
      }
    }
    return mp_list;
  };

  get_mp_partition = function(mp) {
    var disk, j, len1, len2, m, part, ref;
    for (j = 0, len1 = disks.length; j < len1; j++) {
      disk = disks[j];
      ref = v_disk_info[disk]["partitions"];
      for (m = 0, len2 = ref.length; m < len2; m++) {
        part = ref[m];
        if ((v_part_info[part]["mp"] != null) && v_part_info[part]["mp"] === mp) {
          return part;
        }
      }
    }
    return null;
  };

  _delete_normal = function(disk, part) {
    var extended_first, extended_first_index, extended_last, extended_last_index, next, next_index, prev, prev_index, secondary_blocks;
    console.log("[part_util.coffee] _delete_normal(), disk: " + disk + ", part: " + part);
    prev = get_prev_part(part);
    if (prev != null) {
      if (v_part_info[prev]["type"] === "freespace") {
        v_part_info[part]["start"] = v_part_info[prev]["start"];
        v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
        prev_index = v_disk_info[disk]["partitions"].indexOf(prev);
        v_disk_info[disk]["partitions"].splice(prev_index, 1);
        delete v_part_info[prev];
      } else if (v_part_info[prev]["type"] === "extended") {
        secondary_blocks = get_secondary_blocks(disk);
        if (secondary_blocks.length > 0) {
          extended_last = secondary_blocks[-1];
        }
        if ((extended_last != null) && v_part_info[extended_last]["type"] === "freespace") {
          v_part_info[part]["start"] = v_part_info[extended_last]["start"];
          v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
          mark_update(prev);
          v_part_info[prev]["end"] = v_part_info[extended_last]["start"] - 1;
          v_part_info[prev]["length"] = v_part_info[prev]["end"] - v_part_info[prev]["start"] + 1;
          v_part_info[prev]["width"] = Math.floor((v_part_info[prev]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
          extended_last_index = v_disk_info[disk]["partitions"].indexOf(extended_last);
          v_disk_info[disk]["partitions"].splice(extended_last, 1);
          delete v_part_info[extended_last];
        }
      }
    }
    next = get_next_part(part);
    if (next != null) {
      if (v_part_info[next]["type"] === "freespace") {
        v_part_info[part]["end"] = v_part_info[next]["end"];
        v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
        next_index = v_disk_info[disk]["partitions"].indexOf(next);
        v_disk_info[disk]["partitions"].splice(next_index, 1);
        return delete v_part_info[next];
      } else if (v_part_info[next]["type"] === "extended") {
        secondary_blocks = get_secondary_blocks(disk);
        if (secondary_blocks.length > 0) {
          extended_first = secondary_blocks[0];
        }
        if ((extended_first != null) && v_part_info[extended_first]["type"] === "freespace") {
          v_part_info[part]["end"] = v_part_info[extended_first]["end"];
          v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
          mark_update(next);
          v_part_info[next]["start"] = v_part_info[extended_first]["end"] + 1;
          v_part_info[next]["length"] = v_part_info[next]["end"] - v_part_info[next]["start"] + 1;
          v_part_info[next]["width"] = Math.floor((v_part_info[next]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
          extended_first_index = v_disk_info[disk]["partitions"].indexOf(extended_first);
          v_disk_info[disk]["partitions"].splice(extended_first_index, 1);
          return delete v_part_info[extended_first];
        }
      }
    }
  };

  _delete_logical = function(disk, part) {
    var after_extended, after_extended_index, before_extended, before_extended_index, extended, next, next_index, prev, prev_index;
    console.log("[part_util.coffee] _delete_logical() disk: " + disk + ", part: " + part);
    prev = get_prev_part(part);
    if (prev != null) {
      if (v_part_info[prev]["type"] === "freespace") {
        v_part_info[part]["start"] = v_part_info[prev]["start"];
        v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
        prev_index = v_disk_info[disk]["partitions"].indexOf(prev);
        v_disk_info[disk]["partitions"].splice(prev_index, 1);
        delete v_part_info[prev];
      }
    } else {
      extended = get_extended_partition(disk);
      if (extended != null) {
        before_extended = get_prev_part(extended);
      } else {
        console.error("[part_util.coffee] _delete_logical() handle prev part error, should already have an extended part, disk: " + disk + ", part: " + part);
      }
      if ((before_extended != null) && v_part_info[before_extended]["type"] === "freespace") {
        v_part_info[part]["start"] = v_part_info[before_extended]["start"];
        v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
        before_extended_index = v_disk_info[disk]["partitions"].indexOf(before_extended);
        v_disk_info[disk]["partitions"].splice(before_extended_index, 1);
        delete v_part_info[before_extended];
        mark_update(extended);
        v_part_info[extended]["start"] = v_part_info[part]["end"] + 1;
        v_part_info[extended]["length"] = v_part_info[extended]["end"] - v_part_info[extended]["start"] + 1;
        v_part_info[extended]["width"] = Math.floor((v_part_info[extended]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
      }
    }
    next = get_next_part(part);
    if (next != null) {
      if (v_part_info[next]["type"] === "freespace") {
        v_part_info[part]["end"] = v_part_info[next]["end"];
        v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
        next_index = v_disk_info[disk]["partitions"].indexOf(next);
        v_disk_info[disk]["partitions"].splice(next_index, 1);
        return delete v_part_info[next];
      }
    } else {
      extended = get_extended_partition(disk);
      if (extended != null) {
        after_extended = get_next_part(extended);
      } else {
        console.error("[part_util.coffee] _delete_logical() handle next part error, should already have an extended part, disk: " + disk + ", part: " + part);
      }
      if ((after_extended != null) && v_part_info[after_extended]["type"] === "freespace") {
        v_part_info[part]["end"] = v_part_info[after_extended]["end"];
        v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
        after_extended_index = v_disk_info[disk]["partitions"].indexOf(after_extended);
        v_disk_info[disk]["partitions"].splice(after_extended_index, 1);
        delete v_part_info[after_extended];
        mark_update(extended);
        v_part_info[extended]["end"] = v_part_info[part]["start"] - 1;
        v_part_info[extended]["length"] = v_part_info[extended]["end"] - v_part_info[extended]["start"] + 1;
        return v_part_info[extended]["width"] = Math.floor((v_part_info[extended]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
      }
    }
  };

  _delete_extended = function(disk, part) {
    var block, j, len1, next, next_index, part_index, prev, prev_index, secondarys;
    console.log("[part_util.coffee] _delete_extended(), disk: " + disk + ", part: " + part);
    mark_delete(part);
    secondarys = get_secondary_blocks(disk);
    for (j = 0, len1 = secondarys.length; j < len1; j++) {
      block = secondarys[j];
      part_index = v_disk_info[disk]["partitions"].indexOf(block);
      v_disk_info[disk]["partitions"].splice(part_index, 1);
      delete v_part_info[block];
    }
    prev = get_prev_part(part);
    if ((prev != null) && v_part_info[prev]["type"] === "freespace") {
      v_part_info[part]["start"] = v_part_info[prev]["start"];
      v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
      prev_index = v_disk_info[disk]["partitions"].indexOf(prev);
      v_disk_info[disk]["partitions"].splice(prev_index, 1);
      delete v_part_info[prev];
    }
    next = get_next_part(part);
    if ((next != null) && v_part_info[next]["type"] === "freespace") {
      v_part_info[part]["end"] = v_part_info[next]["end"];
      v_part_info[part]["length"] = v_part_info[part]["end"] - v_part_info[part]["start"] + 1;
      next_index = v_disk_info[disk]["partitions"].indexOf(next);
      v_disk_info[disk]["partitions"].splice(next_index, 1);
      delete v_part_info[next];
    }
    update_part_display_path(part, "delete");
    v_part_info[part]["type"] = "freespace";
    v_part_info[part]["fs"] = "";
    v_part_info[part]["os"] = "";
    v_part_info[part]["label"] = "";
    v_part_info[part]["mp"] = "unused";
    return v_part_info[part]["width"] = Math.round((v_part_info[part]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
  };

  delete_part = function(part) {
    var disk, extended, remain_part;
    console.log("[part_util.coffee] delete_part(), part: " + part);
    remain_part = part;
    mark_delete(part);
    disk = v_part_info[part]["disk"];
    if (v_part_info[part]["type"] === "normal") {
      _delete_normal(disk, part);
    } else if (v_part_info[part]["type"] === "logical") {
      _delete_logical(disk, part);
    } else {
      console.error("[part_util.coffee] delete_part(), invalid parttion type: " + v_part_info[part]["type"] + ", part: " + part);
    }
    update_part_display_path(part, "delete");
    v_part_info[part]["type"] = "freespace";
    v_part_info[part]["fs"] = "";
    v_part_info[part]["os"] = "";
    v_part_info[part]["label"] = "";
    v_part_info[part]["mp"] = "unused";
    v_part_info[part]["width"] = Math.floor((v_part_info[part]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
    v_part_info[part]["used"] = v_part_info[part]["length"];
    extended = get_extended_partition(disk);
    if ((extended != null) && get_logical_partitions(disk).length === 0) {
      _delete_extended(disk, extended);
      remain_part = extended;
    }
    sort_v_disk_info(disk);
    return remain_part;
  };

  _add_normal = function(disk, free_part) {
    var extended, secondary_blocks;
    console.log("[part_util.coffee] _add_normal(), disk: " + disk + ", free_part: " + free_part);
    extended = get_extended_partition(disk);
    if (extended != null) {
      if (v_part_info[extended]["start"] > v_part_info[free_part]["start"] && v_part_info[extended]["start"] < v_part_info[free_part]["end"]) {
        if (v_part_info[free_part]["end"] > v_part_info[extended]["end"]) {
          console.error("[part_util.coffee] _add_normal() invalid extended partition, " + extended + ", disk: " + disk);
        }
        v_part_info[extended]["start"] = v_part_info[free_part]["end"] + 1;
        mark_update(extended);
      }
      if (v_part_info[extended]["end"] > v_part_info[free_part]["start"] && v_part_info[extended]["end"] < v_part_info[free_part]["end"]) {
        if (v_part_info[free_part]["start"] < v_part_info[extended]["start"]) {
          console.error("[part_util.coffee] _add_normal() invalid extended partition, " + extended + ", disk: " + disk);
        }
        v_part_info[extended]["end"] = v_part_info[free_part]["start"] - 1;
        mark_update(extended);
      }
      if (v_part_info[extended]["start"] <= v_part_info[free_part]["start"] && v_part_info[extended]["end"] >= v_part_info[free_part]["end"]) {
        sort_v_disk_info(disk);
        secondary_blocks = get_secondary_blocks(disk);
        if (secondary_blocks != null) {
          if (secondary_blocks.indexOf(free_part) === 0) {
            v_part_info[extended]["start"] = v_part_info[free_part]["end"] + 1;
            mark_update(extended);
          } else if (secondary_blocks.indexOf(free_part) === secondary_blocks.length - 1) {
            v_part_info[extended]["end"] = v_part_info[free_part]["start"] - 1;
            mark_update(extended);
          } else {
            console.error("[part_util.coffee] _add_normal() error, cannot add a normal partion inside an extended partition, disk: " + disk);
          }
        } else {
          console.error("[part_util.coffee] _add_normal() error, invalid secondary blocks, disk: " + disk);
        }
      }
      v_part_info[extended]["length"] = v_part_info[extended]["end"] - v_part_info[extended]["start"] + 1;
      return v_part_info[extended]["width"] = Math.floor((v_part_info[extended]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
    }
  };

  _add_logical = function(disk, free_part) {
    var extended;
    console.log("[part_util.coffee] _add_logical(), disk: " + disk + ", free_part: " + free_part);
    if (get_extended_partition(disk) == null) {
      extended = DCore.Installer.rand_uuid("part");
      v_part_info[extended] = {};
      v_part_info[extended]["disk"] = disk;
      v_part_info[extended]["start"] = v_part_info[free_part]["start"];
      v_part_info[extended]["length"] = v_part_info[free_part]["length"];
      v_part_info[extended]["end"] = v_part_info[free_part]["end"];
      v_part_info[extended]["type"] = "extended";
      update_part_display_path(extended, "add");
      v_disk_info[disk]["partitions"].push(extended);
      return mark_add(extended);
    } else {
      extended = get_extended_partition(disk);
      if (v_part_info[extended]["start"] > v_part_info[free_part]["start"]) {
        v_part_info[extended]["start"] = v_part_info[free_part]["start"];
        mark_update(extended);
      }
      if (v_part_info[extended]["end"] < v_part_info[free_part]["end"]) {
        v_part_info[extended]["end"] = v_part_info[free_part]["end"];
        mark_update(extended);
      }
      v_part_info[extended]["length"] = v_part_info[extended]["end"] - v_part_info[extended]["start"] + 1;
      return v_part_info[extended]["width"] = Math.floor((v_part_info[extended]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
    }
  };

  add_part = function(free_part, type, size, align, fs, mp) {
    var disk, free_index, new_part;
    console.log("[part_util.coffee] add_part(), free_part: " + free_part + ", type: " + type + ", size: " + size + ", align: " + align + ", fs: " + fs + ", mp: " + mp);
    new_part = DCore.Installer.rand_uuid("part");
    disk = v_part_info[free_part]["disk"];
    v_part_info[new_part] = {};
    v_part_info[new_part]["disk"] = disk;
    v_part_info[new_part]["color"] = get_random_color();
    v_part_info[new_part]["format"] = true;
    v_part_info[new_part]["type"] = type;
    v_part_info[new_part]["align"] = align;
    v_part_info[new_part]["fs"] = fs;
    v_part_info[new_part]["mp"] = mp;
    v_part_info[new_part]["lvm"] = false;
    if (type === "normal") {
      _add_normal(disk, free_part);
    } else if (type === "logical") {
      _add_logical(disk, free_part);
    } else {
      console.error("[part_util.coffee] add_part() error, invalid partition type: " + type);
    }
    if (Math.abs(size - v_part_info[free_part]["length"]) < 10 * MB) {
      v_part_info[new_part]["start"] = v_part_info[free_part]["start"];
      v_part_info[new_part]["length"] = v_part_info[free_part]["length"];
      v_part_info[new_part]["end"] = v_part_info[free_part]["end"];
      free_index = v_disk_info[disk]["partitions"].indexOf(free_part);
      v_disk_info[disk]["partitions"].splice(free_index, 1);
      delete v_part_info[free_part];
    } else {
      if (align === "start") {
        v_part_info[new_part]["start"] = v_part_info[free_part]["start"];
        v_part_info[new_part]["length"] = size;
        v_part_info[new_part]["end"] = v_part_info[new_part]["start"] + v_part_info[new_part]["length"] - 1;
        v_part_info[free_part]["start"] = v_part_info[new_part]["end"] + 1;
        v_part_info[free_part]["length"] = v_part_info[free_part]["end"] - v_part_info[free_part]["start"] + 1;
      } else {
        v_part_info[new_part]["length"] = size;
        v_part_info[new_part]["end"] = v_part_info[free_part]["end"];
        v_part_info[new_part]["start"] = v_part_info[new_part]["end"] - v_part_info[new_part]["length"] + 1;
        v_part_info[free_part]["end"] = v_part_info[new_part]["start"] - 1;
        v_part_info[free_part]["length"] = v_part_info[free_part]["end"] - v_part_info[free_part]["start"] + 1;
      }
      v_part_info[free_part]["width"] = Math.floor((v_part_info[free_part]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
    }
    console.log("[part_util.coffee] add_part() start of new_part:", v_part_info[new_part]["start"]);
    if (v_part_info[new_part]["start"] < MINIMUM_PRECEDING_SIZE) {
      v_part_info[new_part]["start"] = MINIMUM_PRECEDING_SIZE;
      v_part_info[new_part]["length"] = v_part_info[new_part]["end"] - v_part_info[new_part]["start"];
    }
    update_part_display_path(new_part, "add");
    v_part_info[new_part]["width"] = Math.floor((v_part_info[new_part]["length"] / v_disk_info[disk]["length"]) * 100) + "%";
    v_part_info[new_part]["used"] = v_part_info[new_part]["length"];
    v_disk_info[disk]["partitions"].push(new_part);
    sort_v_disk_info(disk);
    mark_add(new_part);
    return new_part;
  };

  undo_part_table_info = function() {
    if (__init_parted_finish) {
      init_v_disk_info();
      init_v_part_info();
      init_m_disk_info();
      return init_m_part_info();
    } else {
      return setTimeout((function(_this) {
        return function() {
          return undo_part_table_info();
        };
      })(this), 1000);
    }
  };

  __selected_target = null;

  __selected_home = null;

  __selected_bootloader = null;

  __selected_disk = null;

  __selected_item = null;

  __selected_line = null;

  __selected_mode = "simple";

  __selected_stage = null;

  PartLineItem = (function(superClass) {
    extend(PartLineItem, superClass);

    function PartLineItem(id1) {
      this.id = id1;
      PartLineItem.__super__.constructor.apply(this, arguments);
      this.part = this.id.slice(4, 16);
      this.init_line_item();
    }

    PartLineItem.prototype.init_line_item = function() {
      var disk;
      disk = v_part_info[this.part]["disk"];
      this.color = v_part_info[this.part]["color"];
      this.element.style.background = this.color;
      this.element.style.width = Math.round(v_part_info[this.part]["length"] / v_disk_info[disk]["length"] * 700);
      this.element.style.left = Math.round(v_part_info[this.part]["start"] / v_disk_info[disk]["length"] * 700);
      return this.mask = create_element("div", "Mask", this.element);
    };

    PartLineItem.prototype.focus = function() {
      var ref;
      this.passive_focus();
      return (ref = Widget.look_up(this.part)) != null ? ref.passive_focus() : void 0;
    };

    PartLineItem.prototype.passive_focus = function() {
      if (__selected_line != null) {
        __selected_line.blur();
      }
      __selected_line = this;
      return this.element.setAttribute("class", "PartLineItemActive");
    };

    PartLineItem.prototype.blur = function() {
      return this.element.setAttribute("class", "PartLineItem");
    };

    PartLineItem.prototype.do_click = function(e) {
      if (__selected_line !== this) {
        return this.focus();
      }
    };

    return PartLineItem;

  })(Widget);

  PartLineMaps = (function(superClass) {
    extend(PartLineMaps, superClass);

    function PartLineMaps(id1) {
      this.id = id1;
      PartLineMaps.__super__.constructor.apply(this, arguments);
      this.fill_linemap();
    }

    PartLineMaps.prototype.fill_linemap = function() {
      var item, j, len1, part, ref, ref1, results;
      this.element.innerHTML = "";
      this.disk_line = create_element("div", "Line", this.element);
      get_disk_fake_length(__selected_disk);
      ref = v_disk_info[__selected_disk]["partitions"];
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        part = ref[j];
        if ((ref1 = v_part_info[part]["type"]) === "normal" || ref1 === "logical" || ref1 === "freespace") {
          item = new PartLineItem("line" + part);
          results.push(this.disk_line.appendChild(item.element));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return PartLineMaps;

  })(Widget);

  PartTableItem = (function(superClass) {
    extend(PartTableItem, superClass);

    function PartTableItem(id1) {
      this.id = id1;
      PartTableItem.__super__.constructor.apply(this, arguments);
      this.lineid = "line" + this.id;
      this.active = false;
      this.device = create_element("div", "Fat", this.element);
      this.size = create_element("div", "Thin Size", this.element);
      this.used = create_element("div", "Thin", this.element);
      this.fs = create_element("div", "Thin Fs", this.element);
      this.mount = create_element("div", "Thin SimpleMount", this.element);
      this.format = create_element("div", "Thin", this.element);
      this.fill_device();
      this.fill_size();
      this.update_part_used();
      this.fill_fs();
      this.fill_mount();
      this.fill_format();
    }

    PartTableItem.prototype.fill_device = function() {
      var txt;
      this.device.innerHTML = "";
      this.lock = create_element("span", "Lock", this.device);
      this.os = create_element("span", "Os", this.device);
      this.color = create_element("span", "Color", this.device);
      this.lp = create_element("span", "LabelPath", this.device);
      this.label = create_element("div", "Label", this.lp);
      this.path = create_element("div", "Path", this.lp);
      this.label.addEventListener("mouseover", (function(_this) {
        return function(e) {
          return _this.show_detail_label();
        };
      })(this));
      this.label.addEventListener("mouseout", (function(_this) {
        return function(e) {
          return _this.hide_detail_label();
        };
      })(this));
      if (__selected_mode === "advance") {
        this.fill_device_advance();
      } else if (__selected_mode === "simple") {
        this.fill_device_simple();
      }
      txt = this.path.innerText;
      this.path.title = this.path.innerText;
      this.path.addEventListener("mouseover", (function(_this) {
        return function(e) {
          if ((typeof os !== "undefined" && os !== null) && os.length > 2) {
            _this.path.innerText = DCore.Installer.get_partition_os_desc(_this.id).split("(")[0].trim();
            return _this.path.title = _this.path.innerText;
          }
        };
      })(this));
      return this.path.addEventListener("mouseout", (function(_this) {
        return function(e) {
          _this.path.innerText = txt;
          return _this.path.title = _this.path.innerText;
        };
      })(this));
    };

    PartTableItem.prototype.fill_device_advance = function() {
      var color_value, os;
      if (v_part_info[this.id]["type"] !== "freespace") {
        this.path.innerText = v_part_info[this.id]["path"];
      } else {
        this.path.innerText = _("Freespace");
      }
      if ((v_part_info[this.id]["label"] != null) && v_part_info[this.id]["label"].length > 0) {
        if (v_part_info[this.id]["label"].length > 12) {
          this.label.innerText = v_part_info[this.id]["label"].substring(0, 12) + "...";
        } else {
          this.label.innerText = v_part_info[this.id]["label"];
        }
      } else {
        this.label.style.display = "none";
        this.path.setAttribute("style", "margin:10px 0;");
      }
      color_value = v_part_info[this.id]["color"];
      this.color.style.background = color_value;
      this.color.style.display = "block";
      os = v_part_info[this.id]["os"];
      return this.update_device_os(os);
    };

    PartTableItem.prototype.fill_device_simple = function() {
      var os;
      if (m_part_info[this.id]["type"] !== "freespace") {
        this.path.innerText = m_part_info[this.id]["path"];
      } else {
        this.path.innerText = _("Freespace");
      }
      if ((m_part_info[this.id]["label"] != null) && m_part_info[this.id]["label"].length > 0) {
        if (m_part_info[this.id]["label"].length > 12) {
          this.label.innerText = m_part_info[this.id]["label"].substring(0, 12) + "...";
        } else {
          this.label.innerText = m_part_info[this.id]["label"];
        }
      } else {
        this.label.style.display = "none";
        this.path.setAttribute("style", "margin:10px 0;");
      }
      this.color.style.display = "none";
      os = m_part_info[this.id]["os"];
      return this.update_device_os(os);
    };

    PartTableItem.prototype.show_detail_label = function() {
      if (this.label_detail == null) {
        this.label_detail = create_element("div", "LabelDetail", this.label);
        if (__selected_mode === "advance") {
          this.label_detail.innerText = v_part_info[this.id]["label"];
        } else {
          this.label_detail.innerText = m_part_info[this.id]["label"];
        }
      }
      return this.label_detail.style.display = "block";
    };

    PartTableItem.prototype.hide_detail_label = function() {
      if (this.label_detail != null) {
        return this.label_detail.style.display = "none";
      }
    };

    PartTableItem.prototype.update_device_os = function(os) {
      var os_img;
      console.log("[part.coffee] PartTableItem.update_device_os, os: " + os);
      if ((os != null) && os.length > 2) {
        if (os.toLowerCase().indexOf("deepin") !== -1) {
          os_img = "images/deepin.png";
        } else if (os.toLowerCase().indexOf("linux") !== -1) {
          os_img = "images/linux.png";
        } else if (os.toLowerCase().indexOf("windows") !== -1) {
          os_img = "images/windows.png";
        } else if (os.toLowerCase().indexOf("mac") !== -1) {
          os_img = "images/mac.png";
        } else {
          os_img = "images/linux.png";
        }
        return create_img("", os_img, this.os);
      }
    };

    PartTableItem.prototype.fill_size = function() {
      this.size.innerHTML = "";
      if (__selected_mode === "advance") {
        return this.size.innerText += (v_part_info[this.id]["length"] / GB).toFixed(1) + "G";
      } else {
        return this.size.innerText += (m_part_info[this.id]["length"] / GB).toFixed(1) + "G";
      }
    };

    PartTableItem.prototype.update_part_used = function() {
      this.used.innerHTML = "";
      if (__selected_mode === "advance" && v_part_info[this.id]["type"] !== "freespace") {
        if (isNaN(v_part_info[this.id]["used"])) {
          return this.used.innerText = _("Unknown");
        } else {
          return this.used.innerText = (v_part_info[this.id]["used"] / GB).toFixed(1) + "G";
        }
      } else if (__selected_mode === "simple" && m_part_info[this.id]["type"] !== "freespace") {
        if (isNaN(m_part_info[this.id]["used"])) {
          return this.used.innerText = _("Unknown");
        } else {
          return this.used.innerText = (m_part_info[this.id]["used"] / GB).toFixed(1) + "G";
        }
      }
    };

    PartTableItem.prototype.fill_format = function() {
      this.format.innerHTML = "";
      if (__selected_mode === "advance") {
        return this.fill_format_advance();
      } else {
        return this.format.style.display = "none";
      }
    };

    PartTableItem.prototype.fill_format_advance = function() {
      if ((v_part_info[this.id] == null) || v_part_info[this.id]["type"] === "freespace") {
        return;
      }
      this.format_img = create_img("Format", "images/check-01.png", this.format);
      if (!this.active) {
        if (v_part_info[this.id]["format"]) {
          this.format_img.setAttribute("src", "images/check-02.png");
        } else {
          this.format_img.setAttribute("src", "images/check-01.png");
        }
      } else {
        if (v_part_info[this.id]["format"]) {
          this.format_img.setAttribute("src", "images/check-04.png");
        } else {
          this.format_img.setAttribute("src", "images/check-03.png");
        }
      }
      if (this.is_busy()) {
        this.format_img.setAttribute("src", "images/check-05.png");
      } else if (this.is_format_mandatory()) {
        this.format_img.setAttribute("src", "images/check-06.png");
      }
      this.format_img.addEventListener("click", (function(_this) {
        return function(e) {
          if (_this.is_busy()) {
            return _this.format_img.setAttribute("src", "images/check-05.png");
          } else if (_this.is_format_mandatory()) {
            update_part_format(_this.id, true);
            return _this.format_img.setAttribute("src", "images/check-06.png");
          } else {
            if (v_part_info[_this.id]["format"]) {
              update_part_format(_this.id, false);
              return _this.format_img.setAttribute("src", "images/check-03.png");
            } else {
              update_part_format(_this.id, true);
              return _this.format_img.setAttribute("src", "images/check-04.png");
            }
          }
        };
      })(this));
      return this.format.style.display = "block";
    };

    PartTableItem.prototype.is_format_mandatory = function() {
      var ref;
      if (v_part_info[this.id]["type"] === "freespace") {
        return false;
      }
      if ((ref = this.id, indexOf.call(m_disk_info[v_part_info[this.id]["disk"]]["partitions"], ref) < 0) || m_part_info[this.id]["op"] === "add") {
        return true;
      }
      if (m_part_info[this.id]["fs"] !== v_part_info[this.id]["fs"]) {
        return true;
      }
      return false;
    };

    PartTableItem.prototype.fill_fs = function() {
      this.fs.innerHTML = "";
      if (__selected_mode === "simple") {
        return this.fill_fs_simple();
      } else if (__selected_mode === "advance") {
        return this.fill_fs_advance();
      } else {
        return assert(false, "not_reached");
      }
    };

    PartTableItem.prototype.fill_fs_advance = function() {
      if ((v_part_info[this.id] == null) || v_part_info[this.id]["type"] === "freespace") {
        return;
      }
      if (this.active) {
        this.fs_select = new DropDown("dd_fs_" + this.id, false, (function(_this) {
          return function(data) {
            return _this.fs_change_cb(_this.id, data);
          };
        })(this));
        this.fs.appendChild(this.fs_select.element);
        if (__selected_use_uefi) {
          this.fs_select.set_drop_items(__fs_efi_keys, __fs_efi_values);
        } else {
          this.fs_select.set_drop_items(__fs_keys, __fs_values);
        }
        this.fs_select.set_base_background("-webkit-gradient(linear, left top, left bottom, from(rgba(133,133,133,0.6)), color-stop(0.1, rgba(255,255,255,0.6)), to(rgba(255,255,255,0.6)));");
        this.fs_select.set_selected(v_part_info[this.id]["fs"]);
        return this.fs_select.show_drop();
      } else {
        this.fs_txt = create_element("div", "", this.fs);
        if (v_part_info[this.id]["fs"] !== "unused") {
          return this.fs_txt.innerText = v_part_info[this.id]["fs"];
        } else {
          return this.fs_txt.innerText = "";
        }
      }
    };

    PartTableItem.prototype.fill_fs_simple = function() {
      if ((m_part_info[this.id] != null) && m_part_info[this.id]["type"] !== "freespace") {
        this.fs_txt = create_element("div", "", this.fs);
        if (m_part_info[this.id]["fs"] !== "unused") {
          return this.fs_txt.innerText = m_part_info[this.id]["fs"];
        } else {
          return this.fs_txt.innerText = "";
        }
      }
    };

    PartTableItem.prototype.fs_change_cb = function(part, fs) {
      var ref, ref1, ref2;
      if (fs === "efi" || fs === "swap" || fs === "unused" || fs === "fat16" || fs === "fat32" || fs === "ntfs") {
        if ((ref = Widget.look_up("dd_mp_" + part)) != null) {
          ref.hide_drop();
        }
      } else {
        if ((ref1 = Widget.look_up("dd_mp_" + part)) != null) {
          ref1.set_drop_items(__mp_keys, __mp_values);
        }
        if ((ref2 = Widget.look_up("dd_mp_" + part)) != null) {
          ref2.show_drop();
        }
      }
      return update_part_fs(part, fs);
    };

    PartTableItem.prototype.fill_mount = function() {
      this.mount.innerHTML = "";
      if (__selected_mode !== "advance") {
        this.mount.setAttribute("class", "Thin SimpleMount");
        if (this.active) {
          this.mount.innerText = _("Install Here");
        }
      } else {
        this.mount.setAttribute("class", "Thin AdvancedMount");
        return this.fill_mount_advance();
      }
    };

    PartTableItem.prototype.fill_mount_advance = function() {
      var ref, ref1;
      if ((v_part_info[this.id] == null) || v_part_info[this.id]["type"] === "freespace") {
        return;
      }
      if (this.active) {
        this.mount_select = new DropDown("dd_mp_" + this.id, true, (function(_this) {
          return function(data) {
            return _this.mp_change_cb(_this.id, data);
          };
        })(this));
        this.mount.appendChild(this.mount_select.element);
        if (v_part_info[this.id]["fs"] != null) {
          this.mount_select.set_drop_items(__mp_keys, __mp_values);
        }
        this.mount_select.set_base_background("-webkit-gradient(linear, left top, left bottom, from(rgba(133,133,133,0.6)), color-stop(0.1, rgba(255,255,255,0.6)), to(rgba(255,255,255,0.6)));");
        if (v_part_info[this.id]["mp"].substring(0, 1) !== "/") {
          v_part_info[this.id]["mp"] = "unused";
        }
        this.mount_select.set_selected(v_part_info[this.id]["mp"]);
        this.mount_select.show_drop();
        if ((ref = v_part_info[this.id]["fs"]) === "efi" || ref === "swap" || ref === "unused" || ref === "fat16" || ref === "fat32" || ref === "ntfs") {
          this.mount_select.hide_drop();
        }
      } else {
        if ((ref1 = v_part_info[this.id]["fs"]) !== "efi" && ref1 !== "swap" && ref1 !== "unused" && ref1 !== "fat16" && ref1 !== "fat32" && ref1 !== "ntfs") {
          this.mount_txt = create_element("div", "", this.mount);
          if (v_part_info[this.id]["mp"] === "unused") {
            return this.mount_txt.innerText = "";
          } else {
            return this.mount_txt.innerText = v_part_info[this.id]["mp"];
          }
        }
      }
    };

    PartTableItem.prototype.mp_change_cb = function(partid, mp) {
      var part, ref;
      console.log("[part.coffee] PartTableItem.mp_change_cb(), partid: " + partid + ", mp: " + mp);
      if (mp.substring(0, 1) !== "/") {
        mp = "unused";
      }
      if (mp === "/boot" && v_part_info[partid]["length"] < BOOT_SIZE_MIN) {
        new MessageDialog(_("Warning"), _("You  may not boot due to too small space of /boot mount point, please improve the space to 300M at least.")).show_at(document.body);
        return false;
      }
      if (indexOf.call(get_selected_mp(), mp) >= 0) {
        part = get_mp_partition(mp);
        if ((part != null) && part !== partid) {
          v_part_info[part]["mp"] = "unused";
          if ((ref = Widget.look_up(part)) != null) {
            ref.fill_mount();
          }
        } else {
          console.error("[part.coffee] PartTableItem.mp_change_cb() error, invalid part: " + part + ", partid: " + partid);
        }
      }
      return update_part_mp(partid, mp);
    };

    PartTableItem.prototype.set_btn_status = function() {
      var add_btn, delete_btn, type;
      if (__selected_mode !== "advance") {
        return;
      }
      type = v_part_info[this.id]["type"];
      add_btn = document.getElementById("part_add");
      delete_btn = document.getElementById("part_delete");
      if (type === "freespace") {
        if (!can_add_normal(this.id) && !can_add_logical(this.id)) {
          add_btn.setAttribute("class", "PartAddBtn");
        } else {
          add_btn.setAttribute("class", "PartAddBtnActive");
        }
        delete_btn.setAttribute("class", "PartDeleteBtn");
      } else if (type === "normal" || type === "logical") {
        add_btn.setAttribute("class", "PartAddBtn");
        delete_btn.setAttribute("class", "PartDeleteBtnActive");
      } else {
        add_btn.setAttribute("class", "PartAddBtn");
        delete_btn.setAttribute("class", "PartDeleteBtn");
      }
      if (type !== "disk" && v_part_info[this.id]["lvm"]) {
        add_btn.setAttribute("class", "PartAddBtn");
        return delete_btn.setAttribute("class", "PartDeleteBtn");
      }
    };

    PartTableItem.prototype.focus = function() {
      var ref, ref1;
      this.passive_focus();
      if ((ref = Widget.look_up("part_line_maps")) != null) {
        ref.fill_linemap();
      }
      return (ref1 = Widget.look_up(this.lineid)) != null ? ref1.passive_focus() : void 0;
    };

    PartTableItem.prototype.passive_focus = function() {
      var style;
      if (__selected_item != null) {
        __selected_item.blur();
      }
      __selected_item = this;
      this.element.scrollIntoView();
      this.active = true;
      this.fill_fs();
      this.fill_mount();
      this.set_btn_status();
      this.check_busy();
      this.fill_format();
      style = "background:rgba(255,255,3,0.3);";
      style += "font-style:bold;";
      style += "text-shadow:0 1px 2px rgba(0,0,0,0.7);";
      this.element.setAttribute("style", style);
      return this.onfocus = true;
    };

    PartTableItem.prototype.blur = function() {
      this.active = false;
      this.fill_fs();
      this.fill_mount();
      this.fill_format();
      this.lock.innerHTML = "";
      this.element.setAttribute("style", "");
      return this.onfocus = false;
    };

    PartTableItem.prototype.is_busy = function() {
      var ref, ref1;
      if (__selected_mode === "advance") {
        if ((v_part_info[this.id]["lvm"] != null) && v_part_info[this.id]["lvm"] === true) {
          return true;
        }
      } else {
        if (ref = this.id, indexOf.call(m_disk_info[v_part_info[this.id]["disk"]]["partitions"], ref) >= 0) {
          if ((m_part_info[this.id]["lvm"] != null) && m_part_info[this.id]["lvm"] === true) {
            return true;
          }
        }
      }
      if (ref1 = this.id, indexOf.call(m_disk_info[__selected_disk]["partitions"], ref1) >= 0) {
        if (DCore.Installer.is_partition_busy(this.id)) {
          return true;
        }
      }
      return false;
    };

    PartTableItem.prototype.do_click = function(e) {
      if (__selected_item !== this) {
        return this.focus();
      }
    };

    PartTableItem.prototype.lock_busy = function() {
      var delete_btn, ref, ref1;
      this.lock.innerHTML = "";
      if (__selected_mode === "advance") {
        create_img("", "images/lock.png", this.lock);
        delete_btn = document.getElementById("part_delete");
        delete_btn.setAttribute("class", "PartDeleteBtn");
        if ((ref = this.fs_select) != null) {
          ref.set_list_enable(false);
        }
        return (ref1 = this.mount_select) != null ? ref1.set_list_enable(false) : void 0;
      }
    };

    PartTableItem.prototype.unbusy = function() {
      var ref, ref1;
      this.lock.innerHTML = "";
      if (__selected_mode === "advance") {
        if ((ref = this.fs_select) != null) {
          ref.set_list_enable(true);
        }
        return (ref1 = this.mount_select) != null ? ref1.set_list_enable(true) : void 0;
      }
    };

    PartTableItem.prototype.check_busy = function() {
      if (this.is_busy()) {
        return this.lock_busy();
      } else {
        return this.unbusy();
      }
    };

    return PartTableItem;

  })(Widget);

  DiskTab = (function(superClass) {
    extend(DiskTab, superClass);

    function DiskTab(id1) {
      this.id = id1;
      DiskTab.__super__.constructor.apply(this, arguments);
      this.prev = create_element("div", "Prev", this.element);
      enable_tab(this.prev);
      this.prev.addEventListener("click", (function(_this) {
        return function(e) {
          _this.prev.style.background = "images/arrow_left_press.png";
          return _this.switch_prev();
        };
      })(this));
      this.content = create_element("div", "Content", this.element);
      this.next = create_element("div", "Next", this.element);
      enable_tab(this.next);
      this.next.addEventListener("click", (function(_this) {
        return function(e) {
          _this.next.style.background = "images/arrow_right_press.png";
          return _this.switch_next();
        };
      })(this));
      if (disks.length < 2) {
        this.element.style.display = "none";
      }
    }

    DiskTab.prototype.focus_disk = function(disk) {
      var index, ref, ref1, ref2, size;
      index = disks.indexOf(disk) + 1;
      if (index > 0) {
        __selected_disk = disk;
        size = (v_disk_info[disk]["length"] / GB).toFixed(0);
        this.content.innerText = _("Disk") + index + "  (" + +size + "GB) ";
        if ((ref = Widget.look_up("part_line_maps")) != null) {
          ref.fill_linemap();
        }
        if ((ref1 = Widget.look_up("part_table")) != null) {
          ref1.fill_items();
        }
        return (ref2 = Widget.look_up(__selected_item != null ? __selected_item.id : void 0)) != null ? ref2.focus() : void 0;
      }
    };

    DiskTab.prototype.switch_prev = function() {
      var index;
      index = disks.indexOf(__selected_disk);
      if (index > 0) {
        return this.focus_disk(disks[index - 1]);
      }
    };

    DiskTab.prototype.switch_next = function() {
      var index;
      index = disks.indexOf(__selected_disk);
      if (index < disks.length) {
        return this.focus_disk(disks[index + 1]);
      }
    };

    return DiskTab;

  })(Widget);

  PartTable = (function(superClass) {
    extend(PartTable, superClass);

    function PartTable(id1) {
      this.id = id1;
      this.key_select = bind(this.key_select, this);
      PartTable.__super__.constructor.apply(this, arguments);
      this.header = create_element("div", "PartTableHeader", this.element);
      this.device_header = create_element("div", "Fat", this.header);
      this.device_header.innerText = _("Device");
      this.size_header = create_element("div", "Size", this.header);
      this.size_header.innerText = _("Size");
      this.used_header = create_element("div", "Thin", this.header);
      this.used_header.innerText = _("Free Space");
      this.fs_header = create_element("div", "Fs", this.header);
      this.fs_header.innerText = _("Filesystem");
      this.info_header = create_element("div", "Info", this.header);
      this.info_header.innerText = _("Information");
      this.mount_header = create_element("div", "Mount", this.header);
      this.mount_header.innerText = _("Mount Point");
      this.format_header = create_element("div", "Thin", this.header);
      this.format_header.innerText = _("Formatting");
      this.items = create_element("div", "PartTableItems", this.element);
      this.op = create_element("div", "PartOp", this.element);
      this.part_delete = create_element("div", "PartDeleteBtn", this.op);
      this.part_delete.setAttribute("id", "part_delete");
      this.part_delete.innerText = _("Delete Partition");
      this.part_delete.addEventListener("click", (function(_this) {
        return function(e) {
          console.log("[part.coffee] PartTable.constructor() handle click(delete) event");
          if (__in_model) {
            console.warn("[part.coffee] PartTable.constructor() handle click(delete) event, delete-part-mode-dialog exists, ignored!");
            return;
          }
          return new DeletePartDialog("DeleteModel", __selected_item.id).show_at(document.body);
        };
      })(this));
      this.part_add = create_element("div", "PartAddBtn", this.op);
      this.part_add.setAttribute("id", "part_add");
      this.part_add.innerText = _("New Partition");
      this.part_add.addEventListener("click", (function(_this) {
        return function(e) {
          console.log("[part.coffee] PartTable.constructor() handle click(add) event");
          if (__in_model) {
            console.warn("[part.coffee] PartTable.constructor() handle click(add) event, add-part-mode-dialog exists, ignored!");
            return;
          }
          _this.add_model = new AddPartDialog("AddModel", __selected_item.id);
          return _this.add_model.show_at(document.body);
        };
      })(this));
      this.update_mode(__selected_mode);
    }

    PartTable.prototype.fill_items = function() {
      this.items.innerHTML = "";
      this.partitems = [];
      if (__selected_mode === "advance") {
        return this.fill_items_advance();
      } else {
        return this.fill_items_simple();
      }
    };

    PartTable.prototype.key_select = function(enter_cb) {
      enable_tab(this.element);
      return this.element.addEventListener("keyup", (function(_this) {
        return function(e) {
          var currentIndex, i, item, j, len1, ref, select;
          e.stopPropagation();
          ref = _this.partitems;
          for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
            item = ref[i];
            if (item.onfocus) {
              currentIndex = i;
            }
          }
          switch (e.keyCode) {
            case KEYCODE.UP_ARROW:
              currentIndex--;
              break;
            case KEYCODE.DOWN_ARROW:
              currentIndex++;
              break;
            case KEYCODE.ENTER:
              console.log("[part.coffee] PartTable.key_select() ENTER key pressed");
              if (typeof enter_cb === "function") {
                enter_cb();
              }
              break;
            default:
              return;
          }
          if (currentIndex < 0) {
            currentIndex = _this.partitems.length - 1;
          } else if (currentIndex > _this.partitems.length - 1) {
            currentIndex = 0;
          }
          console.debug("[part.coffee] PartTable.key_select() currentIndex: " + currentIndex);
          select = _this.partitems[currentIndex];
          if (select) {
            select.focus();
          }
        };
      })(this));
    };

    PartTable.prototype.fill_items_advance = function() {
      var disk, item, j, len1, part, ref, ref1;
      this.info_header.style.display = "none";
      this.mount_header.style.display = "block";
      this.format_header.style.display = "block";
      this.op.style.display = "block";
      disk = __selected_disk;
      ref = v_disk_info[disk]["partitions"];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        part = ref[j];
        if ((ref1 = v_part_info[part]["type"]) === "normal" || ref1 === "logical" || ref1 === "freespace") {
          item = new PartTableItem(part);
          this.items.appendChild(item.element);
          this.partitems.push(item);
        }
      }
      this.items.setAttribute("style", "height:222px");
      return this.element.setAttribute("style", "height:280px");
    };

    PartTable.prototype.fill_items_simple = function() {
      var disk, item, j, len1, part, ref, ref1;
      this.format_header.style.display = "none";
      this.mount_header.style.display = "none";
      this.op.style.display = "none";
      this.info_header.style.display = "block";
      disk = __selected_disk;
      ref = m_disk_info[disk]["partitions"];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        part = ref[j];
        if (((ref1 = m_part_info[part]["type"]) === "normal" || ref1 === "logical" || ref1 === "freespace") && m_part_info[part]["op"] !== "add") {
          item = new PartTableItem(part);
          this.items.appendChild(item.element);
          this.partitems.push(item);
        }
      }
      this.items.setAttribute("style", "");
      return this.element.setAttribute("style", "");
    };

    PartTable.prototype.update_mode = function(mode) {
      var id;
      if (__selected_item != null) {
        id = __selected_item.id;
        __selected_item = null;
      } else {
        id = null;
      }
      this.fill_items();
      if (id != null) {
        __selected_item = Widget.look_up(id);
        return __selected_item != null ? __selected_item.focus() : void 0;
      }
    };

    return PartTable;

  })(Widget);

  Part = (function(superClass) {
    extend(Part, superClass);

    function Part(id1) {
      var recommand, ref;
      this.id = id1;
      this.unmount_part = bind(this.unmount_part, this);
      this.start_install_cb = bind(this.start_install_cb, this);
      Part.__super__.constructor.apply(this, arguments);
      this.titleimg = create_img("", "images/progress_part.png", this.titleprogress);
      this.helpset = create_element("div", "TitleSet", this.title);
      this.t_mode = create_element("div", "PartTitleMode", this.helpset);
      enable_tab(this.t_mode);
      this.t_mode.innerText = _("Expert Mode");
      this.t_mode.addEventListener("click", (function(_this) {
        return function(e) {
          _this.t_mode.setAttribute("class", "PartTitleMode TitlesetActive");
          return _this.switch_mode();
        };
      })(this));
      this.wrap = create_element("div", "part_wrap", this.element);
      this.init_part_page();
      this.next_step = new NextStep("mynextstep", _("Install"), this.start_install_cb);
      this.wrap.appendChild(this.next_step.element);
      this.next_step.set_pos("absolute", "285px", "20px");
      this.next_step.next_bt_disable();
      this.switch_mode_simple();
      recommand = get_recommand_target();
      if (recommand != null) {
        this.disktab.focus_disk(m_part_info[recommand]["disk"]);
        if ((ref = Widget.look_up(recommand)) != null) {
          ref.focus();
        }
      } else {
        this.disktab.focus_disk(__selected_disk);
      }
      if (__selected_item != null) {
        this.next_step.next_bt_enable();
      }
      this.confirm_installation_dialog = null;
    }

    Part.prototype.start_install_cb = function() {
      if (__selected_mode === "advance") {
        return this.handle_install_advance();
      } else {
        return this.handle_install_simple();
      }
    };

    Part.prototype.handle_install_advance = function() {
      var callback, esp_uuid, ref, target;
      __selected_use_uefi = this.uefi_radio.checked;
      target = get_target_part();
      if (target == null) {
        new MessageDialog(_("Installation Tips"), _("A root partition (/) is required.")).show_at(document.body);
        return;
      }
      if (__selected_use_uefi) {
        if (!DCore.Installer.disk_is_gpt(__selected_disk)) {
          new MessageDialog(_("Installation Tips"), _("UEFI-native installation only supports GPT-formatted disk.")).show_at(document.body);
          return;
        }
        esp_uuid = get_efi_boot_part();
        if (!esp_uuid || v_part_info[esp_uuid]["length"] < 100 * MB) {
          new MessageDialog(_("Installation Tips"), _("ESP’s support is needed in UEFI mode and please create a partition of 100MB or more in efi format.")).show_at(document.body);
          return;
        }
        __selected_bootloader = esp_uuid;
      } else {
        __selected_bootloader = (ref = this.grub_dropdown) != null ? ref.get_selected() : void 0;
        if (!__selected_bootloader) {
          __selected_bootloader = v_part_info[target]["disk"];
        }
      }
      if (this.confirm_installation_dialog) {
        this.confirm_installation_dialog.hide_dialog();
      }
      this.confirm_installation_dialog = new InstallDialog("InstallModel");
      callback = function() {
        return document.querySelector(".PartTable").focus();
      };
      this.confirm_installation_dialog.cancel_cb = callback;
      this.confirm_installation_dialog.title_close.addEventListener("click", (function(_this) {
        return function(e) {
          return callback();
        };
      })(this));
      return this.confirm_installation_dialog.show_at(document.body);
    };

    Part.prototype.handle_install_simple = function() {
      var callback;
      if (!__selected_item) {
        return;
      }
      if (m_part_info[__selected_item.id]["type"] === "freespace") {
        if (!can_add_normal(__selected_item.id) && !can_add_logical(__selected_item.id)) {
          new MessageDialog(_("Add Partition"), _("Can't create a partition here")).show_at(document.body);
          return;
        }
      }
      if (DCore.Installer.system_support_efi() && !DCore.Installer.disk_is_gpt(__selected_disk)) {
        __selected_use_uefi = false;
      }
      __selected_bootloader = __selected_disk;
      if (this.confirm_installation_dialog) {
        this.confirm_installation_dialog.hide_dialog();
      }
      this.confirm_installation_dialog = new InstallDialog("InstallModel");
      callback = function() {
        return document.querySelector(".PartTable").focus();
      };
      this.confirm_installation_dialog.cancel_cb = callback;
      this.confirm_installation_dialog.title_close.addEventListener("click", (function(_this) {
        return function(e) {
          return callback();
        };
      })(this));
      return this.confirm_installation_dialog.show_at(document.body);
    };

    Part.prototype.init_part_page = function() {
      var grub_label, uefi_label;
      if (__selected_mode === null) {
        __selected_mode = "simple";
      }
      if (__selected_disk === null) {
        __selected_disk = disks[0];
      }
      this.disktab = new DiskTab("disk_tab");
      this.wrap.appendChild(this.disktab.element);
      this.linemap = new PartLineMaps("part_line_maps");
      this.wrap.appendChild(this.linemap.element);
      this.table = new PartTable("part_table");
      this.table.key_select(this.start_install_cb);
      this.wrap.appendChild(this.table.element);
      this.part_uefi = create_element("div", "PartUefi", this.wrap);
      enable_tab(this.part_uefi);
      this.uefi_radio = create_element("input", "grub_radio", this.part_uefi);
      this.uefi_radio.setAttribute("type", "radio");
      this.uefi_radio.setAttribute("id", "uefi_radio_id");
      this.uefi_radio.defaultChecked = false;
      uefi_label = create_element("label", "uefi_label", this.part_uefi);
      uefi_label.setAttribute("for", "uefi_radio_id");
      this.uefi_txt = create_element("div", "uefi_txt", this.part_uefi);
      this.uefi_txt.innerText = _("UEFI");
      this.part_grub = create_element("div", "PartGrub", this.wrap);
      enable_tab(this.part_grub);
      this.grub_radio = create_element("input", "grub_radio", this.part_grub);
      this.grub_radio.setAttribute("type", "radio");
      this.grub_radio.setAttribute("id", "grub_radio_id");
      this.grub_radio.defaultChecked = true;
      grub_label = create_element("label", "grub_label", this.part_grub);
      grub_label.setAttribute("for", "grub_radio_id");
      this.grub_loader = create_element("div", "PartGrubLoader", this.part_grub);
      this.grub_loader.innerText = _("Boot Loader");
      this.grub_select = create_element("div", "PartGrubSelect", this.part_grub);
      return this.fill_bootloader();
    };

    Part.prototype.fill_bootloader = function() {
      var disk, j, keys, len1, len2, m, part, ref, ref1, ref2, text, values, width;
      keys = [];
      values = [];
      for (j = 0, len1 = disks.length; j < len1; j++) {
        disk = disks[j];
        text = v_disk_info[disk]["path"] + "\t" + v_disk_info[disk]["model"] + "\t" + (v_disk_info[disk]["length"] / GB).toFixed(0) + "GB";
        keys.push(disk);
        values.push(text);
        ref = v_disk_info[disk]["partitions"];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          if ((ref1 = v_part_info[part]["type"]) === "normal" || ref1 === "logical") {
            keys.push(part);
            values.push(v_part_info[part]["path"]);
          }
        }
      }
      if (this.grub_dropdown != null) {
        if ((ref2 = this.grub_dropdown) != null) {
          ref2.destroy();
        }
        this.grub_dropdown = null;
      }
      this.grub_dropdown = new DropDown("dd_grub", false, null);
      this.grub_select.appendChild(this.grub_dropdown.element);
      this.grub_dropdown.set_drop_items(keys, values);
      width = 500;
      this.grub_dropdown.set_drop_size(width, 20);
      return this.grub_dropdown.show_drop();
    };

    Part.prototype.switch_mode = function() {
      if (__selected_mode !== "advance") {
        return this.switch_mode_advance();
      } else {
        return this.switch_mode_simple();
      }
    };

    Part.prototype.unmount_part = function() {
      var disk, error, error1, item, j, len1, len2, len3, m, n, part, ref, ref1, ref2, ref3, results;
      for (j = 0, len1 = disks.length; j < len1; j++) {
        disk = disks[j];
        ref = m_disk_info[disk]["partitions"];
        for (m = 0, len2 = ref.length; m < len2; m++) {
          part = ref[m];
          try {
            if ((ref1 = DCore.Installer.get_partition_mp(part)) !== "/" && ref1 !== "/cdrom") {
              DCore.Installer.unmount_partition(part);
            }
          } catch (error1) {
            error = error1;
            console.error("[part.coffee] Part.umount_part() call umount_part() error: " + error + ", part: " + part);
          }
        }
      }
      ref3 = (ref2 = Widget.look_up("part_table")) != null ? ref2.partitems : void 0;
      results = [];
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        item = ref3[n];
        results.push(item.check_busy());
      }
      return results;
    };

    Part.prototype.switch_mode_advance = function() {
      var cancel_cb, click_cb, ok_cb, width;
      __selected_mode = "advance";
      if (check_has_mount(__selected_disk)) {
        if (!check_only_swap_mount(__selected_disk)) {
          this.unmount_model = new PromptDialog(_("Unmount Partition"), _("Partition is detected to have been mounted.\nAre you sure you want to unmount it?"), this.unmount_part);
          this.unmount_model.show_at(document.body);
        } else {
          this.unmount_part();
        }
      }
      this.linemap.element.setAttribute("style", "display:block");
      if (DCore.Installer.system_support_efi()) {
        this.part_uefi.style.display = "";
        width = 500;
        this.grub_dropdown.set_drop_size(width, 20);
        this.grub_dropdown.show_drop();
        click_cb = (function(_this) {
          return function() {
            var ref, ref1;
            if ((ref = _this.grub_radio) != null) {
              ref.checked = false;
            }
            return (ref1 = _this.uefi_radio) != null ? ref1.checked = true : void 0;
          };
        })(this);
        ok_cb = (function(_this) {
          return function() {
            var ref, ref1, ref2;
            if ((ref = _this.grub_select) != null) {
              ref.style.display = "none";
            }
            if ((ref1 = _this.grub_radio) != null) {
              ref1.checked = false;
            }
            return (ref2 = _this.uefi_radio) != null ? ref2.checked = true : void 0;
          };
        })(this);
        cancel_cb = (function(_this) {
          return function() {
            var ref, ref1, ref2;
            if ((ref = _this.grub_select) != null) {
              ref.style.display = "block";
            }
            if ((ref1 = _this.grub_radio) != null) {
              ref1.checked = true;
            }
            return (ref2 = _this.uefi_radio) != null ? ref2.checked = false : void 0;
          };
        })(this);
        if (DCore.Installer.disk_is_gpt(__selected_disk)) {
          ok_cb();
        } else {
          cancel_cb();
        }
        this.uefi_radio.addEventListener("click", (function(_this) {
          return function(e) {
            e.stopPropagation();
            if (__selected_disk === null) {
              return;
            }
            click_cb();
            if (DCore.Installer.disk_is_gpt(__selected_disk)) {
              return ok_cb();
            } else {
              return new PromptDialog(_("Warning"), _("UEFI-native installation only supports GPT-formatted disk. You will lose all disk data if you insist on installing."), ok_cb, cancel_cb).show_at(document.body);
            }
          };
        })(this));
        this.grub_radio.addEventListener("click", cancel_cb);
      } else {
        this.part_uefi.style.display = "none";
        this.grub_radio.style.display = "none";
      }
      this.part_grub.style.display = "";
      this.table.update_mode(__selected_mode);
      return this.t_mode.innerText = _("Simple Mode");
    };

    Part.prototype.switch_mode_simple = function() {
      var ref, ref1, ref2;
      __selected_mode = "simple";
      if ((ref = this.add_model) != null) {
        ref.hide_dialog();
      }
      if ((ref1 = this.delete_model) != null) {
        ref1.hide_dialog();
      }
      if ((ref2 = this.unmount_model) != null) {
        ref2.hide_dialog();
      }
      this.linemap.element.setAttribute("style", "display:none");
      this.part_uefi.style.display = "none";
      this.part_grub.style.display = "none";
      this.table.update_mode(__selected_mode);
      return this.t_mode.innerText = _("Expert Mode");
    };

    return Part;

  })(Page);

  ReportDialog = (function(superClass) {
    extend(ReportDialog, superClass);

    function ReportDialog(id1) {
      this.id = id1;
      ReportDialog.__super__.constructor.call(this, this.id, false, this.cb);
      this.add_css_class("DialogCommon");
      this.title_txt.innerText = _("Error Report");
      this.report_tips = create_element("p", "", this.content);
      this.report_tips.innerText = _("System installation failed. Please send the log to Deepin Team.");
    }

    ReportDialog.prototype.cb = function() {
      return DCore.Installer.finish_install();
    };

    return ReportDialog;

  })(Dialog);

  Progress = (function(superClass) {
    extend(Progress, superClass);

    function Progress(id1) {
      this.id = id1;
      this.ppt_prepare = bind(this.ppt_prepare, this);
      Progress.__super__.constructor.apply(this, arguments);
      this.close.style.display = "none";
      this.titleimg = create_img("", "images/progress_part.png", this.titleprogress);
      this.loading = create_element("div", "Loading", this.element);
      this.loading_tips = create_element("div", "LoadingTxt", this.loading);
      this.loading_tips.innerText = _("Preparing for Installation");
      this.rotate = create_element("div", "Rotate", this.loading);
      this.deg = 0;
      this.tid_rotate = setInterval((function(_this) {
        return function() {
          return _this.update_rotate();
        };
      })(this), 30);
      this.progress_container = create_element("div", "ProgressContainer", this.element);
      this.progressbar = create_element("div", "ProgressBar", this.progress_container);
      this.ppt = create_element("iframe", "ppt_iframe", this.element);
      this.ppt.setAttribute("id", "ppt_iframe");
      this.ppt.name = "ppt_iframe";
      setTimeout(this.ppt_prepare, 500);
    }

    Progress.prototype.update_rotate = function() {
      if (this.deg > 360) {
        this.deg = 0;
      }
      this.rotate.style.webkitTransform = "rotate(" + this.deg + "deg)";
      return this.deg += 12;
    };

    Progress.prototype.update_progress = function(progress) {
      return this.progressbar.style.width = progress;
    };

    Progress.prototype.ppt_prepare = function() {
      var lang;
      this.ppt.onload = (function(_this) {
        return function() {
          return _this.ppt_show();
        };
      })(this);
      this.ppt.onerror = (function(_this) {
        return function() {
          return window.frames['ppt_iframe'].window.location.reload();
        };
      })(this);
      lang = document.body.lang;
      console.log("[progress.cofffee] Progress.ppt_prepare() lang: ", lang);
      this.ppt.src = "ppt/slideshow2014/index.html?lang=" + lang;
      this.titleimg.setAttribute("src", "images/progress_extract.png");
      this.progress_container.style.display = "block";
      return this.update_progress("1%");
    };

    Progress.prototype.ppt_show = function() {
      var reload_tid;
      reload_tid = setInterval(function() {
        var error, error1;
        try {
          if (window.frames['ppt_iframe'].document.body) {
            return clearInterval(reload_tid);
          } else {
            console.debug("[progress.coffee] Progress.ppt_show() iframe document.body is null, reload interval: " + reload_tid);
            return window.frames['ppt_iframe'].window.location.reload();
          }
        } catch (error1) {
          error = error1;
          console.error("[progress.coffee] Progress.ppt_show() iframe document.body is null, reload interval: " + reload_tid + ", error: " + error);
          return window.frames['ppt_iframe'].window.location.reload();
        }
      }, 800);
      return setTimeout((function(_this) {
        return function() {
          clearInterval(_this.tid_rotate);
          _this.loading.style.display = "none";
          return _this.ppt.style.display = "block";
        };
      })(this), 500);
    };

    return Progress;

  })(Page);

  progress_page = new Progress("progress");

  DCore.signal_connect("install_progress", function(per) {
    if (per >= 100) {
      pc.switch_page(new Finish("finish", true, pc.without_wm));
      return;
    }
    return progress_page.update_progress(per + "%");
  });

  DCore.signal_connect("install_terminate", function() {
    return pc.switch_page(new Finish("finish", false, pc.without_wm));
  });

  Finish = (function(superClass) {
    extend(Finish, superClass);

    function Finish(id1, succeed, withoutwm) {
      this.id = id1;
      this.succeed = succeed;
      this.withoutwm = withoutwm;
      this.now_cb = bind(this.now_cb, this);
      Finish.__super__.constructor.apply(this, arguments);
      if (this.succeed) {
        this.titleimg = create_img("", "images/progress_succeed.png", this.titleprogress);
      } else {
        this.titleimg = create_img("", "images/progress_failed.png", this.titleprogress);
      }
      this.info = create_element("div", "FinishInfo", this.element);
      this.image = create_img("Image", "", this.info);
      this.desc = create_element("div", "Desc", this.info);
      this.detail = create_element("div", "Detail", this.info);
      this.ops = create_element("div", "FinishOps", this.element);
      this.now = new NextStep("Now", _("Reboot Now"), this.now_cb);
      this.ops.appendChild(this.now.element);
      this.now.next_bt_enable();
      if (this.succeed) {
        this.image.src = "images/succeed.png";
        this.desc.innerText = _("Installation Succeed!");
        this.detail.innerText = _("Tips: Please remove the installation media before reboot, so as to avoid reentering into the installation environment when you start the computer next time. ");
        this.now.set_text(_("Reboot Now"));
      } else {
        this.image.src = "images/failed.png";
        this.desc.innerText = _("Installation Failed!");
        this.detail.style.color = "rgba(255,255,255,1.0)";
        this.detail.innerText = _("The installation log has been saved on the desktop for you.\n To help us improve the system better, please send the log to Deepin Team. Thank you! ");
        this.now.set_text(_("Exit Installation"));
        this.detail.addEventListener("click", (function(_this) {
          return function(e) {
            return DCore.Installer.show_log();
          };
        })(this));
        this.detail.addEventListener("mouseover", (function(_this) {
          return function(e) {
            return _this.detail.style.color = "red";
          };
        })(this));
        this.detail.addEventListener("mouseout", (function(_this) {
          return function(e) {
            return _this.detail.style.color = "rgba(255,255,255,0.7)";
          };
        })(this));
      }
      if (this.withoutwm && !this.succeed) {
        this.detail.style.display = "none";
      }
    }

    Finish.prototype.now_cb = function() {
      var error, error1;
      try {
        if (DEBUG) {
          return console.debug("[finish.coffee] Finish.now_cb() in DEBUG mode, do nothing");
        } else {
          return DCore.Installer.finish_reboot();
        }
      } catch (error1) {
        error = error1;
        return console.error("[finish.coffee] Finish.now_cb() call finish_reboot() failed, error: ", error);
      }
    };

    return Finish;

  })(Page);

  pc = new PageContainer("pc");

  document.body.appendChild(pc.element);

  DCore.signal_connect("without_wm", function() {
    console.log("[installer.coffee] connected to dbus signal `without_wm`");
    return pc.without_wm = true;
  });

  DCore.signal_connect("is_virtual_machine", function() {
    console.log("[installer.coffee] connected to dbus signal `is_virtual_machine`");
    pc.is_virtual_machine = true;
    if (virtual_page == null) {
      virtual_page = new VirtualMachine("VirtualMachine");
    }
    return pc.switch_page(virtual_page);
  });

  DCore.signal_connect("auto_mode", function() {
    console.log("[installer.coffee] connected to dbus signal `auto_mode`");
    pc.auto_mode = true;
    if (pc.is_virtual_machine) {
      return;
    }
    if (progress_page == null) {
      progress_page = new Progress("progress");
    }
    pc.switch_page(progress_page);
    return DCore.Installer.start_install();
  });

  if (welcome_page == null) {
    welcome_page = new Welcome("welcome");
  }

  pc.switch_page(welcome_page);

  DCore.Installer.emit_webview_ok();

}).call(this);
