// Generated by CoffeeScript 1.10.0
(function() {
  var $, $s, APP_NAME, DEEPIN_ITEM_ID, DOWN_ARROW, ENTER_KEY, ESC_KEY, KEYCODE, LEFT_ARROW, Language, Module, RIGHT_ARROW, SPACE_KEY, THEME, THEME_PATH, UP_ARROW, Widget, _, _events, ajax, array_sort_min2max, assert, bindtextdomain, build_menu, calc_text_size, clamp, create_element, create_img, dnd_is_deepin_item, dnd_is_desktop, dnd_is_file, find_drag_target, getRandomInt, get_dbus, get_function_name, get_page_xy, get_path_base, get_path_name, inject_css, inject_js, remove_element, run_post, setTheme, set_pos_center, sortNumber, swap_element, theme,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ESC_KEY = 27;

  SPACE_KEY = 32;

  ENTER_KEY = 13;

  LEFT_ARROW = 37;

  RIGHT_ARROW = 39;

  UP_ARROW = 38;

  DOWN_ARROW = 40;

  KEYCODE = {
    ESC: 27,
    SPACE: 32,
    ENTER: 13,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
    UP_ARROW: 38,
    DOWN_ARROW: 40,
    WIN: 0,
    SUPER: 0,
    ALT: 18,
    BACKSPACE: 8,
    F12: 123,
    TAB: 9
  };

  Storage.prototype.setObject = function(key, value) {
    return this.setItem(key, JSON.stringify(value));
  };

  Storage.prototype.getObject = function(key) {
    return JSON.parse(this.getItem(key));
  };

  String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
  };

  String.prototype.args = function() {
    var i, j, len, o, ref;
    o = this;
    len = arguments.length;
    for (i = j = 1, ref = len; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      o = o.replace(new RegExp("%" + i, "g"), "" + arguments[i - 1]);
    }
    return o;
  };

  String.prototype.addSlashes = function() {
    return this.replace(/[\\"']/g, '\\$&').replace(/\u0000/g, '\\0');
  };

  Array.prototype.remove = function(el) {
    var i;
    i = this.indexOf(el);
    if (i !== -1) {
      return this.splice(this.indexOf(el), 1)[0];
    }
  };

  assert = function(value, msg) {
    if (!value) {
      throw new Error(msg);
    }
  };

  _ = function(s, d) {
    if (d) {
      return DCore.dgettext(d, s);
    } else {
      return DCore.gettext(s);
    }
  };

  bindtextdomain = function(domain, locale_dir) {
    return DCore.bindtextdomain(domain, locale_dir);
  };

  build_menu = function(info) {
    var count, i, item, j, len, menu, ref, submenu, v;
    len = info.length;
    if (len < 2) {
      return null;
    }
    count = 10000;
    menu = new Menu(info[0]);
    for (i = j = 1, ref = len; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
      v = info[i];
      if (v.length === 0) {
        menu.addSeparator();
      } else if (typeof v[0] === "number") {
        item = new MenuItem(v[0], v[1]);
        if (v[2] != null) {
          item.setActive(v[2]);
        }
        menu.append(item);
      } else {
        submenu = build_menu(v[1]);
        menu.append(new MenuItem(count, v[1]).setSubMenu(build_menu(v[1])));
        count += 1;
      }
    }
    return menu;
  };

  get_page_xy = function(el, x, y) {
    var p;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return p = webkitConvertPointFromNodeToPage(el, new WebKitPoint(x, y));
  };

  find_drag_target = function(el) {
    var p;
    p = el;
    if (p.draggable) {
      return p;
    }
    while (p = p.parentNode) {
      if (p.draggable) {
        return p;
      }
    }
    return null;
  };

  swap_element = function(c1, c2) {
    var tmp;
    if (c1.parentNode === c2.parentNode) {
      tmp = document.createElement('div');
      c1.parentNode.insertBefore(tmp, c1);
      c2.parentNode.insertBefore(c1, c2);
      tmp.parentNode.insertBefore(c2, tmp);
      return tmp.parentNode.removeChild(tmp);
    }
  };

  document.body.ondrop = function(e) {
    return e.preventDefault();
  };

  run_post = function(f, self) {
    var f2;
    f2 = f.bind(self || this);
    return setTimeout(f2, 0);
  };

  create_element = function(opt, parent, compatible) {
    var el, k, v;
    if (typeof compatible !== 'undefined' || typeof parent === 'string') {
      opt = {
        tag: opt,
        "class": parent
      };
      parent = compatible;
    }
    if (opt.tag == null) {
      return null;
    }
    el = document.createElement(opt.tag);
    delete opt.tag;
    for (k in opt) {
      if (!hasProp.call(opt, k)) continue;
      v = opt[k];
      el.setAttribute(k, v);
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };

  create_img = function(opt, parent, compatible) {
    var el;
    if (typeof compatible !== 'undefined') {
      opt = {
        "class": opt,
        src: parent
      };
      parent = compatible;
    }
    opt.tag = 'img';
    el = create_element(opt, parent);
    el.draggable = false;
    return el;
  };

  calc_text_size = function(txt, width) {
    var h, tmp;
    tmp = create_element('div', 'hidden_calc_text', document.body);
    tmp.innerText = txt;
    tmp.style.width = width + "px";
    h = tmp.clientHeight;
    document.body.removeChild(tmp);
    return h;
  };

  clamp = function(value, min, max) {
    if (value < min) {
      return min;
    }
    if (value > max) {
      return max;
    }
    return value;
  };

  get_function_name = function() {
    if (!arguments.caller) {
      return "AnymouseFunction";
    }
    return /function (.*?)\(/.exec(arguments.caller.toString())[1];
  };

  DEEPIN_ITEM_ID = "deepin-item-id";

  dnd_is_desktop = function(e) {
    return e.dataTransfer.getData("text/uri-list").trim().endsWith(".desktop");
  };

  dnd_is_deepin_item = function(e) {
    if (e.dataTransfer.getData(DEEPIN_ITEM_ID)) {
      return true;
    } else {
      return false;
    }
  };

  dnd_is_file = function(e) {
    return e.dataTransfer.getData("text/uri-list").length !== 0;
  };

  ajax = function(url, sync, callback, callback_error) {
    var xhr;
    if (sync == null) {
      sync = true;
    }
    xhr = new XMLHttpRequest();
    xhr.open("GET", url, sync);
    xhr.onload = function() {
      if (typeof callback === "function") {
        callback(xhr);
      }
    };
    xhr.onerror = function() {
      return typeof callback_error === "function" ? callback_error(xhr) : void 0;
    };
    return xhr.send(null);
  };

  get_path_base = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  get_path_name = function(path) {
    var dot_pos;
    dot_pos = path.lastIndexOf('.');
    if (dot_pos === -1) {
      return path.substring(path.lastIndexOf('/') + 1);
    } else {
      return path.substring(path.lastIndexOf('/') + 1, dot_pos);
    }
  };

  remove_element = function(obj) {
    var _parentElement;
    _parentElement = obj != null ? obj.parentNode : void 0;
    return _parentElement != null ? _parentElement.removeChild(obj) : void 0;
  };

  sortNumber = function(a, b) {
    return a - b;
  };

  array_sort_min2max = function(arr) {
    return arr.sort(sortNumber);
  };

  inject_js = function(src) {
    var js_element;
    js_element = create_element("script", null, document.body);
    return js_element.src = src;
  };

  inject_css = function(el, src) {
    var css_element;
    css_element = create_element('link', null, el);
    css_element.rel = "stylesheet";
    return css_element.href = src;
  };

  get_dbus = function(type, opt, testProperty) {
    var count, d, dbusArg, e, error, func;
    if (!testProperty) {
      throw "get_dbus requires 3 arguments";
    }
    type = type.toLowerCase();
    if (type === "system") {
      type = "sys";
    }
    if (typeof opt === 'string') {
      dbusArg = [opt];
      func = DCore.DBus[type];
    } else {
      dbusArg = [opt.name, opt.path, opt["interface"]];
      func = DCore.DBus[type + "_object"];
    }
    d = null;
    try {
      d = func.apply(null, dbusArg);
    } catch (error) {
      e = error;
      if (typeof opt === 'string') {
        console.log("Get DBus \"" + opt + "\" failed: " + e);
      } else {
        console.log("Get DBus \"" + opt.name + " " + opt.path + " " + opt["interface"] + "\" failed: " + e);
      }
      return null;
    }
    if (!d) {
      if (typeof opt === 'string') {
        console.log("Get DBus \"" + opt + "\" failed");
      } else {
        console.log("Get DBus \"" + opt.name + " " + opt.path + " " + opt["interface"] + "\" failed");
      }
      return null;
    }
    count = 0;
    while (d && !d[testProperty]) {
      try {
        d = func.apply(null, dbusArg);
        count += 1;
        if (typeof opt === 'string') {
          console.log("Get DBus \"" + opt + "\" failed");
        } else {
          console.log("Get DBus \"" + opt.name + " " + opt.path + " " + opt["interface"] + "\" failed");
        }
        if (count === 100) {
          return null;
        }
      } catch (undefined) {}
    }
    return d;
  };

  getRandomInt = function(min, max) {
    var c;
    c = max - min + 1;
    return Math.floor(Math.random() * c + min);
  };

  set_pos_center = function(el, y_scale, x_scale) {
    var left, top;
    if (y_scale == null) {
      y_scale = 0.8;
    }
    if (x_scale == null) {
      x_scale = 0.8;
    }
    top = (screen.height - el.clientHeight) / 2 * y_scale;
    left = (screen.width - el.clientWidth) / 2 * x_scale;
    el.style.position = "absolute";
    el.style.top = top + "px";
    return el.style.left = left + "px";
  };

  Module = (function() {
    var moduleKeywords;

    function Module() {}

    moduleKeywords = ['extended', 'included'];

    Module.extended = function(obj) {
      var key, ref, value;
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((ref = obj.extended) != null) {
        ref.apply(this);
      }
      return this;
    };

    Module.included = function(obj, parms) {
      var key, ref, ref1, value;
      for (key in obj) {
        value = obj[key];
        if (indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((ref = obj.included) != null) {
        ref.apply(this);
      }
      return (ref1 = obj.__init__) != null ? ref1.call(this, parms) : void 0;
    };

    return Module;

  })();

  _events = ['blur', 'change', 'click', 'contextmenu', 'buildmenu', 'rightclick', 'copy', 'cut', 'dblclick', 'error', 'focus', 'keydown', 'keypress', 'keyup', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseenter', 'mouseleave', 'mouseup', 'mousewheel', 'paste', 'reset', 'resize', 'scroll', 'select', 'submit', 'DOMActivate', 'DOMAttrModified', 'DOMCharacterDataModified', 'DOMFocusIn', 'DOMFocusOut', 'DOMMouseScroll', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMSubtreeModified', 'textInput', 'dragstart', 'dragend', 'dragover', 'drag', 'drop', 'dragenter', 'dragleave', 'itemselected', 'webkitTransitionEnd'];

  Widget = (function(superClass) {
    extend(Widget, superClass);

    Widget.object_table = {};

    Widget.look_up = function(id) {
      return this.object_table[id];
    };

    function Widget() {
      var el, f_menu, f_rclick, k, key, ref, v;
      el = document.createElement('div');
      el.setAttribute('class', this.constructor.name);
      if (this.id) {
        el.id = this.id;
        Widget.object_table[this.id] = this;
      }
      this.element = el;
      f_menu = null;
      f_rclick = null;
      ref = this.constructor.prototype;
      for (k in ref) {
        v = ref[k];
        if (!(k.search("do_") === 0)) {
          continue;
        }
        key = k.substr(3);
        if (indexOf.call(_events, key) >= 0) {
          if (key === "rightclick") {
            f_rclick = v.bind(this);
          } else if (key === "buildmenu") {
            f_menu = v.bind(this);
          } else if (key === "contextmenu") {
            "nothing should do";
          } else {
            this.element.addEventListener(key, v.bind(this));
          }
        } else {
          console.error("[widget.coffee] Widget.constructor(), found the do_ prefix but the name " + key + " is not an dom events");
        }
      }
      if (f_menu || f_rclick) {
        this.element.addEventListener("contextmenu", (function(_this) {
          return function(e) {
            var menu, ref1;
            if (f_rclick) {
              f_rclick(e);
            }
            if (f_menu) {
              menu = f_menu();
              menu.unshift(DEEPIN_MENU_TYPE.NORMAL);
              if ((ref1 = build_menu(menu)) != null) {
                ref1.addListener(_this.on_itemselected).showMenu(e.clientX, e.clientY);
              }
              return e.preventDefault();
            }
          };
        })(this));
      }
    }

    Widget.prototype.destroy = function() {
      var ref;
      if ((ref = this.element.parentElement) != null) {
        ref.removeChild(this.element);
      }
      return delete Widget.object_table[this.id];
    };

    Widget.prototype.add_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.add(name);
    };

    Widget.prototype.remove_css_class = function(name, el) {
      if (!el) {
        el = this.element;
      }
      return el.classList.remove(name);
    };

    return Widget;

  })(Module);

  $ = function(q, o) {
    var ref;
    return (ref = $s(q, o)) != null ? ref[0] : void 0;
  };

  $s = function(q, o) {
    var div, selector;
    if (typeof q !== 'string') {
      div = q;
      selector = o;
    } else {
      div = document;
      selector = q;
    }
    switch (selector.charAt(0)) {
      case '#':
        return [div.getElementById(selector.substr(1))];
      case '.':
        return div.getElementsByClassName(selector.substr(1));
      default:
        return div.getElementsByTagName(selector);
    }
  };

  THEME = {
    "static": "static",
    sky: "sky",
    rain: "rain"
  };

  THEME_PATH = "greeter-theme";

  APP_NAME = "Greeter";

  setTheme = function(theme) {
    var _b, path;
    _b = document.body;
    _b.style.height = screen.height;
    _b.style.width = screen.width;
    console.log("[theme.coffee] setTheme: " + theme);
    path = THEME_PATH + "/" + theme;
    switch (theme) {
      case THEME.sky:
        return inject_js(path + "/sky.js");
    }
  };

  theme = DCore[APP_NAME].get_theme();

  setTheme(theme);

  Language = (function(superClass) {
    extend(Language, superClass);

    function Language() {
      Language.__super__.constructor.apply(this, arguments);
      inject_css(document.body, "css/language.css");
      this.local_list = [];
      this.lang_list = [];
      document.body.appendChild(this.element);
      this.get_lang_list();
      this.boxscroll_create();
    }

    Language.prototype.get_lang_list = function() {
      this.local_list = DCore.Greeter.get_local_list();
      return this.lang_list = DCore.Greeter.get_lang_list();
    };

    Language.prototype.select_lang = function(name) {
      var j, la, lang, len1, ref, session;
      ref = this.lang_list;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        la = ref[j];
        if (la["name"] === name) {
          lang = la["lang"];
        }
      }
      console.log("[language.coffee] Language.select_lang() language name: " + name + ", language: " + lang);
      DCore.Greeter.set_language(lang);
      session = DCore.Greeter.get_session_by_conf();
      if (session == null) {
        session = DCore.Greeter.get_default_session();
      }
      return this.start_session("deepin", "", session);
    };

    Language.prototype.start_session = function(username, password, session1) {
      this.username = username != null ? username : "deepin";
      this.password = password != null ? password : "";
      this.session = session1 != null ? session1 : DCore.Greeter.get_default_session();
      console.log("[language.coffee] language.start_session(), username: " + this.username + ", session: " + this.session);
      if (this.session == null) {
        this.session = "deepin";
      }
      document.body.cursor = "wait";
      return DCore.Greeter.start_session(this.username, this.password, this.session);
    };

    Language.prototype.boxscroll_create = function() {
      var i, j, len1, local, ref, that;
      this.wrap = create_element("div", "wrap", this.element);
      this.wrap.setAttribute("draggable", false);
      this.logo = create_element("div", "logo", this.wrap);
      this.img = create_img("img", "img/logo.png", this.logo);
      this.boxscroll = create_element("div", "boxscroll", this.wrap);
      this.boxscroll.setAttribute("id", "boxscroll");
      this.li = [];
      this.a = [];
      this.ul = create_element("ul", "", this.boxscroll);
      this.li = [];
      this.a = [];
      this.ul = create_element("ul", "", this.boxscroll);
      this.ul.setAttribute("draggable", false);
      ref = this.local_list;
      for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
        local = ref[i];
        this.li[i] = create_element("li", "", this.ul);
        this.a[i] = create_element("a", "", this.li[i]);
        this.li[i].setAttribute("id", local["name"]);
        this.a[i].innerText = local["local"];
        that = this;
        this.li[i].addEventListener("click", function() {
          return that.select_lang(this.id);
        });
      }
      return document.body.addEventListener("keydown", (function(_this) {
        return function(e) {
          console.log("[language.coffee] Language.boxscroll_create() keydown event: ", e);
          if (e.which === KEYCODE.ENTER) {
            if (list.currentIndex < 0) {
              return;
            }
            local = _this.local_list[list.currentIndex]["name"];
            console.log("[language.coffee] Language.boxscroll_create() index: ", list.currentIndex, ", local: ", local);
            return _this.select_lang(local);
          }
        };
      })(this));
    };

    return Language;

  })(Widget);

  document.body.addEventListener("contextmenu", (function(_this) {
    return function(e) {
      e.preventDefault();
      return e.stopPropagation();
    };
  })(this));

  new Language();

  DCore.signal_connect("leave-notify", function(area) {
    document.body.style.width = area.width;
    return document.body.style.height = area.height;
  });

}).call(this);
